{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OZtree","text":""},{"location":"#oztree-repository-guide","title":"OZtree Repository Guide","text":"<p>The OZtree repository contains the code and resources for the OneZoom interactive tree of life explorer. It is built using a combination of Python, JavaScript, and CSS, and it uses a MySQL database to store its data. The project is a fairly large and complex application with multiple modules and components. It has grown over time and includes legacy code from older versions of the application.</p> <p>The application has the following dependencies: *  web2py: The core framework for handling database interactions, routing, and server-side logic. *   Python: Used for server-side scripting, data analysis, and database management. *   MySQL: The primary database for storing data, including the tree topology, metadata, and user information. *   JavaScript: Provides the interactive tree rendering and user interface, handling animations, user inputs, and API interactions. *   Sass/CSS: Used for styling the application, with a heavy reliance on Bootstrap for responsive layouts. * Grunt: Manages front end asset building including concatenation, compression, and sourcemap generation. * Node.js: Used as a runtime for building and testing the JavaScript components of the application. * npm: Used for package management, and particularly for installing javascript build dependencies * Various Python libraries: such as <code>cryptography</code>, <code>uwsgi</code>, <code>lxml</code>, <code>requests</code>, <code>js2py</code>, and many more are used for different aspects of data processing, database interactions, and running background tasks</p>"},{"location":"#repository-structure","title":"Repository Structure","text":"<p>The repository is organized as follows:</p> <ul> <li><code>OZprivate</code>: A private directory containing data, scripts, and code not intended for public distribution, including tree data, server scripts, and client scripts. This is the main source of data and python backend code.</li> <li><code>cron</code>: Contains files related to scheduled tasks using <code>cron</code>.</li> <li><code>models</code>: Holds the core data models and configuration for the OneZoom application, defining the database schema, global variables and menus.</li> <li><code>modules</code>: Contains a collection of reusable Python modules that provide various functionalities for the OneZoom application.</li> <li><code>.github</code>: Contains configuration files and settings related to GitHub, including CI/CD workflows.</li> <li><code>databases</code>: Contains files related to database management, such as .gitignore files.</li> <li><code>tests</code>: Contains tests for the OneZoom project, including functional, unit, and benchmarking tests.</li> <li><code>views</code>: Contains all the view files (HTML, JSON, etc.) for the OZtree application, organized into directories based on their function.</li> <li><code>sessions</code>: Used to store session data, and has a <code>.gitignore</code> to prevent accidental commits.</li> <li><code>errors</code>: Used to store error files, and has a <code>.gitignore</code> to prevent accidental commits.</li> <li><code>controllers</code>:  Contains the controllers for the OZtree application, handling routing, logic, and API endpoints.</li> <li><code>languages</code>: Holds translation files for the application in various languages, with pluralization rules.</li> <li><code>uploads</code>: A directory for user uploaded content, which is ignored by git.</li> <li><code>.devcontainer</code>:  Contains configurations for a development environment using Docker and VS Code.</li> <li><code>cache</code>: A directory for storing cached data which is ignored by git.</li> <li><code>private</code>: A directory for private config files, and the background tasks script.</li> <li><code>_COPY_CONTENTS_TO_WEB2PY_DIR</code>: Contains files that are symlinked into the web2py application directory by a Grunt build process, particularly the main <code>routes.py</code> file.</li> <li><code>static</code>: A central repository for static assets (JavaScript, CSS, images, fonts) of the application, including both the new and legacy codebases, and the UIkit framework. The static folder in particular has a structure that mirrors the <code>OZprivate</code> directory.</li> </ul> <p>The repository contains two main versions of the JavaScript code. The older version is in <code>static/OZLegacy</code> and the newer code, which makes extensive use of a modular approach, is in <code>static/OZTreeModule</code> and <code>OZprivate/rawJS/OZTreeModule</code>.</p>"},{"location":"#key-subdirectories-and-files","title":"Key Subdirectories and Files","text":"<p>Here are some of the most important subdirectories within <code>OZtree</code>, with more details below: *   <code>OZprivate</code>     *   <code>data</code>: This directory contains the core data for the OneZoom application, including the raw tree data.  The actual tree is in <code>OZprivate/data/TreeArchive/OZlife_oldformat_selected2016-05-09+1245.nwk</code>.     *   <code>ServerScripts</code>:  Contains scripts used for backend data analysis, database management, and other server-side tasks.         *    <code>Analysis</code>:  Scripts for calculating and visualizing \"popularity\" metrics and for analyzing the structure of the tree, particularly <code>analysis.r</code> and <code>calc_phylogenetic_popularity.py</code>         *   <code>Utilities</code>: A collection of scripts used for data management, image processing, and other utility functions. The <code>picProcess.py</code> script is particularly important for managing images displayed on the tree, as it iterates through all the nodes in the tree and assigns appropriate images to display.         *   <code>Tests</code>: Scripts for testing server-side functionalities, with <code>SimpleDBtest.py</code> testing the database connection, and <code>BlatAPI.py</code> for load testing the API.         *    <code>Popularity</code>: Scripts for calculating and analyzing the phylogenetic popularity of taxa.         *   <code>SQL</code>: SQL scripts for managing the database.         * <code>Utilities/OneOff</code>: Scripts that are generally run once for a specific task.     *    <code>ClientScripts</code>: Scripts and code snippets for interacting with the tree visualization, primarily through the browser's JavaScript console.     *    <code>Legacy offline tools</code>:  Older files for creating an early version of the website that are kept for historical reference.     *    <code>Graphic design offline</code>: Contains a single SVG diagram outlining the planned refactor of the OZ application.     *   <code>Trees</code>: Contains HTML files that render interactive trees, with  <code>Salguero_Gomez_et_al_PNAS_2016.htm</code> being a key example, showcasing an embedded HTML rendering of a specific tree of life.     *  <code>Test</code>: Contains scripts and files used for testing various aspects of the OneZoom system.</p> <ul> <li> <p><code>models</code></p> <ul> <li><code>_OZglobals.py</code>: initializes global variables, settings, and flags used throughout the application.</li> <li><code>menu.py</code>: configures the application's navigation menu, defining the structure and links.</li> <li><code>db.py</code>: defines the database schema using web2py's Database Abstraction Layer (DAL).</li> </ul> </li> <li> <p><code>modules</code></p> <ul> <li><code>OZfunc.py</code>: A very large utility file with functions for dealing with text (such as names), formatting of currency and conversions between database IDs and other types of ID.</li> <li><code>sponsorship.py</code>: functions for managing sponsorships and interacting with PayPal.</li> <li><code>img.py</code>: contains methods for handling images.</li> <li><code>pinpoint.py</code>: used for translating human readable strings into database entries.</li> <li>Other modules provide functionality for mailing, usernames, tours, partners, markdown and sponsorship searching.</li> </ul> </li> <li> <p><code>tests</code></p> <ul> <li><code>functional</code>: Contains functional tests using Selenium to simulate user interactions in a browser, and organized into subdirectories by feature (<code>sponsorship</code>, <code>treeviewer</code>). The core test logic for most of the tests is in <code>functional/functional_tests.py</code>.</li> <li><code>data_files</code>: Includes testing data including  <code>opentree_tax.tsv</code>, a taxonomy of the open tree of life.</li> <li><code>site_setup</code>: Includes tests for the database and file system setup, such as <code>test_database_settings.py</code> for validating the database setup and indexes.</li> <li><code>fixtures</code>: Includes  <code>reservations.py</code>, a script that sets up the database with test reservations.</li> <li><code>benchmarking</code>: Includes benchmarking tools, such as <code>test_textsearch.py</code> for checking text search API performance.</li> <li><code>unit</code>:  Contains unit tests for various modules and controllers. The tests are in Python files beginning with <code>test_</code>.</li> </ul> </li> <li> <p><code>views</code></p> <ul> <li><code>API</code>: The backend for the OneZoom tree APIs, returning data as JSON. The <code>index.html</code> file provides documentation for all the API endpoints, many of which enable CORS.</li> <li><code>default</code>: HTML templates for the main OneZoom website, including sponsorship forms and content pages.</li> <li><code>settings_values</code>: Files used for dropdown menu options within the user settings, such as image source, language, color scheme and tree layout.</li> <li><code>tour</code>: HTML templates and JSON endpoints for creating and managing tours within the application.</li> <li><code>manage</code>: HTML files used for administrative functions, such as <code>SPONSOR_UPDATE.html</code> for validating sponsorships.</li> <li><code>tree</code>: HTML and JSON endpoints for providing information about tree nodes and leaves, particularly <code>wikipedia_OZpage.html</code> which is used for rendering wikipedia pages within the tree viewer.</li> <li><code>developer</code>: Pages aimed at developers, including <code>embedding.html</code> and <code>embed_edit.html</code> for embedding the OneZoom tree.</li> <li><code>popularity</code>: The code for the OneZoom popularity service, including an API endpoint in <code>list.json</code> to get popularity data.</li> <li><code>redirect</code>: Handles redirects to external resources, such as <code>eol.html</code> for redirecting to the EOL pages.</li> <li><code>treeviewer</code>:  Contains HTML, JavaScript, and CSS files that constitute the OneZoom tree viewer. This is a complex directory with many different files for layout, styling and rendering. A good starting place for understanding this is <code>layout.html</code>, which defines the initial canvas and loads the javascript files. The <code>server_urls.html</code> file is also important as it defines the URLs for the API endpoints, while <code>UI_layer.load</code> defines the UI components.</li> <li><code>dev</code>:  HTML files for development, testing, and documentation, such as <code>DOCS.html</code>, which shows the compiled documentation.</li> <li><code>education</code>:  Files providing educational resources, such as <code>museum_display_setup.html</code> for configuring museum displays.</li> <li><code>email</code>: Templates for generating emails used in the website, with examples for sponsorship renewal and verification emails.</li> <li><code>tour/tourstop</code>: HTML snippets used in interactive tours.</li> </ul> </li> <li> <p><code>static</code></p> <ul> <li><code>uikit-3</code>: A copy of the UIkit 3 framework, which is used for styling the application UI.</li> <li><code>OZLegacy</code>: A large directory containing all the static assets for the OZLegacy visualization tool, with subdirectories for scripts, CSS, and user data. The key files in this directory are typically the various <code>.js</code> files that contain the logic to layout and draw the tree, including <code>OZ_script_V1.2.original.js</code>. The different <code>userOptions_*js</code> files in the <code>user</code> subdirectory highlight all the settings that can be used to alter the tree presentation.</li> <li><code>images</code>: Contains image assets used throughout the application, such as the logo and various icons.</li> <li><code>otop</code>: Static files for the \"One Tree, One Planet\" feature.</li> <li><code>css</code>: CSS files for the OZtree application, including generic bootstrap styles as well as specific page styling.</li> <li><code>tour</code>: Holds CSS files for the interactive tour functionality, including the tutorial and exit confirmation popup.</li> <li><code>fonts</code>: Contains font files, including the custom SVG icon font <code>glyphicons-halflings-regular.svg</code>.</li> <li><code>OZSponsor</code>: Contains CSS and JavaScript files for the sponsor pages, including Javascript logic to retrieve data from the Encyclopedia of Life (EoL) API.</li> <li><code>OZSite</code>: Contains CSS files for the OZtree application, and styling for different types of content pages.</li> <li><code>FinalOutputs</code>: Intended to store final data outputs, such as the tree topology and cut positions.</li> <li><code>font</code>: Contains a custom SVG icon font called <code>fontello.svg</code>.</li> <li><code>OZTreeModule</code>: Contains the source code for the OZTree module, with a <code>dist</code> subdirectory containing the built javascript.</li> <li><code>js</code>: Javascript files for the main website that are separate from the tree viewer.</li> </ul> </li> <li> <p><code>OZprivate/rawJS</code></p> </li> <li><code>OZLegacy</code>: Contains the older version of the JavaScript code for the tree explorer.         *   <code>scripts</code>: This contains JavaScript files which handle the logic of the tree and UI, especially <code>OZ_script_V1.2.original.js</code> and <code>index.js</code>, with  <code>autoGenerator.js</code> controlling how the user interface is built.         *   <code>css</code>: Styles the old javascript UI, including <code>indexstyle.css</code> and a number of variations which style for different screen sizes.          *  <code>user</code>: Stores data and options for different trees, which are defined within <code>UserOptions</code> objects, such as in <code>userOptions_river.js</code>.</li> <li> <p><code>OZTreeModule</code>: Contains the newer version of the JavaScript code, which is broken down into a number of modules and subdirectories:         * <code>src</code>:           * <code>data</code>:  Contains data files used by the OZTree module, such as the <code>col_headers.js</code> for column header definitions.           *   <code>api</code>: Contains code that interacts with the OneZoom API, for fetching node and image data, including <code>api_wrapper.js</code>, <code>api_manager.js</code>, <code>node_details.js</code>, and <code>image_details.js</code>.           *   <code>tour</code>: Contains the logic for creating and managing interactive tours.             * <code>handler</code>: Modules to enhance tour stops, such as <code>Vimeo.js</code> for vimeo videos, and <code>TsProgress.js</code> for progress reporting.           *    <code>util</code>: Contains utility functions and classes, such as <code>object_pool.js</code> for managing object pools and <code>draw.js</code> for drawing text.            *  <code>interactor</code>: Manages touch and mouse events for user interactions with <code>touch.js</code> and <code>mouse.js</code>.           *  <code>navigation</code>: The core logic for managing the state of the OneZoom tree viewer, linking URL with the state of the viewer, with <code>state.js</code>, <code>setup_page.js</code> and <code>pinpoint.js</code> being the most important files.           *  <code>factory</code>: Contains the core logic for creating and managing the tree structure.              *  <code>data_repo.js</code>: is the central repository for all tree data, and <code>midnode.js</code> is the base class for all nodes.           *   <code>render</code>: Contains the core rendering logic, with <code>renderer.js</code> managing the canvas and orchestrating the rendering process.           *  <code>ui</code>: Provides user interface elements, such as the search functionality in <code>search.js</code> and the leaf drawing functionality in <code>leaf_draw.js</code>.           *  <code>themes</code>: Contains the code that defines the color themes used by the module.            * <code>projection</code>: The core logic for projecting and rendering the OneZoom tree with a large number of files to manage the layout, including subdirectories for the AT, otop, polytomy, and life layouts.            * <code>libs</code>: External libraries, such as <code>jquery.js</code> and a <code>requestAnimationFrame</code> polyfill.            * <code>controller</code>: The core logic for the OneZoom tree viewer, with <code>controller.js</code> acting as the main file and <code>controller_navigation.js</code> managing the navigation state.          *  <code>docs</code>: Documentation for the OZTree module written in markdown.         *  <code>tests</code>: Tests for the OZTree module, including testing pinpoint resolution and tour management.</p> </li> <li> <p><code>_github</code></p> <ul> <li><code>workflows</code>: Contains GitHub Actions workflow files for CI and deployment.</li> </ul> </li> </ul>"},{"location":"#how-these-components-work-together","title":"How these components work together","text":"<p>The OneZoom application uses a Model-View-Controller architecture where the models are in the <code>models</code> directory, the views are in the <code>views</code> directory and the controllers are in the <code>controllers</code> directory, with auxiliary functions in the <code>modules</code> directory.  The <code>OZprivate</code> directory contains a large amount of server-side python code, for grabbing data from EoL or other websites, for processing that data, and for populating the mysql database that forms the backbone of the application.  The <code>static</code> directory contains the client-side resources, such as JavaScript, CSS, and images.  These client-side resources are downloaded into the user's browser when viewing the OneZoom website and they communicate with the server through a set of web APIs found in the <code>views/API</code> directory. These APIs serve JSON data used by the JavaScript code to render the tree and allow user interactions, such as zooming and panning. The <code>_github</code> directory handles workflow and automation in Github. Finally the <code>tests</code> directory provides tests for the entire code-base.</p> <p>The newer JavaScript code in <code>OZprivate/rawJS/OZTreeModule/src</code> is designed to be modular, with each subdirectory handling different aspects of the application, which greatly increases flexibility and maintainability. The <code>OZTreeModule/src</code> directory is the location of most of the code which is used to draw the main interactive tree. This new JavaScript code has a documentation framework in <code>OZprivate/rawJS/OZTreeModule/docs</code> and tests in <code>OZprivate/rawJS/OZTreeModule/tests</code>, both of which are also designed to be modular. The older JavaScript code in <code>static/OZLegacy</code> provides the rendering and interaction logic, but using a monolithic javascript file (e.g. <code>OZ_script_V1.2.original.js</code>) rather than the modular javascript present in <code>OZTreeModule</code>.</p> <p>The application also contains components designed to be independent, such as the <code>treeviewer</code> in the <code>views</code> directory and the <code>OZTreeModule</code> in the <code>static</code> directory, which should be able to render the interactive tree, with minimal dependencies on other parts of the project, allowing for reuse in other projects. The various configuration settings are managed using variables in <code>_OZglobals.py</code>, and these settings allow for a large amount of customization of the application by those that wish to develop with it.</p>"},{"location":"#workflow","title":"Workflow","text":"<p>Typically, a developer might use the following workflow: 1. Perform any data analysis or database changes using scripts in the <code>OZprivate</code> directory, using utilities from the <code>modules</code> directory where appropriate, such as image handling or pinpoint conversion. 2. If making changes to the server-side code, modify files in <code>controllers</code>, <code>models</code>, and <code>modules</code>. 3.  For front-end changes, edit files in <code>static/OZTreeModule/src</code> and <code>static/css</code>, using variables and mixins in <code>OZprivate/scss</code>. 4. Compile JavaScript and CSS changes using <code>grunt dev</code> (for a developer version), <code>grunt prod</code> for a production build, or <code>grunt partial-install</code> for a simplified version which loads data from the main website. 5. Test the updated code by refreshing the browser, or by running tests in the <code>tests</code> folder. Functional tests will require you to start a web2py instance using <code>./web2py-run</code>. You can also run unit tests in the browser. 6. If making changes to the documentation, edit the markdown files in <code>OZprivate/rawJS/OZTreeModule/docs</code> and compile them using <code>grunt docs</code> command. 7. If you wish to create a partial install with local data, you will need to run a local web server, such as using the command  <code>./web2py-run</code> to generate the <code>static/minlife.html</code> and <code>static/minlife_tour.html</code> files.</p> <p>This workflow ensures that changes are made in a consistent and modular way, reducing the likelihood of introducing bugs or unintended side effects.</p> <p>In conclusion, the <code>OZtree</code> repository is a complex and multifaceted project that requires careful understanding of its different modules to make meaningful changes. However, its modular design makes it extensible and powerful, enabling developers to customize a range of aspects of the tree, from its presentation to how users can interact with it. This guide should provide a useful overview of the key components and how they work together.</p>"},{"location":".devcontainer/","title":".devcontainer","text":"<p>This directory contains the configuration files for a development environment using Docker and Visual Studio Code's Dev Containers feature. The files work together to create a consistent and reproducible development environment.</p> <p>The core of the setup is defined in the <code>devcontainer.json</code> file, which specifies the configuration for the dev container. It indicates that the container is built using the <code>docker-compose.yml</code> file, and uses the <code>dev</code> service. It also specifies the workspace folder within the container, <code>/opt/web2py/applications/OZtree</code>, and forwards port 8000 from the container to the host. It also specifies some VS Code extensions to install when using the dev container.</p> <p>The <code>docker-compose.yml</code> file defines two services, <code>dev</code> and <code>web</code>.</p> <p>The <code>dev</code> service is used for development work. It uses the <code>dev.Dockerfile</code> to build its image. The <code>dev</code> service mounts the project source code into the container at <code>/opt/web2py/applications/OZtree</code> using a bind mount, so changes in the host directory will be reflected in the container. It also mounts the <code>original-repo</code> volume at <code>/opt/web2py/applications/OZtree_original</code> in read only mode. Finally, it is set to use the network configuration of the <code>web</code> service. This allows the <code>dev</code> container to access the <code>web</code> container via <code>localhost</code> on port 80. The <code>command</code> setting keeps the container alive and running so that you can attach a terminal to it.</p> <p>The <code>web</code> service uses the <code>web.Dockerfile</code> to build its image. It uses an <code>IMAGE_NAME</code> build argument. It also mounts the project source code into the container at <code>/opt/web2py/applications/OZtree</code> using a bind mount. It also mounts the <code>original-repo</code> volume at <code>/opt/web2py/applications/OZtree_original</code> in read/write mode. This directory contains the original unmodified version of the project source code. It maps port 8080 on the host to port 80 on the container, and port 3307 on the host to port 3306 on the container, which is expected to host MySQL.</p> <p>The <code>dev.Dockerfile</code> is used to create the image for the <code>dev</code> service. It is based on a standard Node.js 18 development container image from Microsoft. It clones the web2py framework into <code>/opt/web2py</code>. It also modifies the environment to be compatible with the web2py framework.</p> <p>The <code>web.Dockerfile</code> is used to create the image for the <code>web</code> service. It is based on an image passed in as an argument, allowing the user to customize it. It modifies the <code>www-data</code> user's id to be 1000 which matches the user on the host to avoid permission issues when the webserver changes ownership of files to <code>www-data</code>. It also moves the original source code to a directory named <code>OZtree_original</code>. This directory is then mounted as a volume to be shared between containers.</p>"},{"location":"OZprivate/","title":"OZprivate","text":"<p>The <code>OZtree/OZprivate</code> directory is a private directory within the OZtree repository. It contains data, scripts, and code related to the OneZoom project that are not intended for public distribution. This directory is organized into several subdirectories, each with a specific purpose:</p> <ul> <li><code>data</code>: This directory stores various data files used by the OZtree project, including phylogenetic tree data in the <code>TreeArchive</code> subdirectory. The main files in the <code>TreeArchive</code> subdirectory are the <code>.gitignore</code> file, which prevents compressed files from being added to version control, and the phylogenetic tree file, OZlife_oldformat_selected2016-05-09+1245.nwk, which represents a broad sampling of life, including many different animal groups.</li> <li><code>ServerScripts</code>: This directory contains server-side scripts used for data analysis, database management, and tree manipulation. The scripts are primarily written in Python, R, and SQL. The scripts are further organized into subdirectories:<ul> <li><code>Analysis</code>: This directory contains scripts for analyzing the OneZoom tree data. The R scripts, <code>analysis.r</code> and <code>analysis_check.r</code>, calculate a \"popularity\" metric for species. The Python scripts, such as <code>find_duplicated_nodes.py</code> and <code>polytomy_analysis.py</code>, analyze the structure and completeness of the tree.</li> <li><code>Utilities</code>: This directory contains utility scripts for various tasks, including fetching data from external APIs (e.g., IUCN and EOL), assigning representative images to nodes, and manipulating tree data. The most important script in the directory is <code>picProcess.py</code>, which assigns representative images to nodes in the tree. This directory is also organized into a subdirectory:<ul> <li><code>OneOff</code>: This subdirectory contains scripts that are generally run once to perform a specific data manipulation task. These include <code>number_unnamed_nodes.py</code> for labelling unnamed nodes, and <code>EOLv3.py</code>, which migrates images.</li> </ul> </li> <li><code>Tests</code>: This directory contains scripts for testing different aspects of the OneZoom server. This includes <code>SimpleDBtest.py</code> for testing database connections, and <code>BlatAPI.py</code> for load testing the OneZoom API.</li> <li><code>Popularity</code>: This directory is dedicated to scripts that calculate and analyze the phylogenetic popularity of taxa. The core script is <code>calc_phylogenetic_popularity.py</code>, which calculates popularity metrics based on Wikipedia data.</li> <li><code>SQL</code>: This directory contains SQL scripts for database manipulation. These include scripts for anonymizing data, updating sponsorship durations, and managing database indexes and character sets, such as <code>create_db_indexes.sql</code>.</li> </ul> </li> <li><code>ClientScripts</code>: This directory contains scripts and code snippets that are used to interact with the OneZoom tree visualization, primarily through the browser's JavaScript console. This includes <code>zoom_in_anim.txt</code>, which contains a JavaScript command to zoom into a specific node, and <code>embed_jpgs_in_svg.pl</code> which embeds JPG images into SVG files.</li> <li><code>Legacy offline tools</code>: This directory contains JavaScript files and a README that were used to create an early version of the OneZoom website. The JavaScript files, such as <code>userOptions_river.js</code>, <code>autoGenerator.js</code>, and <code>OZ_script_V1.2.original.js</code> provide a glimpse into the earlier development of OneZoom, with a particular focus on how the core tree rendering, customization, and UI components worked in version 1.2 of the website.</li> <li><code>Graphic design offline</code>: This directory contains a single SVG file, <code>OZ_refactor_flow.svg</code>, which outlines the planned refactor of the OZ application. The diagram shows the relationship between various modules and the flow of control within the application.</li> <li><code>Trees</code>: This directory stores HTML files that render interactive phylogenetic trees using the OneZoom visualization software. These files, such as <code>Salguero_Gomez_et_al_PNAS_2016.htm</code>, are self-contained interactive HTML documents that contain the data and JavaScript code to render the trees within a single file.</li> <li><code>Test</code>: This directory contains various scripts and files used for testing different aspects of the OneZoom codebase. The most important files are <code>testpopularity.py</code>, which is used to test the calculations of popularity metrics, and <code>crop-expansion-test.html</code>, which tests how images can be cropped using CSS. This directory also contains several tests of how the OneZoom project handles unicode characters and large files.</li> <li><code>scss</code>: This directory contains the Sass files used to style the OZtree project. It is structured to provide a maintainable and modular approach to styling the project's UI, primarily using a customized version of the Bootstrap CSS framework. The directory is organized into the following subdirectories:<ul> <li><code>Boot-Sass</code>: This directory contains the core Sass files for styling the OZtree project using a modified version of the Bootstrap CSS framework, including <code>_bootstrap.scss</code>.</li> <li><code>Boot-Sass/oz_partials</code>: This directory contains a collection of Sass partials that define the styles for the OZtree project's implementation of the Bootstrap CSS framework. These include files such as <code>_normalize.scss</code> and <code>_dropdowns.scss</code> (https://github.com/wolfmanstout/OZtree/blob/main/OZprivate/scss/Boot-Sass/oz_partials/_dropdowns.scss).<ul> <li><code>Boot-Sass/oz_partials/mixins</code>: This directory contains Sass mixins that generate reusable CSS styles. The root directory contains files that are entry points for several styling areas, such as <code>OZ_bootstrap.scss</code>, <code>tree.scss</code>, <code>content.scss</code>, and also many files that define aspects of the styling, such as <code>tree-dark.scss</code>, and <code>search_ui.scss</code>.</li> </ul> </li> </ul> </li> <li><code>rawJS</code>: This directory contains the JavaScript code for the OneZoom interactive tree of life explorer. The directory is further organized into the following subdirectories:<ul> <li><code>OZLegacy</code>: This directory contains an older codebase for the OneZoom interactive tree visualization. It is organized into subdirectories for scripts, css and user-specific files.<ul> <li><code>OZLegacy/scripts</code>: This directory contains the core JavaScript files for the older version of the interactive tree. This includes <code>index.js</code>, and  <code>OZ_script_V1.2.original.js</code>.</li> <li><code>OZLegacy/css</code>: This directory contains the CSS files for the older version of the interactive tree. This includes <code>indexstyle.css</code> and <code>embedded.css</code>.</li> <li><code>OZLegacy/user</code>: This directory contains data and configuration files for the older version of the OneZoom explorer. This includes files like <code>plants_min.js</code> and <code>userOptions_river.js</code>.</li> </ul> </li> <li><code>OZTreeModule</code>: This directory contains the newer, more modular codebase for the OneZoom interactive tree. This includes the core logic for rendering and interacting with the tree, as well as documentation and tests. This directory contains three key subdirectories:<ul> <li><code>OZTreeModule/src</code>: This directory contains the core logic for the OZTree module, and is itself organized into subdirectories for different aspects of the tree rendering, such as <code>data</code>, <code>api</code>, <code>tour</code>, <code>util</code>, <code>interactor</code>, <code>navigation</code>, <code>factory</code>, <code>render</code>, <code>ui</code>, <code>themes</code>, <code>projection</code>, <code>libs</code>, and <code>controller</code>. The entry point for the module is <code>OZentry.js</code>, which initializes the application.</li> <li><code>OZTreeModule/src/data</code>: This directory contains data files used by the OZTree module, such as column header definitions in <code>col_headers.js</code>.</li> <li><code>OZTreeModule/src/api</code>: This directory contains code for interacting with the OneZoom API, including <code>api_manager.js</code> for managing requests, and <code>node_details.js</code> for fetching details about nodes.</li> <li><code>OZTreeModule/src/tour</code>: This directory contains the core logic for creating and managing interactive tours. The most important files are <code>Tour.js</code>, which manages tours, and <code>TourStop.js</code>. The <code>OZTreeModule/src/tour/handler</code> subdirectory contains files that add functionality to tour stops.</li> <li><code>OZTreeModule/src/util</code>: This directory contains utility functions and classes, such as <code>object_pool.js</code> and <code>draw.js</code>.</li> <li><code>OZTreeModule/src/interactor</code>: This directory contains the code for user input handling, with <code>touch.js</code> and <code>mouse.js</code> handling touch and mouse events, respectively.</li> <li><code>OZTreeModule/src/navigation</code>: This directory contains the core logic for managing the state of the OneZoom tree viewer. The most important files are <code>state.js</code>, which parses and generates URL strings based on the current state, and <code>setup_page.js</code>, which updates the tree based on the current state.</li> <li><code>OZTreeModule/src/factory</code>: This directory contains the core logic for creating and managing the tree structure. The <code>data_repo.js</code> file is the central repository for all tree data, and the <code>factory.js</code> file is responsible for building the tree.</li> <li><code>OZTreeModule/src/render</code>: This directory contains the core rendering logic, with <code>renderer.js</code> managing the canvas and orchestrating the rendering process.</li> <li><code>OZTreeModule/src/ui</code>: This directory contains code for user interface elements, such as the search functionality in <code>search.js</code> and <code>search_manager.js</code>, and the leaf drawing functionality in <code>leaf_draw.js</code>.</li> <li><code>OZTreeModule/src/themes</code>: This directory contains files defining the color themes used by the module, such as <code>otop_theme.js</code> and <code>IUCN_explicit_theme.js</code>.</li> <li><code>OZTreeModule/src/projection</code>: This directory contains the core logic for projecting and rendering the OneZoom tree, and is further divided into subdirectories <code>horizon_calc</code>, <code>highlight</code>, <code>shapes</code>, <code>layout</code>, and <code>pre_calc</code>. The <code>projection.js</code> file is the entry point for this directory.<ul> <li><code>OZTreeModule/src/projection/layout</code>: This subdirectory contains the core logic for laying out different tree projections.  It includes subdirectories for different layouts: <code>AT</code>, <code>otop</code>, <code>polytomy</code>, <code>polytomy2</code>, and <code>life</code>.</li> </ul> </li> <li><code>OZTreeModule/src/libs</code>: This directory contains external libraries, such as jQuery and a <code>requestAnimationFrame</code> polyfill.</li> <li><code>OZTreeModule/src/controller</code>: This directory contains the core logic for the OneZoom tree viewer, with <code>controller.js</code> acting as the main file.</li> <li><code>OZTreeModule/docs</code>: This directory contains the documentation for the OZTree module, including an <code>index.markdown</code> that provides the entry point for all the documentation, as well as a set of guidelines.</li> <li><code>OZTreeModule/tests</code>: This directory contains tests for the OZTree module. This includes a set of utility files and tests for specific features of the module.</li> </ul> </li> </ul> </li> </ul> <p>In summary, the <code>OZtree/OZprivate</code> directory is a private area of the repository that contains data, scripts and code that are used to build the OneZoom tree. It is a complex directory that has been developed over time, and is organized into subdirectories that are responsible for specific aspects of the system. The data directory holds the data, the server scripts directory holds server-side scripts, the client scripts directory has code for client manipulation, the legacy directory has older code, the graphic design directory holds diagrams of the system, the trees directory holds html versions of the trees, the test directory holds tests, the scss directory has styling for the project and the rawJS directory contains all of the JavaScript for the project. The <code>rawJS</code> directory in particular has an <code>OZLegacy</code> subdirectory with an older version of the code, and an <code>OZTreeModule</code> subdirectory with the current code.</p>"},{"location":"OZprivate/ClientScripts/","title":"ClientScripts","text":"<p>The <code>OZtree/OZprivate/ClientScripts</code> directory contains scripts and code snippets that are used to manipulate or interact with the OneZoom tree visualization, primarily through the browser's JavaScript console.</p> <p>The file <code>zoom_in_anim.txt</code> contains a JavaScript command that can be pasted into the browser's console to trigger a zoom animation on the OneZoom tree. The command <code>onezoom.controller.fly_on_tree_to(1,-887526,false,0.25)</code> is designed to zoom into the node representing humans, using the node's ID (-887526). The last argument controls the animation speed, making it 1/4 of the default speed. The user can alter the node ID to zoom to any other node on the tree.</p> <p>The script <code>embed_jpgs_in_svg.pl</code> is a Perl script intended to be run on the command line. It processes an SVG file, replacing external JPG image references with inline base64 encoded image data. The script reads the SVG input, line by line, using the <code>&lt;&gt;</code> file handle.  It finds instances of <code>xlink:href</code> attributes that link to JPG images using a regular expression.  It uses the <code>LWP::Simple</code> and <code>MIME::Base64</code> modules to fetch the image and encode it into base64. This script is useful for creating self-contained SVG files that do not rely on external image files.</p>"},{"location":"OZprivate/Graphic%20design%20offline/","title":"Graphic design offline","text":"<p>The <code>OZtree/OZprivate/Graphic design offline</code> directory contains a single file, OZ_refactor_flow.svg. This file is an SVG diagram outlining the planned refactor of the OZ application. </p> <p>The diagram illustrates the relationship between various modules and the flow of control within the application. It includes boxes for the following modules:</p> <ul> <li>Render shape - Responsible for rendering shapes on the canvas.</li> <li>Projection Leaf layout - Handles the layout of leaf nodes in the tree.</li> <li>Projection Node layout - Handles the layout of regular nodes in the tree.</li> <li>Projection Signpost layout - Handles the layout of signpost nodes in the tree.</li> <li>Factory - Creates dynamic loading, creation, and destruction of nodes, including options for polytomies and monotomies.</li> <li>Main Controller - Manages the overall application flow including flight, jump, and screensaver. It gets the position of the view etc.</li> <li>Interactor - Handles mouse, touch, and keyboard inputs for pan and zoom.</li> <li>DOM wrapper - Wraps the application in a DOM element, including popups.</li> <li>Tree draw control - Controls the drawing of the tree, it's located in <code>renderer.js</code>.</li> <li>Canvas - The HTML5 canvas element on which the tree is rendered.</li> <li>Register - Register buttons and restrict their movement.</li> <li>Image Cache - Manages cached images.</li> <li>API controller - Manages API requests, including search.</li> <li>JSON of English on tree - Holds the English text of the tree. This is needed, but not yet done.</li> <li>Themes - Manages CSS style colors.</li> <li>Sound player - Manages sound playback, expected but not done yet.</li> <li>Wrapper CSS - Manages the CSS for the wrapper.</li> <li>JSON end user pref. - Stores the end user's preferences in JSON.</li> <li>Tree markups - stores points of interest and layers. This is expected, but not yet done.</li> <li>Projection - Precalculates and calculates projections.</li> <li>Tree state.js - Manages the data structure of the tree state, giving the view, but not the anchor node.</li> </ul> <p>The diagram depicts the data flow with arrows going from Inputs into the modules and from the modules to Outputs. The Inputs are: 1.  tree 2.  metadata 3.  mouse/touch info 4.  view pos The Outputs are: 1.  Button action 2. Canvas</p> <p>This SVG file provides a high-level overview of the planned architecture.</p>"},{"location":"OZprivate/Legacy%20offline%20tools/","title":"Legacy offline tools","text":"<p>The <code>OZtree/OZprivate/Legacy offline tools</code> directory contains JavaScript files and a README that were used to create an early version of the OneZoom website. These files are not used in the current version of OneZoom, but are kept for historical reference. </p> <p>The primary function of these files is to define settings and parameters used to render OneZoom trees.  Most of the JavaScript files contain a <code>UserOptions</code> object which sets many variables that can affect the display and behavior of a OneZoom tree.  These settings include:</p> <ul> <li><code>polytype</code>, <code>viewtype</code>, <code>colourtype</code>: These settings control the overall visual style of the tree, including how polytomies are displayed, the layout of the tree, and the color scheme used.</li> <li><code>commonlabels</code>, <code>drawsignposts</code>, <code>leaftype</code>, <code>int_highlight_type</code>, <code>fonttype</code>: These settings control various display options, such as whether to show common names, draw signposts, the shape of the leaves, and the font type used.</li> <li>Various sensitivity settings, thresholds, and animation variables: These settings control the zoom, animation, and detail display of the tree.</li> <li>Color definitions for various parts of the tree such as leaves, branches, and text.</li> </ul> <p>The JavaScript files also define a <code>PartnerProfiles</code> array and a <code>linkSet</code> object, which are used to define external links that can be displayed on the tree. <code>PartnerProfiles</code> contains information about partner organizations, such as their URLs, logos, and link priorities.  The <code>linkSet</code> object defines the conditions under which links should be displayed, their names, and their locations.</p> <p>Here is a summary of the most interesting files:</p> <ul> <li> <p><code>userOptions_river.js</code>, <code>userOptions_plants_tank.js</code>, <code>ADEPD_birds_nunes_etal_2015_userOptions.js</code>, <code>userOptions_plants.js</code>, <code>Euphorbia_2014_userOptions.js</code>, <code>userOptions.js</code>, and <code>EDGE_userOptions2.js</code>: Each of these files contains a <code>UserOptions</code> object that sets up a particular configuration for a OneZoom tree. They demonstrate how the various options can be used to customize the tree for different purposes. Some of the files, such as <code>userOptions_plants_tank.js</code> and <code>ADEPD_birds_nunes_etal_2015_userOptions.js</code>, also include specific configurations for tree coloring and metadata display based on trait data, like conservation status or woodiness. They also demonstrate the use of custom text and links. The different <code>colourtype</code> settings highlight how to control branch color with age or with trait data. For example, color type <code>3</code> uses redlist conservation status to color branches in <code>userOptions_river.js</code> and color type <code>4</code> uses plant woodiness in <code>userOptions_plants_tank.js</code>. In the <code>ADEPD_birds_nunes_etal_2015_userOptions.js</code> the color is changed based on whether a node contains EDGE data.</p> </li> <li> <p><code>autoGenerator.js</code>: This file contains code for dynamically generating a user interface that allows for adjusting various tree options.  It uses a selection array to create a form from which a URL can be built based on user choices.</p> </li> <li> <p><code>OZ_script_V1.2.original.js</code>: This is a large, unminified file that contains the core logic for parsing tree data, rendering the tree, and handling user interactions. It contains code for parsing Newick tree strings, color settings, text drawing routines, search functionalities, animation, and event handling. It is an earlier version of the main script that is currently in the public repository and provides insight into how the current system works.</p> </li> <li> <p><code>README.markdown</code>: This file provides a brief description of the purpose of the directory, stating that it contains \"random files that I used to keep related to the original website - e.g. unminified js related to version 1.2\".</p> </li> </ul> <p>In summary, this directory contains a collection of files that provide a glimpse into the earlier development of OneZoom, with a particular focus on how the core tree rendering, customization, and UI components worked in version 1.2 of the website. The various <code>userOptions</code> files provide many examples of how the tree options can be changed for different projects and are a good place to learn how the OneZoom system works. The <code>autoGenerator.js</code> highlights how a UI can be dynamically generated. The core system can be examined in detail using <code>OZ_script_V1.2.original.js</code>.</p>"},{"location":"OZprivate/ServerScripts/","title":"ServerScripts","text":"<p>The <code>OZtree/OZprivate/ServerScripts</code> directory serves as a central location for server-side scripts used in the OZtree project. These scripts are primarily written in Python, R, and SQL, and they handle various tasks such as data analysis, database management, image processing, API interactions, and tree manipulation. The directory is organized into subdirectories, each focusing on a specific aspect of the project.</p> <ul> <li> <p>The <code>Analysis</code> subdirectory contains scripts for analyzing the OneZoom tree data. R scripts like <code>analysis.r</code> and <code>analysis_check.r</code> calculate and visualize a \"popularity\" metric for species. Python scripts like <code>find_duplicated_nodes.py</code>, <code>polytomy_analysis.py</code>, and <code>count_unlabelled.py</code> analyze the structure and completeness of the tree.</p> </li> <li> <p>The <code>Utilities</code> subdirectory holds a diverse set of utility scripts.  The most important of these is <code>picProcess.py</code>, which assigns representative images to nodes in the tree. Other key scripts include <code>IUCNquery.py</code> (fetches IUCN conservation statuses), <code>add_bespoke_images.py</code> (adds custom images), and <code>EoLQueryPicsNames.py</code> (fetches images and names from EOL). These scripts are essential for data management, image processing, and overall functionality of the OZtree project.  Several scripts like <code>print_leaf_OTTs.py</code>, <code>pruneOpenTree.py</code>, <code>ChoppingAlgorithm.py</code>, <code>print_taxa.py</code>, <code>Dotfile_creator.py</code>, and <code>setOZnames_from_csv.py</code> handle various aspects of tree and metadata manipulation. There are also several scripts that interact with the EOL API, including <code>getBestEOLdoID.py</code> and <code>getEOL_crops.py</code>. Scripts such as <code>partial_install.py</code> and <code>set_image_info.py</code> focus on configuration and image metadata.</p> <ul> <li>Within <code>Utilities</code>, the <code>OneOff</code> subdirectory contains scripts that are generally run only once to perform a specific data manipulation task. Key scripts include <code>number_unnamed_nodes.py</code> (labels unnamed nodes), <code>EOLv3.py</code> (migrates EOL images), <code>add_genus_names.py</code> (adds genus names to nodes), and <code>make_usernames.py</code> (generates usernames). The <code>OneOff</code> directory also contains data conversion scripts such as <code>MakeListForATWebsite.pl</code>, as well as API interaction scripts such as <code>FillStars.py</code> for adding ratings from the EOL API. Some <code>OneOff</code> scripts like <code>add_ranks.sql</code> are SQL scripts designed to be run directly against the database. The script <code>html_unescape_vernaculars.py</code> unescapes HTML characters in names.</li> </ul> </li> <li> <p>The <code>Tests</code> subdirectory contains scripts used for testing. <code>SimpleDBtest.py</code> tests database connections, while <code>BlatAPI.py</code> is used for load testing the OneZoom API.</p> </li> <li> <p>The <code>Popularity</code> subdirectory is dedicated to calculating and analyzing the phylogenetic popularity of taxa. The core script <code>calc_phylogenetic_popularity.py</code> calculates popularity metrics based on Wikipedia data and a phylogenetic tree. The script is described in <code>Popularity description.txt</code>, which explains the methodology used.</p> </li> <li> <p>The <code>SQL</code> subdirectory contains SQL scripts for database manipulation. These include <code>remove_personal_data_from_reservations_table.txt</code> for anonymizing data, <code>extend all sponsorship durations to 5 years.txt</code> for updating sponsorship durations, and <code>create_db_indexes.sql</code> for managing database indexes and character sets.</p> </li> </ul> <p>Overall, the <code>OZtree/OZprivate/ServerScripts</code> directory and its subdirectories provide a comprehensive set of tools and scripts for managing the OZtree project's data, processing trees, and ensuring the functionality of the OneZoom application. The scripts in each subdirectory serve a different purpose, and they often work together to achieve the desired outcomes.</p>"},{"location":"OZprivate/ServerScripts/Analysis/","title":"Analysis","text":"<p>The <code>OZtree/OZprivate/ServerScripts/Analysis</code> directory contains scripts for analyzing the OneZoom tree data, primarily using R and Python.</p> <p>The R scripts, <code>analysis.r</code> and <code>analysis_check.r</code>, perform similar tasks: calculating and visualizing a \"popularity\" metric for species in the tree. </p> <ul> <li><code>analysis.r</code> calculates the metric based on ancestor and descendant populations, then plots the empirical cumulative distribution function (ECDF) of these values. It highlights the positions of specified test species on the plot, and calculates quantiles of the metric. Finally, it writes the species ID and calculated metric to a CSV file, which is then loaded into a MySQL table to update the <code>popularity</code> field.</li> <li><code>analysis_check.r</code> reads the calculated popularity from a database export, then plots the ECDF of the popularity values. Similar to <code>analysis.r</code>, it highlights the positions of specified test species on the plot, and calculates quantiles of the metric. </li> </ul> <p>The Python scripts in this directory analyze the structure of the tree.</p> <ul> <li><code>find_duplicated_nodes.py</code> identifies nodes within the tree that have duplicate labels. It is used to ensure node labels are unique, as duplicates can cause issues in downstream analysis.</li> <li><code>polytomy_analysis.py</code> analyzes the polytomies (nodes with more than two children) in the tree.  It calculates the size of each polytomy (number of children) and the number of leaves descending from each node, also identifying the type of the clade (e.g., plant, animal, fungus).  The output is designed to be visualized, allowing for the exploration of the relationship between polytomy size and the number of descendant species.</li> <li><code>count_unlabelled.py</code> counts the number of unlabeled internal nodes and leaf nodes. This is useful for checking the completeness of the tree's labels.</li> </ul>"},{"location":"OZprivate/ServerScripts/Popularity/","title":"Popularity","text":"<p>The <code>OZtree/OZprivate/ServerScripts/Popularity</code> directory contains scripts and documentation related to calculating and analyzing the \"phylogenetic popularity\" of biological taxa. This concept, as described in <code>Popularity description.txt</code>, aims to quantify how well-known a taxon is, based on its Wikipedia page size and recent page views, and then propagate this popularity up and down the Open Tree of Life.</p> <p>The core script in this directory is <code>calc_phylogenetic_popularity.py</code>. This script takes a CSV file containing popularity data (likely generated from mapping Open Tree Taxon IDs to Wikipedia pages, as described in <code>Popularity description.txt</code>) and a phylogenetic tree as input. It then calculates a phylogenetic popularity measure and outputs either a newick-formatted tree with branch lengths representing popularity or a sorted list of leaf nodes and their associated popularity values.</p> <p>Here's a breakdown of how it works:</p> <ul> <li>Input Data:<ul> <li>It requires a CSV file as input, containing at least <code>OTT_ID</code>, <code>PageSize</code>, and one or more <code>pagecounts</code> columns.  It also can use a <code>PopBase</code> column if already calculated popularities are available.  </li> <li>It uses an input tree in Newick format, which represents the phylogenetic relationships between taxa.</li> </ul> </li> <li>Calculating Popularity:<ul> <li>The script reads the CSV file and creates a data structure (<code>OTT_ptrs</code>) to store the data, including page sizes and views for different taxa. It uses a helper function <code>calc_popularities_for_wikitaxa</code> (imported from <code>OTT_popularity_mapping.py</code>, not included in this directory) to actually calculate the popularity based on the page sizes and page views from the wikipedia data.</li> <li>The script calculates phylogenetic popularity using various algorithms selected with the <code>--pop_measure</code> argument. The options include simply the raw popularity, the sum of ancestor popularities, the sum of descendant popularities, and the sum of ancestor and descendant popularities.</li> </ul> </li> <li>Output:<ul> <li>It can output a modified phylogenetic tree where branch lengths represent the calculated popularity.</li> <li>Alternatively, with the <code>--print_leaves_from_bespoke_tree</code> option, it can output a list of leaf nodes from a specified tree, along with their popularity values, sorted in descending order of popularity. This mode is useful for examining the most popular taxa within a given phylogenetic context.</li> </ul> </li> <li>Excluding Taxa:<ul> <li>The script has an <code>--exclude</code> option, which allows specific taxa to be excluded when calculating the phylogenetic popularities. This is useful for avoiding situations where higher-level taxa such as Archosauria affect the popularity of their descendants (such as birds).</li> </ul> </li> </ul> <p>The <code>Popularity description.txt</code> file provides crucial background context:</p> <ul> <li>It explains the motivation behind calculating phylogenetic popularity, addressing challenges related to overlapping taxonomic levels and the need to account for the hierarchical nature of biological classification.</li> <li>It details the data sources, specifically the English Wikipedia and Wikidata, and how Open Tree Taxon IDs are mapped to Wikipedia pages.</li> <li>It also explains how the initial popularity is calculated from page size and visit counts.</li> <li>It highlights issues and limitations, such as the lack of taxonomic thinking in human perception, and missing data for taxa absent in the Wikidata database. It also mentions that a substantial percentage of the Open Tree of Life can be mapped to Wikipedia entries.</li> </ul> <p>In summary, this directory provides a pipeline to estimate how well-known a given taxon is, and uses phylogenetic relationships to create a more robust popularity measure for all taxa. The scripts in this directory can be used to generate a phylogenetic tree of life where branch lengths represent popularity, or to provide lists of popular taxa from a given phylogenetic perspective.</p>"},{"location":"OZprivate/ServerScripts/SQL/","title":"SQL","text":"<p>The <code>OZtree/OZprivate/ServerScripts/SQL</code> directory contains SQL scripts for database manipulation. These scripts are used for various tasks, including data anonymization, updating sponsorship durations, and creating database indexes.</p> <ul> <li> <p><code>remove_personal_data_from_reservations_table.txt</code> is an SQL script that anonymizes the <code>reservations</code> table by removing personal data. This script is used for creating local testing databases without exposing user information. It preserves donor names when <code>donor_show</code> is set to 1, and also keeps public sponsorship information. It also removes rows that do not have a <code>live_time</code>.</p> </li> <li> <p><code>extend all sponsorship durations to 5 years.txt</code> is an SQL script that updates the <code>sponsorship_duration_days</code> column in the <code>reservations</code> table to 1827 days (approximately 5 years) for records where the <code>sponsorship_duration_days</code> is not null and greater than or equal to 1000 and the <code>live_time</code> is not null.</p> </li> <li> <p><code>create_db_indexes.sql</code> is a comprehensive SQL script for creating and managing database indexes, and ensuring proper unicode character sets are configured. It also defines a stored procedure named <code>MakeFullUnicode</code> that handles character set conversion to <code>utf8mb4</code> which supports full unicode. The script then calls this procedure on several tables. The script also drops and recreates indexes on various tables like <code>news</code>, <code>banned</code>, <code>iucn</code>, <code>images_by_ott</code>, <code>images_by_name</code>, <code>vernacular_by_ott</code>, <code>vernacular_by_name</code>, <code>eol_updated</code>, <code>visit_count</code>, <code>PoWO</code>, <code>partners</code>, <code>API_users</code>, <code>API_use</code>, <code>tree_startpoints</code>, <code>ordered_leaves</code>, <code>ordered_nodes</code> and <code>reservations</code>. It creates various types of indexes, including HASH indexes for faster lookups, and fulltext indexes for searching text columns. These indexes dramatically improve query performance on frequently accessed data.</p> </li> </ul>"},{"location":"OZprivate/ServerScripts/Tests/","title":"Tests","text":"<p>The <code>OZtree/OZprivate/ServerScripts/Tests</code> directory contains Python scripts used for testing different aspects of the OneZoom server.</p> <ul> <li> <p><code>SimpleDBtest.py</code> is a script that tests database connections. It can connect to either a MySQL or SQLite database and execute a simple query. The script takes the database connection string as a command line argument. It is used to verify the database connection and make sure that data can be retrieved. It expects a table called <code>banned</code> to exist in the database.</p> </li> <li> <p><code>BlatAPI.py</code> is a script for load testing the OneZoom API. It sends requests to the API to retrieve node and leaf details and measures the response time. The script takes arguments to set the target server, the API endpoint(s) to test, the number of requests to send, and the number of node and leaf IDs to request in each batch. It outputs the average and standard deviation of request times. It also reports on any non-200 response codes that were encountered.</p> </li> </ul>"},{"location":"OZprivate/ServerScripts/Utilities/","title":"Utilities","text":"<p>The <code>OZtree/OZprivate/ServerScripts/Utilities</code> directory contains various utility scripts for the OZtree project. These scripts perform tasks such as data processing, database updates, and API interactions. They are used to maintain and enhance the functionality of the OZtree application.</p> <p>The <code>OneOff</code> subdirectory contains a collection of scripts that are generally run once to accomplish a specific task. Here's a summary of the most important scripts:</p> <ul> <li><code>number_unnamed_nodes.py</code>: This script assigns unique labels to unnamed nodes in a phylogenetic tree, which is essential for downstream data processing.</li> <li><code>EOLv3.py</code>: A complex script for migrating images and database references from an older EOL system to a new one. It handles various image sources and updates database tables accordingly.</li> <li><code>add_genus_names.py</code>: This script adds genus names as labels to internal nodes of a phylogenetic tree, ensuring the tree accurately reflects taxonomic classifications.</li> <li><code>make_usernames.py</code>: Generates usernames automatically for users within the system based on reservation data. It is designed to be run multiple times to catch allocations made as a result of previous runs.</li> <li><code>add_ranks.sql</code>: Adds popularity ranks to the <code>ordered_leaves</code> table based on popularity values, used to order and prioritize results.</li> <li><code>MakeListForATWebsite.pl</code>: Extracts image data from a JavaScript file and formats it for use on another website.</li> <li><code>FillStars.py</code>: Fetches and updates star ratings for images hosted on EOL using the EOL API, which is useful for supplementing data not available directly from the database.</li> <li><code>html_unescape_vernaculars.py</code>: This script corrects HTML-escaped characters in vernacular names stored in the database, ensuring that vernacular names are displayed correctly in the application.</li> </ul> <p>The other files in this directory are:</p> <ul> <li><code>picProcess.py</code>: This is a central script that handles the assignment of representative images to every internal node of the tree. It reads image ratings and other data from the database, applies various penalties and bonuses to these ratings, and then \"ripples\" the best images up the tree, ensuring that each node has a set of representative images.  It uses a complex algorithm that considers image quality, source, and clade richness, and it saves the OTT IDs of the selected images to the database.</li> <li><code>print_leaf_OTTs.py</code>: A script to print the leaves of a tree.  It can output either the full names or just the OTT identifiers of the leaves, and it's able to report duplicates.</li> <li><code>IUCNquery.py</code>: Queries the IUCN Red List API to fetch conservation status data for species. It saves this information to the <code>iucn</code> table in the database, and it also \"percolates\" these statuses up the tree so that each node contains a summary of the conservation risk of its descendants. This is crucial for displaying conservation information in the OneZoom application.</li> <li><code>get_release_name.py</code>: This script fetches the release name and publication date of a tagged version from the GitHub API. It uses the tag name provided in the input file.</li> <li><code>add_bespoke_images.py</code>: Allows users to add \"bespoke\" (custom) images to the OneZoom site. It reads image metadata from the image files and IPTC tags, uses the Open Tree TNRS to find OTT IDs for taxa, and saves the images and their metadata to the database. It also modifies the appconfig file to ensure that local images are used and re-runs <code>picProcess.py</code> to update the representative image data in the database.</li> <li><code>EoLQueryPicsNames.py</code>: This script interacts with the EOL API to fetch images and vernacular names for taxa.  It finds the least recently updated records in a database table, and gradually queries EOL for new image information and common names.  It has options for downloading both verified and unverified images, and it saves these to the database.</li> <li><code>pruneOpenTree.py</code>: Prunes a large Open Tree of Life tree to keep only the specified Open Tree identifiers. This script can significantly reduce the size of the tree file by removing unwanted portions.</li> <li><code>ChoppingAlgorithm.py</code>: This Python script implements an algorithm for \"chopping\" a large phylogenetic tree into smaller chunks based on the number of tips (leaves) in each subtree. It uses a scoring system to prioritize nodes for cutting. This is used to break up the tree into smaller sections for more efficient processing and rendering, e.g. for use in web applications.  It outputs a tab separated file indicating the chunks that each node is a part of.  It also outputs some debugging data.</li> <li><code>getBestEOLdoID.py</code>: Takes a list of EOL page numbers from a CSV file, queries the EOL API for the best public domain (or similarly licensed) picture ID and corresponding common name, and writes this information to an output file.</li> <li><code>partial_install.py</code>: Modifies HTML files for partial installs (where a OneZoom page is used without a web server) by changing absolute local links to relative paths and replacing strings. It also inlines the JavaScript modules into the HTML file.</li> <li><code>print_taxa.py</code>: A command-line utility that prints taxa names from a tree file.  It can output the names of all nodes (both internal and leaf), just the leaf nodes, or just the internal nodes, and performs some simple string manipulations to remove the automatically generated OTT IDs.</li> <li><code>getBestEOLdoID.pl</code>: A Perl version of the <code>getBestEOLdoID.py</code> script which takes a CSV file containing EOL page IDs, fetches data from the EOL API, and outputs the best EOL data object IDs and corresponding common names.</li> <li><code>Dotfile_creator.py</code>: Creates a .dot file from the <code>ordered_leaves</code> and <code>ordered_nodes</code> database tables. This .dot file can be used to visualize the tree structure. It also creates .nodes files of metadata about internal nodes (if they are 'real' or 'fake' injected to break polytomies, and the number of tips under each), ages, names, database IDs and IUCN endangerment status for each node.</li> <li><code>getEOL_crops.py</code>: This script downloads, crops, and saves images from the Encyclopedia of Life (EOL) based on data object IDs, which are provided as input, either as a single ID or as a column in a CSV file. It gets crop information from the EOL API and uses <code>mogrify</code> to perform the cropping. This is an older script that can be used to fetch EOL images.</li> <li><code>set_image_info.py</code>: A script that adds IPTC metadata (such as source URLs, licenses and copyright) to image files.  It can process a directory recursively, changing all image files within it.</li> <li><code>Chopping Algorithm.ipynb</code>: This IPython notebook version of <code>ChoppingAlgorithm.py</code>, and demonstrates the chopping algorithm interactively in a notebook environment, showing the output and graphs.</li> <li><code>setOZnames_from_csv.py</code>: This script reads CSV files containing scientific names, OTT IDs, and common names, and it inserts these common names into the <code>vernacular_by_ott</code> and <code>vernacular_by_name</code> tables in the database. It handles cases where either the scientific name or OTT ID is missing but attempts to match on both name and OTT.</li> </ul> <p>These scripts collectively provide a suite of tools for data management, image processing, and tree manipulation within the OZtree project. They are essential for the functionality of the application and are critical for maintaining the accuracy and usability of the OZtree database and website.</p>"},{"location":"OZprivate/ServerScripts/Utilities/OneOff/","title":"OneOff","text":"<p>The <code>OZtree/OZprivate/ServerScripts/Utilities/OneOff</code> directory contains a collection of one-off scripts used for various data manipulation and maintenance tasks within the OZtree project. These scripts are typically run once to accomplish a specific task and are kept for reference.</p> <p>Here's a breakdown of the most significant scripts and their functions:</p> <ul> <li> <p><code>number_unnamed_nodes.py</code>: This script is used to label unnamed nodes within a phylogenetic tree. It iterates through the tree, and if a node lacks a label, it assigns a unique label in the format <code>_&lt;number&gt;</code>. The starting and ending numbers for labeling are configurable via command-line arguments. This is useful for processing trees where internal nodes need unique identifiers for downstream processing.</p> </li> <li> <p><code>EOLv3.py</code>: This is a complex script designed to migrate image storage and database references from an older EOL (Encyclopedia of Life) image system to a new one.  It reorganizes image files into a new directory structure based on source flags defined in <code>_OZglobals.py</code> and updates database tables to reflect these changes. It also handles images from various sources, including those from OneZoom, bespoke images, and older EOL images. It also contains code for copying images and dealing with hardcoded images within the code. This script was intended to be run once and is retained for reference due to its complexity and potential database changes.</p> </li> <li> <p><code>add_genus_names.py</code>: This script adds genus names as labels to internal nodes of a phylogenetic tree. It identifies monophyletic groups of taxa that belong to the same genus and then labels the most recent common ancestor (MRCA) node of each group with the corresponding genus name. It also handles cases where a node may already have a label, or a duplicate label, avoiding conflicts and ensuring that the tree accurately reflects taxonomic classifications.</p> </li> <li> <p><code>make_usernames.py</code>: This script is used to automatically generate usernames for users within the system. It iterates over all reservations (records of users making changes to the tree) and assigns a username based on the species name plus year if the user does not already have one. It is designed to be run multiple times in order to catch situations where usernames are allocated as a result of a previous allocation. It is intended for use in a web2py environment.</p> </li> <li> <p><code>add_ranks.sql</code>: This SQL script is designed to add a <code>popularity_rank</code> to the <code>ordered_leaves</code> table. It calculates a rank based on the <code>popularity</code> of each record, with the highest popularity receiving the lowest rank. This can be useful for ordering or prioritizing results based on how popular a particular species or taxon is.</p> </li> <li> <p><code>MakeListForATWebsite.pl</code>: This Perl script is used to extract data for a specific use case, possibly to populate content on another website. It mines a JavaScript file that contains metadata about leaves in a tree, extracts image IDs, and outputs the image locations, along with code for HTML lists and CSS formatting. This is a one-off conversion tool that re-purposes data already in the codebase.</p> </li> <li> <p><code>FillStars.py</code>: This Python script is designed to fetch and update star ratings for images hosted on EOL. It uses the EOL API to retrieve rating data for a specific data object ID from the EOL website, parses the rating data, and then stores a summary of the results in the database.  It also implements retries in case of API failures. It is used for periodically filling in data not available directly from the database.</p> </li> <li> <p><code>html_unescape_vernaculars.py</code>: This Python script is used to correct HTML-escaped characters in vernacular names stored in the database. It fetches the names, unescapes them using the <code>html.unescape()</code> function, and updates the corresponding database entries. This ensures that vernacular names are displayed correctly in the application.</p> </li> </ul> <p>These scripts are crucial for data maintenance, migration, and occasional fixes, and they are kept in this directory for reference and potential future use.</p>"},{"location":"OZprivate/Test/","title":"Test","text":"<p>The <code>OZtree/OZprivate/Test</code> directory contains a variety of scripts and files used for testing different aspects of the OneZoom codebase, primarily focusing on data processing, image handling, and encoding issues.</p> <p>The <code>testpopularity.py</code> script at <code>testpopularity.py</code> is a crucial test for calculating and integrating popularity metrics into the OneZoom tree. It works by:</p> <ul> <li>Creating a data structure that represents nodes within the Open Tree of Life, using data from a phyloXML file.</li> <li>Adding taxonomic information from the Open Tree Taxonomy.</li> <li>Enhancing this data with identifiers from the Encyclopedia of Life (EOL).</li> <li>Identifying the best EOL data and Wikidata entries for each node.</li> <li>Calculating popularity scores based on Wikipedia page views and sizes.</li> <li>Finally, summing the popularity of ancestor and descendant nodes, to give a final popularity metric for each node.</li> </ul> <p>The script demonstrates a complete workflow of data integration and processing that is essential for OneZoom.</p> <p>The <code>crop-expansion-test.html</code> file at <code>crop-expansion-test.html</code> is designed to test how images can be cropped using CSS, based on crop coordinates provided by the EOL API. It is a detailed test page that uses JavaScript and CSS to: *   Take in EOL's crop coordinates for an image. *   Calculate the CSS <code>background-size</code> and <code>background-position</code> properties to match those crop coordinates. *   Include functionality to expand the crop region by a set percentage (12.5%) when the image's borders allow. This page is crucial for ensuring images are displayed correctly within OneZoom, with or without user-defined crops. It also tests that the javascript code for this cropping can be expanded if the border of the image allows. It has a section of python code in a <code>&lt;pre&gt;</code> tag to demonstrate how this calculation is done in python.</p> <p>The other files in this directory are more focused on individual testing, often of more low-level features. For example, <code>unicode_zlib.pl</code> at <code>unicode_zlib.pl</code> tests how unicode characters are handled when compressing a Newick file; <code>ImageMetadataEncodingTest.pl</code> at <code>ImageMetadataEncodingTest.pl</code> tests how unicode characters are handled within image metadata; and <code>WikiEncodingTest.py</code> at <code>WikiEncodingTest.py</code> tests unicode handling in wikipedia title parsing. <code>ExampleAPIreturn.json</code> at <code>ExampleAPIreturn.json</code> provides an example of a complex JSON that contains the data structure used by the OneZoom API. <code>WikiDataParsingSpeedTest.py</code> at <code>WikiDataParsingSpeedTest.py</code> tests the speed of parsing the wikidata JSON file, and tests using regex to quickly find lines with certain IDs.</p> <p>These files provide a useful insight into the inner workings of the OneZoom code, and are particularly helpful for understanding how the project addresses challenges with unicode characters and large files. The tests for cropping and image display are also important, as they verify core visual components of the project.</p>"},{"location":"OZprivate/Trees/","title":"Trees","text":"<p>The <code>OZtree/OZprivate/Trees</code> directory serves as a container for HTML files that render interactive phylogenetic trees using the OneZoom visualization software. The primary purpose of this directory is to host these tree visualizations for use on the OneZoom website. These visualizations are self-contained interactive HTML documents, each embedding the data and logic necessary for the tree rendering within the single file.</p> <p>Here is a breakdown of the key files and their roles:</p> <ul> <li> <p>Salguero_Gomez_et_al_PNAS_2016.htm and Salguero_Gomez_New_Phytologist_2016.htm: These files are almost identical, each representing a different version of the same phylogenetic tree visualization, likely based on different source data or intended for different publications (as suggested by the filenames referring to publications by Salguero-Gomez et al. in PNAS and New Phytologist). The core part of each of these HTML files is a large block of JavaScript code that:</p> <ul> <li>Defines the <code>midnode</code> class, representing the nodes in a phylogenetic tree, each with properties like its name, conservation status, branch length, and phylogenetic diversity.</li> <li>Contains a function called <code>userdata</code> which defines the phylogenetic tree topology and data in a Newick-like format and constructs a root <code>midnode</code> object (<code>fulltree</code>). This <code>fulltree</code> object encapsulates the entire tree structure and associated species information.</li> <li>Includes drawing functions that interpret the <code>midnode</code> structure to render the tree and its nodes as an interactive visualization using the HTML5 canvas element. </li> <li>Provides user interface functions for zooming, panning, searching, animation, and selection.</li> <li>Includes custom color and trait display logic that allows for nodes, branches, and leaf labels to be dynamically styled.</li> <li>This code makes use of global variables that are set by the html file when the page loads.</li> </ul> <p>The embedded JavaScript code is responsible for parsing the tree data, calculating graphical properties for each node, and drawing the interactive visualization within the browser, so that the resulting tree is available on the OneZoom website for user exploration.</p> </li> <li> <p>README.markdown: This file serves as a general explanation of the purpose of this directory, providing guidelines for storing content for the OneZoom website. It also specifies that URLs in this folder should not include a hyphen to avoid issues with the website's controller, and it indicates that these files should be deployed separately from the main web2py application in a specific server directory.</p> </li> </ul> <p>In summary, this directory acts as a place for self-contained OneZoom tree visualizations. These are more than simple images; they are interactive tools that allow the user to explore the complex relationships of the tree of life through zooming, panning, searching, and animation, as well as explore metadata associated with individual tips of the tree. Each file is a complete package of visualization code and a small custom dataset.</p>"},{"location":"OZprivate/data/","title":"data","text":"<p>The <code>OZtree/OZprivate/data</code> directory acts as a container for data used by the OZtree project. It currently contains a single subdirectory.</p> <p>The TreeArchive subdirectory contains phylogenetic trees, primarily in Newick format.</p> <ul> <li> <p>The file OZlife_oldformat_selected2016-05-09+1245.nwk is a key example of the type of data stored here. It's a phylogenetic tree representing a broad sampling of life, including various animal groups. The Newick format includes branch lengths, which are proportional to the amount of evolutionary change.</p> </li> <li> <p>The file .gitignore ensures that Git ignores files ending in <code>.bz2</code>, which are likely compressed tree archives.</p> </li> </ul> <p>In summary, the <code>TreeArchive</code> directory is a storage space for raw phylogenetic data used by the OZtree project.</p>"},{"location":"OZprivate/data/TreeArchive/","title":"TreeArchive","text":"<p>The <code>OZtree/OZprivate/data/TreeArchive</code> directory serves as a repository for phylogenetic trees, primarily in Newick format. These trees represent evolutionary relationships between different organisms, and are used for downstream analysis and visualization.</p> <p>Here's a breakdown of the contents:</p> <ul> <li> <p><code>OZlife_oldformat_selected2016-05-09+1245.nwk</code>: This file is a phylogenetic tree in Newick format.  It appears to represent a broad sampling of life, including various animal groups like lampreys, coelacanths, lungfish, tetrapods (including birds), and more. The tree includes branch lengths, indicated by the numbers after the colons, which are proportional to the amount of evolutionary change.  This file is a key example of the kind of data that is stored in this archive. The specific date in the filename suggests that it may be a snapshot of a larger analysis.</p> </li> <li> <p><code>.gitignore</code>: This file specifies intentionally untracked files that Git should ignore. In this case, it is configured to ignore files ending in <code>.bz2</code>, which likely represent compressed tree archives that are either generated as part of the analytical process or were too large to commit directly to the repository.</p> </li> </ul> <p>In summary, this directory is a storage space for the raw data of phylogenetic analyses. The Newick files in the directory are used by other parts of the OZtree project and are subject to change based on results, updates and code changes.</p>"},{"location":"OZprivate/rawJS/","title":"rawJS","text":"<p>The <code>OZtree/OZprivate/rawJS</code> directory contains the JavaScript code for the OneZoom interactive tree of life explorer. It has two main subdirectories, <code>OZLegacy</code> and <code>OZTreeModule</code>, representing different generations of the code.</p> <ul> <li> <p><code>OZLegacy</code>: This directory contains the older codebase, which uses a combination of JavaScript, CSS, and data files to create the interactive tree visualization. The code is primarily found in the <code>scripts</code> subdirectory, while <code>css</code> handles the styling and <code>user</code> contains the data and configurations.</p> <ul> <li><code>OZLegacy/scripts</code>: This subdirectory contains the JavaScript files that implement a dynamic, interactive tree visualization. The core logic is found in <code>OZ_script_V1.2.original.js</code>, which includes a large number of functions for parsing data, drawing the tree, and handling user interaction, and in <code>index.js</code>, which sets up the main iframe and handles button clicks for navigation and display. Other important files in the subdirectory include <code>spectrum.js</code> (a customizable color picker) and <code>select_options.js</code> (defines the structure of the interactive options panel). Files such as  <code>plants_taxa_random.js</code>, <code>mammals_taxa_random.js</code>, and others, select a random default tree to display on page load.</li> <li><code>OZLegacy/css</code>: This subdirectory contains the CSS files that style the OZtree application. The most important files are  <code>indexstyle.css</code> which styles the main page and provides its layout, and the various responsive files,  <code>indexstyle_ms.css</code>, <code>indexstyle_l.css</code>, and <code>indexstyle_s.css</code>, which use media queries to adjust layout based on screen size. Other files provide styling for embedded content and a generator tool.</li> <li><code>OZLegacy/user</code>: This subdirectory contains data and configuration files for the OneZoom explorer. <code>plants_min.js</code> contains the raw tree data for plants, and <code>userOptions_river.js</code> sets user interface and display options for the explorer. Older tree data can be found in files like <code>Euphorbia_2014_tree.js</code> and <code>ADEPD_birds_nunes_etal_2015_tree.js</code>.</li> </ul> </li> <li> <p><code>OZTreeModule</code>: This directory contains the newer, more modular codebase, which is organized into several subdirectories. The core logic is in <code>src</code>, the documentation in <code>docs</code>, and tests in <code>tests</code>.</p> <ul> <li><code>OZTreeModule/src</code>: This subdirectory contains the core logic for the OZTree module. The <code>src</code> directory is further organized into subdirectories such as <code>data</code> (column header definitions), <code>api</code> (API interaction code), <code>tour</code> (logic for guided tours), <code>util</code> (utility functions), <code>interactor</code> (user input handling), <code>navigation</code> (URL and browser history), <code>factory</code> (tree structure management), <code>render</code> (drawing to canvas), <code>ui</code> (user interface elements), <code>themes</code> (color schemes), <code>projection</code> (tree layout), <code>libs</code> (external libraries) and <code>controller</code> (core logic for the tree viewer). The main entry point is <code>OZentry.js</code>, which initializes the application. Other important files in this directory include <code>tree_state.js</code>, which maintains the current state of the tree and <code>global_config.js</code> which defines global configuration settings for the module.</li> <li><code>OZTreeModule/src/data</code>: This subdirectory contains data files used by the OZTree module, such as the <code>col_headers.js</code> file.</li> <li><code>OZTreeModule/src/api</code>: This subdirectory contains code that interacts with the OneZoom API. It includes modules for managing API requests, fetching node and image details, and recording user interaction, such as the <code>api_wrapper.js</code>, <code>api_manager.js</code>, <code>node_details.js</code>, <code>image_details.js</code>, and <code>visit_count.js</code> modules.</li> <li><code>OZTreeModule/src/tour</code>: This subdirectory contains the core logic for creating and managing interactive tours. The most important files are <code>Tour.js</code>, which manages tours, <code>TourStop.js</code>, which represents individual tour stops, and <code>Screensaver.js</code> which extends the base tour class to provide a looping automatic tour. The subdirectory <code>OZTreeModule/src/tour/handler</code> contains files that add functionality to tour stops, such as handling media playback (e.g.  <code>Vimeo.js</code>, <code>Youtube.js</code>, and <code>HtmlAV.js</code>), setting querystring options (e.g. <code>QsOpts.js</code>), managing user interface events (e.g. <code>UIEvents.js</code>) and managing progress (e.g. <code>TsProgress.js</code>).</li> <li><code>OZTreeModule/src/util</code>: This subdirectory contains utility functions and classes, including an object pool (<code>object_pool.js</code>), array pool (<code>array_pool.js</code>), text drawing (<code>draw.js</code>), math functions (<code>math.js</code>), string manipulation (<code>string.js</code>), and a hook system (<code>hook.js</code>).</li> <li><code>OZTreeModule/src/interactor</code>: This subdirectory contains the code for user input handling, with <code>touch.js</code> and <code>mouse.js</code> handling touch and mouse events respectively. The <code>interactor.js</code> module manages both of these.</li> <li><code>OZTreeModule/src/navigation</code>: This subdirectory contains the core logic for managing the state of the OneZoom tree viewer by linking the URL with the internal state of the tree. The main files are <code>state.js</code>, which parses and generates URL strings based on the current state, <code>setup_page.js</code>, which updates the tree based on the current state and <code>pinpoint.js</code> which handles conversion of pinpoints (a way of referring to a node in the tree) to internal IDs.</li> <li><code>OZTreeModule/src/factory</code>: This subdirectory contains the core logic for creating and managing the tree structure. Important files are <code>data_repo.js</code>, which is a central repository for all tree data, <code>midnode.js</code>, which is the base class for all nodes, <code>factory.js</code>, which is responsible for building the tree and other files to handle garbage collection and other utility functions.</li> <li><code>OZTreeModule/src/render</code>: This subdirectory contains the core rendering logic for the OZTree module, with <code>renderer.js</code> managing the canvas and orchestrating the rendering process.</li> <li><code>OZTreeModule/src/ui</code>: This subdirectory contains code for the user interface elements, such as the search functionality in <code>search.js</code> and <code>search_manager.js</code>, the tour list in <code>tours_list.js</code>, and leaf drawing functionality in <code>leaf_draw.js</code>.</li> <li><code>OZTreeModule/src/themes</code>: This subdirectory contains files defining the color themes used by the module. It includes a generic <code>color_theme.js</code> and several specific themes, such as <code>otop_theme.js</code>, <code>at_theme.js</code>, <code>IUCN_explicit_theme.js</code>, <code>natural_theme.js</code>, <code>popularity_theme.js</code>, and <code>genetic_conservation_theme.js</code>, as well as color-blind-friendly versions of several themes.</li> <li><code>OZTreeModule/src/projection</code>: This subdirectory contains the core logic for projecting and rendering the OneZoom tree. The main file is <code>projection.js</code>, and the logic is split into subdirectories: <code>horizon_calc</code>, <code>highlight</code>, <code>shapes</code>, <code>layout</code>, and <code>pre_calc</code>. The <code>layout</code> subdirectory has its own subdirectories for different layouts: <code>AT</code>, <code>otop</code>, <code>polytomy</code>, <code>polytomy2</code>, and <code>life</code>.</li> <li><code>OZTreeModule/src/libs</code>: This subdirectory contains external libraries, such as jQuery (<code>jquery.js</code>) and a <code>requestAnimationFrame</code> polyfill (<code>requestAnimationFrame.js</code>).</li> <li><code>OZTreeModule/src/controller</code>: This subdirectory contains the core logic for the OneZoom tree viewer. The main file is <code>controller.js</code>, and the other files in the subdirectory extend the main controller class with methods for specific aspects of the application, such as navigation, animation, search, DOM interaction and highlight.</li> <li><code>OZTreeModule/docs</code>: This subdirectory contains the documentation for the OZTree module. The documentation is written in Markdown, and includes an index file (<code>index.markdown</code>), a set of guidelines (<code>guidelines.markdown</code>), and descriptions of specific modules. The documentation is compiled by the compile_docs.pl script.</li> <li><code>OZTreeModule/tests</code>: This subdirectory contains tests for the OZTree module. This includes a set of utility files such as <code>util_factory.js</code> and <code>util_data_repo.js</code>, and tests for specific features of the module, such as pinpoint resolution (<code>test_navigation_pinpoint.js</code>), tour navigation (<code>test_tour_handler_QsOpts.js</code>), highlight management (<code>test_projection_highlight.js</code>), and viewport calculations (<code>test_tree_state.js</code>).</li> </ul> </li> </ul> <p>In summary, the <code>OZtree/OZprivate/rawJS</code> directory contains the complete JavaScript codebase for the OneZoom interactive tree of life explorer. The <code>OZLegacy</code> subdirectory contains an older version of the code, while the <code>OZTreeModule</code> subdirectory contains a newer, more modular version. The <code>src</code> directory within <code>OZTreeModule</code> is the heart of this codebase, containing a large number of subdirectories which each contribute different aspects of the full application.</p>"},{"location":"OZprivate/rawJS/OZLegacy/","title":"OZLegacy","text":"<p>The <code>OZtree/OZprivate/rawJS/OZLegacy</code> directory contains the core JavaScript, CSS, and data files for the OneZoom interactive tree of life explorer. It is organized into subdirectories: <code>scripts</code>, <code>css</code>, and <code>user</code>, each responsible for different aspects of the application.</p>"},{"location":"OZprivate/rawJS/OZLegacy/#scripts","title":"<code>scripts</code>","text":"<p>The <code>scripts</code> directory holds the core JavaScript files responsible for the interactive tree visualization.</p> <ul> <li><code>index.js</code> is the main entry point, handling the initial setup of the application's iframe, managing button clicks for navigation and display, and controlling the visibility of the interactive panel. It relies heavily on jQuery for DOM manipulation and event handling.</li> <li><code>spectrum.js</code> implements a customizable color picker, which provides functionalities for color selection, storage, and display using jQuery. The styling for this color picker is defined in <code>spectrum.css</code>.</li> <li>Several files such as <code>plants_taxa_random.js</code>, <code>mammals_taxa_random.js</code>, and others, select a random default tree to display on page load by setting the global <code>taxa_URL</code>.</li> <li><code>select_options.js</code> defines the structure and behavior of the interactive options panel, allowing users to change tree views, settings, and more.</li> <li><code>auxiliaryFunction.js</code> provides auxiliary functions for color manipulation, view updates, and font changes, which are used by other scripts to update the interface.</li> <li><code>autoGenerator.js</code> dynamically generates the user interface based on the options in <code>select_options.js</code>, and creates URLs, embed codes, and links based on user settings.</li> <li><code>OZ_script_V1.2.original.js</code> is the core script, containing the main functions for parsing tree data, drawing the tree, handling user interactions, and managing animations.</li> <li>The directory also includes <code>jquery-1.10.2.min.js</code>, the minified jQuery library, which is used by many of the scripts.</li> </ul> <p>These scripts work together to create the interactive tree visualization tool. <code>index.js</code> sets the main frame, the random taxa files select a default data set, <code>select_options.js</code> defines the user interface components,  <code>spectrum.js</code> and <code>.css</code> provide a color picking functionality, and <code>autoGenerator.js</code> sets up the dynamic user interface. <code>OZ_script_V1.2.original.js</code> contains the core logic for drawing the tree, setting defaults, parsing URLs, and animations, and <code>auxiliaryFunction.js</code> provides functions for handling various view updates, and other settings.</p>"},{"location":"OZprivate/rawJS/OZLegacy/#css","title":"<code>css</code>","text":"<p>The <code>css</code> directory contains CSS files that style the various parts of the OZtree application.</p> <ul> <li><code>indexstyle.css</code> styles the main index page, setting up the overall page structure and elements. It uses absolute positioning for key elements, which can make layout maintenance more difficult.</li> <li><code>embedded.css</code> styles embedded content, particularly the canvas element used for graphics.</li> <li><code>front_iframe.css</code> is used for styling content inside iframes and hides images, while <code>style.css</code> provides the base styles for the entire application.</li> <li>Several files provide layout adjustments for different screen sizes, including <code>indexstyle_ms.css</code>, <code>indexstyle_l.css</code>, and  <code>indexstyle_s.css</code>. These files use media queries to provide different layouts based on screen size.</li> <li><code>generatorStyle.css</code> and <code>generatorStyle copy.css</code> style the generator tool, including the selection bar and content area.</li> </ul> <p>These files together provide the visual style for the OZtree application, handling the main layout, iframe content, and responsiveness to different screen sizes.</p>"},{"location":"OZprivate/rawJS/OZLegacy/#user","title":"<code>user</code>","text":"<p>The <code>user</code> directory contains the data and configuration files for the OneZoom explorer.</p> <ul> <li><code>plants_min.js</code> includes raw tree data for plants as well as metadata for nodes, essential for rendering the plant tree in the explorer.</li> <li><code>userOptions_river.js</code> sets user interface and display options for the explorer, such as tree type, view type, coloring methods, and also provides data for external links, credits, and search functionality.</li> <li><code>Euphorbia_2014_tree.js</code> and <code>ADEPD_birds_nunes_etal_2015_tree.js</code> are examples of older formats containing data for individual trees, using bracket notation.</li> </ul> <p>These files work together, with the raw data files providing structural information for specific trees, and the <code>userOptions_river.js</code> file providing visual configuration and behavior for the user interface.</p> <p>In summary, the <code>OZtree/OZprivate/rawJS/OZLegacy</code> directory contains the code for the interactive tree visualization, with the <code>scripts</code> directory handling the interactive logic, the <code>css</code> directory providing the styling, and the <code>user</code> directory containing data and configurations. These subdirectories house the JavaScript, CSS, and data necessary for the application.</p>"},{"location":"OZprivate/rawJS/OZLegacy/css/","title":"css","text":"<p>The <code>OZtree/OZprivate/rawJS/OZLegacy/css</code> directory contains CSS files that style various parts of the OZtree application. These files handle the layout and appearance of the user interface, including the main index page, embedded content, and a generator tool.</p> <p>Here's a breakdown of the key files:</p> <ul> <li><code>indexstyle.css</code>: This file styles the main index page of the application. It sets up the overall page structure with elements like <code>#iframe_box</code> for the main content area, <code>#group_selection</code> for the group selection panel, and <code>#footer_box</code> for the footer. It also includes styles for buttons, links, and selected elements, and hides the scrollbar. Notably, the layout uses absolute positioning for key elements, which can be difficult to maintain.</li> <li><code>embedded.css</code>: This CSS file is used for styling embedded content, particularly the <code>&lt;canvas&gt;</code> element, which is often used for graphics. It hides images by default, sets background color and prevents scrollbars.</li> <li><code>front_iframe.css</code>:  Similar to <code>embedded.css</code>, this file is meant to style content inside iframes and hides images. It also sets the background color to black, removes scrollbars, and applies basic styling to buttons and group selections.</li> <li><code>indexstyle_ms.css</code>: This file appears to be a modified version of <code>indexstyle.css</code>, specifically tailored for medium-sized screens. It adjusts the positioning and sizing of elements like <code>#iframe_box</code> and <code>#group_selection</code> to fit smaller displays.</li> <li><code>generatorStyle.css</code>: This file provides styling for a generator tool, which includes a selection bar (<code>#selection_bar</code>) and a content area (<code>#wholecontainer</code>). It also includes styles for form elements such as <code>&lt;select&gt;</code> and <code>&lt;textarea&gt;</code>. It sets up a two-column layout with the selection bar taking up 30% of the width and the main content area 68%.</li> <li><code>indexstyle_l.css</code>:  This is another variation of <code>indexstyle.css</code>, this time for larger screens. It modifies the positioning of the <code>#iframe_box</code> and <code>#group_selection</code> elements to suit a wider layout.</li> <li><code>indexstyle_s.css</code>: This file provides styling for the smallest screens. It sets the positions for elements such as <code>#iframe_box</code> and <code>#group_selection</code> and also reduces the size of buttons.</li> <li><code>style.css</code>: This file provides basic styling for the entire application, setting the background color and ensuring the page uses the full height and width of the screen. It is a base file for common styles.</li> <li><code>generatorStyle copy.css</code>: This file appears to be a copy of  <code>generatorStyle.css</code> with the addition of absolute positioning for <code>#selection_bar</code> and <code>#selection_form</code>. It also sets text color for the whole body.</li> </ul> <p>In summary, this directory contains the core CSS files for the OZtree application. It includes base styles, styles for the main index page with different layouts for different screen sizes, styles for embedded content, and styles for the generator tool. The naming convention indicates different layouts based on screen sizes, which can introduce maintainability issues.</p>"},{"location":"OZprivate/rawJS/OZLegacy/scripts/","title":"scripts","text":"<p>The <code>OZtree/OZprivate/rawJS/OZLegacy/scripts</code> directory contains JavaScript and CSS files that implement a dynamic, interactive tree visualization, along with supporting libraries. The main purpose of this directory is to provide the core functionality for the interactive tree, including rendering, user interface elements, and data handling.</p> <p>Here's a breakdown of the key files and how they work together:</p> <ul> <li> <p><code>index.js</code>: This file serves as the main entry point for the interactive tree application. It sets up the initial iframe, handles button clicks for navigation and display, and manages the visibility of the interactive panel.</p> <ul> <li>It includes a jQuery plugin <code>clickToggle</code> which allows for toggling between two functions on a click event.</li> <li>It uses jQuery to handle DOM manipulation and events such as click events for group selection, tutorial access, and toggling the control panel.</li> <li>It sets the initial iframe source to <code>tetrapods_front_iframe.htm</code> and dynamically updates it based on button clicks using attributes like id and classes like <code>group_select_btn</code> and <code>group_select_full_btn</code>.</li> <li>It shows and hides elements based on toggle buttons, changing iframe sizes and arrow directions using jQuery selectors and <code>css</code>.</li> </ul> </li> <li> <p><code>spectrum.js</code>: This file implements a powerful, customizable color picker using jQuery. It provides functions for color selection, storage, and display.</p> <ul> <li>It uses an immediately invoked function expression (IIFE) to create its own scope and uses jQuery.</li> <li>It provides various callback functions that are triggered at various stages of color picking such as <code>beforeShow</code>, <code>move</code>, <code>change</code>, <code>show</code>, and <code>hide</code> as defined in the <code>defaultOpts</code> variable.</li> <li>It defines HTML structures for color picker components.</li> <li>It contains logic for handling color input, local storage for color palettes, drawing palettes, and more, using utility functions for tasks such as setting color, getting color, and updating the UI.</li> <li>It uses helper functions such as <code>draggable</code> for implementing dragging behavior, and <code>throttle</code> for handling resize events.</li> <li>It includes a self contained, slightly modified version of the tinycolor library to handle color manipulations.</li> <li>It exports jQuery plugin named <code>spectrum</code>.</li> </ul> </li> <li> <p><code>jquery-1.10.2.min.js</code>: This is the minified version of the jQuery library. Many of the other scripts in the directory use jQuery for DOM manipulation and event handling.</p> </li> <li> <p><code>spectrum.css</code>: This CSS file provides the styling for the color picker implemented in <code>spectrum.js</code>.</p> <ul> <li>It uses various style rules for arranging the components, applying gradients, and making the color picker responsive across various devices.</li> <li>It includes styles for color palettes, buttons, input, and other components.</li> </ul> </li> <li> <p><code>plants_taxa_random.js</code>, <code>mammals_taxa_random.js</code>, <code>birds_taxa_random.js</code>, <code>amphibians_taxa_random.js</code>, <code>tetrapods_taxa_random.js</code>: These files each define a list of taxa and then set a global variable <code>taxa_URL</code> to a randomly selected value from each list. This helps select a default tree for the IFIG to display on page load.</p> </li> <li> <p><code>select_options.js</code>: This file defines the structure of the interactive options panel, including types of input elements and the functions they execute when changed.</p> <ul> <li>It uses a switch statement in <code>FunctionMap</code> to direct changes on the interface elements to other functions, such as <code>form_change_aux</code>, <code>signpost_change</code>, <code>change_background_color</code>, and more.</li> <li>It defines an array of <code>selections</code> which contains objects describing the various options available to the user for displaying the interactive tree, which each having parameters for layout and logic for UI elements.</li> <li>Each object contains <code>visible</code> and <code>additional</code> arrays which define the interactive components and their associated options.</li> <li>It contains different types of interactive elements such as radios, checkboxes, color pickers, text fields, and drop-down menus.</li> </ul> </li> <li> <p><code>auxiliaryFunction.js</code>: This file provides auxiliary functions used in the interactive tree, such as color manipulation, view updates, and font changes.</p> <ul> <li>These functions such as <code>form_change_aux</code>, <code>colour_change_aux</code>, and <code>font_change_aux</code>, handle logic for updating settings and triggering redraws of the interactive tree.</li> <li>It includes functions to handle different settings, such as color changes, viewtype, polytomies, leaftypes, highlight types, etc.</li> <li>It includes a <code>hexToRgb</code> function for converting hex values into RGB color objects.</li> </ul> </li> <li> <p><code>autoGenerator.js</code>: This file is responsible for dynamically generating the user interface and creating URLs, embed codes, and links based on user settings.</p> <ul> <li>It creates HTML elements using jQuery based on the structure defined in the <code>select_options.js</code> file.</li> <li>It dynamically loads user option files, which appear to be associated with various trees.</li> <li>It also generates the URLs, and embed codes by parsing options, and it includes functions for submitting form data and generating URLs.</li> <li>It handles changes to the selection options and dynamically updates UI elements for displaying interactive components based on a configuration.</li> </ul> </li> <li> <p><code>OZ_script_V1.2.original.js</code>: This is the core script for the interactive tree visualization which contains a large number of functions for parsing data, drawing the tree, setting defaults, handling searches, and animation logic, as well as a number of global variables.</p> <ul> <li>It handles the parsing of Newick formatted tree data, and it sets up a midnode object, and all the other properties of the interactive tree.</li> <li>It contains numerous functions for drawing, calculation positions, and setting colors for different features of the interactive tree.</li> <li>It manages zoom, pan, search, and growing animations with timers and animation loops.</li> <li>It contains the functions that handle user interactions such as mouse clicks and scrolling.</li> <li>It handles many of the url parameters which affect how the interactive tree operates.</li> </ul> </li> </ul> <p>In summary, these files work together to create a complex interactive tree visualization tool. <code>index.js</code> sets the main frame and user interactions, the random taxa files select a default data set, <code>select_options.js</code> defines the user interface components,  <code>spectrum.js</code> and <code>.css</code> provide a color picking functionality, and <code>autoGenerator.js</code> sets up the dynamic user interface. <code>OZ_script_V1.2.original.js</code> contains the core logic for drawing the tree, setting defaults, parsing URLs, and animations, and <code>auxiliaryFunction.js</code> provides functions for handling various view updates, and other settings.</p>"},{"location":"OZprivate/rawJS/OZLegacy/user/","title":"user","text":"<p>The <code>OZtree/OZprivate/rawJS/OZLegacy/user</code> directory contains JavaScript files that configure and provide data for the OneZoom interactive tree of life explorer.</p> <p>The most interesting files in this directory are:</p> <ul> <li> <p><code>plants_min.js</code>: This file contains the raw data for the plant tree, along with metadata about leaf nodes and internal nodes. The <code>rawData</code> variable holds a compressed, bracket-notation representation of the tree structure. The <code>metadata</code> variable holds an object containing two arrays, <code>leaf_meta</code> and <code>node_meta</code>, which contain information about the leaves (e.g., conservation status, whether it is woody) and internal nodes (e.g., common name, richness) of the tree, respectively. This file is crucial for rendering the plant tree in the OneZoom explorer.</p> </li> <li> <p><code>userOptions_river.js</code>: This file sets many user interface and display options for the OneZoom explorer. The <code>UserOptions</code> variable is an object that configures the explorer. Important options include <code>polytype</code> (the type of tree structure to draw), <code>viewtype</code> (how to present the tree), <code>colourtype</code> (which coloring method to use), <code>commonlabels</code> (whether to show common names or not), and <code>drawsignposts</code> (whether to draw \"signposts\" that indicate branches). It also includes default colors for leaves, branches, signposts, popup boxes and the background of the explorer. The file also defines <code>PartnerProfiles</code> and <code>linkSet</code> which enable links to external resources like Discover Life, EOL and Wikipedia. Additionally, it includes <code>creditsText</code> and function definitions, such as color selection based on conservation status, and functions to convert conservation status codes to human-readable text. It also includes the search function, and logic to precalculate node properties. This file is central to the customizability of the OneZoom experience.</p> </li> <li> <p><code>Euphorbia_2014_tree.js</code>: This file provides the raw data for a specific tree, in this case the Euphorbia tree of 2014. Like <code>plants_min.js</code>, it holds the bracket-notation tree structure in the <code>rawData</code> variable. However, it does not include any metadata, and it appears to be an older format with less features compared to the other data files. This file demonstrates how individual trees are represented when a whole group of species are not intended.</p> </li> <li> <p><code>ADEPD_birds_nunes_etal_2015_tree.js</code>: Similar to <code>Euphorbia_2014_tree.js</code>, this file contains the raw data for a bird tree. It represents the tree structure using the same bracket notation in the <code>rawData</code> variable and is an older format without metadata. This file further exemplifies how individual tree structures are represented.</p> </li> </ul> <p>These files work together in the following way:</p> <ul> <li> <p>The raw data files like <code>plants_min.js</code>, <code>Euphorbia_2014_tree.js</code>, and <code>ADEPD_birds_nunes_etal_2015_tree.js</code> provide the structural and taxonomic data for specific trees. The explorer will use these data to render the tree's branching structure, and metadata from those files when available to enhance the visualization.</p> </li> <li> <p>The <code>userOptions_river.js</code> file provides the user interface, behavior and visual configurations. The explorer uses these settings to customize the display according to the defined preferences. The functions within this file are used by the explorer to perform tasks like color-coding branches, displaying text, creating links, and implementing the search functionality.</p> </li> </ul> <p>In summary, the <code>user</code> directory houses the core data and configuration files necessary for generating the interactive trees in the OneZoom explorer, allowing for customization and exploration of various clades.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/","title":"OZTreeModule","text":"<p>The <code>OZtree/OZprivate/rawJS/OZTreeModule</code> directory is the root of the OZTree module. It contains the source code, documentation, tests, and build scripts for the OneZoom tree visualization.</p> <p>The most important aspect of this directory is that it contains the <code>src</code> subdirectory. The <code>src</code> directory contains the core logic for the OZTree module and is organized into several subdirectories, each responsible for a specific part of the application, such as data management, API communication, user interaction, and rendering. The entry point for the module is <code>src/OZentry.js</code>. It initializes the controller, sets up the API manager, binds event listeners, and sets up the data repository. It also exposes a public API for interacting with the OZTree module. The files in the <code>src</code> directory are responsible for the main functionality of the OneZoom tree. These files work together to provide a flexible and extensible architecture for visualizing and interacting with the OneZoom tree.</p> <p>The <code>docs</code> directory contains the documentation for the OneZoom Tree of Life Explorer's JavaScript module, written in Markdown. The entry point for the documentation is <code>docs/index.markdown</code>, which uses include statements to pull content from other files. The documentation is organized into sections that describe the JavaScript interface, core modules, and API requests. It also contains a set of guidelines for modifying the OneZoom JavaScript code. The documentation is compiled into a single document by the compile_docs.pl script.</p> <p>The <code>tests</code> directory contains tests for the OZTree module. It includes a number of utility files for populating the <code>factory</code> object (which is how the OZTree module builds and manages the tree data), the data repository, and creating test environments for tours and screensavers. It also includes tests for specific features of the module, such as pinpoint resolution, tour navigation, highlighting, and viewport calculations. Some important testing files include <code>util_factory.js</code>, <code>util_data_repo.js</code>, <code>test_navigation_pinpoint.js</code>, and <code>test_tour_handler_QsOpts.js</code>.</p> <p>The <code>README.markdown</code> file at the root level provides instructions for setting up the development environment, transpiling the code, and compiling the documentation. It also includes an overview of the grunt commands. The <code>.gitignore</code> file specifies intentionally untracked files that Git should ignore, in this case anything starting with <code>docs/_</code> or <code>docs/src/</code>. The <code>features.markdown</code> file describes the buttons and interactive elements of the OneZoom tree.</p> <p>The main functionality of the OZTree module is contained within the <code>src</code> subdirectory. The <code>docs</code> subdirectory contains documentation for the code and the <code>tests</code> subdirectory contains automated tests to confirm that the code is functioning correctly.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/docs/","title":"docs","text":"<p>The <code>OZtree/OZprivate/rawJS/OZTreeModule/docs</code> directory contains the documentation for the OneZoom Tree of Life Explorer's JavaScript module. This documentation is written in Markdown and is processed by a custom script, compile_docs.pl, which combines the files and embeds images. The main entry point for the documentation is index.markdown.</p> <p>Here's a breakdown of the key files and how they work together:</p> <ul> <li> <p>index.markdown: This file acts as the table of contents for the documentation. It uses include statements (e.g. <code>{{JSinterface.markdown}}</code>) to pull in content from other files in the directory. It defines the overall structure of the documentation by introducing the Javascript interface, core, and API requests.</p> </li> <li> <p>JSinterface.markdown: This document describes how to create and use a <code>OneZoom</code> object in JavaScript. It details the prerequisites, basic usage, the entry function, and how to manipulate the OneZoom object through its <code>controller</code>, <code>utils</code>, <code>data_repo</code>, and <code>config</code> properties. The entry function is further described by including src/OZentry.md and the controller by src/controller/controller_dom.md. It also refers to src/global_config.md for configuration information.</p> </li> <li> <p>guidelines.markdown: This file provides guidelines for modifying the OneZoom JavaScript code. It includes a diagram (OZ_refactor_flow.svg) showing the modular structure of the code and discusses possible future changes and customizations. It outlines key areas like language and theme support, view types, WebGL, metadata, and custom data sources. The diagram visualizes the flow of data and control between the different modules.</p> </li> <li> <p>controller.markdown: This document describes the responsibilities of the <code>Controller</code> module, which acts as the central hub of the application. It explains how the controller interacts with other modules, including the factory, renderer and interactor.</p> </li> <li> <p>factory.markdown: This file describes the <code>Factory</code> module, which is responsible for building the tree structure, managing memory, and dynamically loading parts of the tree as the user explores it. It also documents the module's interface, including functions for building the tree, getting the root node, and dynamically loading branches.</p> </li> <li> <p>factory.midnode.markdown: This document details the properties of the <code>Midnode</code> object, which represents a node or leaf in the tree. It covers tree structure, species attributes, and position-related data.</p> </li> <li> <p>factory.detail_updater.markdown: This describes the detail updater, which fetches node and leaf details from the server and updates the corresponding objects.</p> </li> <li> <p>interactor.markdown: This document describes the <code>Interactor</code> module which handles user interaction with the canvas, binding mouse, touch, and keyboard listeners.</p> </li> <li> <p>projection.markdown: This document describes the <code>Projection</code> module. This module calculates shapes for nodes and leaves and updates their positions when the tree is moved as a result of user interaction or other events.</p> </li> <li> <p>webAPI.markdown: This document explains how to make API requests to fetch data from the server. It emphasizes the use of a queued approach for API calls to avoid browser stalls, and refers to src/api/api_manager.md for further API details.</p> </li> <li> <p>README.markdown: This file explains how the documentation is structured using flatdoc and how to include entries in the navigation bar using Markdown syntax. It also explains how to add code blocks and examples.</p> </li> <li> <p>compile_docs.pl: This is a Perl script that processes the Markdown documentation, embedding images and combining files.</p> </li> <li> <p>.gitignore:  This file specifies intentionally untracked files that Git should ignore, in this case anything starting with an underscore.</p> </li> </ul> <p>The documentation is organized into several key areas:</p> <ul> <li>JavaScript Interface: Explains how to use the OneZoom explorer in a web page and how to create a <code>OneZoom</code> object.</li> <li>JavaScript Core: Details the internal modules and how they work, including guidelines for modification.</li> <li>API Requests: Describes how to fetch data from the server to fill in information on the tree.</li> </ul> <p>The documentation files use a combination of headings, lists, and code blocks to organize information. Include statements allow for modular documentation, and the Perl script combines these files into a single document. The documentation also provides guidelines for future changes, potential cooperator customization, and details on how to modify and extend the OneZoom explorer's functionality.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/","title":"src","text":"<p>The <code>OZtree/OZprivate/rawJS/OZTreeModule/src</code> directory is the heart of the OZTree module, containing the core logic for rendering and interacting with the OneZoom tree. It's organized into several subdirectories, each with a specific responsibility, and a few top-level files.</p> <p>Here's a breakdown of the key components and how they work together:</p> <ul> <li> <p><code>errors.js</code>: This file defines custom error classes used throughout the module. Currently, it only defines a <code>UserInterruptError</code>, which is used to signal when a user action interrupts an ongoing process.</p> </li> <li> <p><code>tree_state.js</code>: This file defines the <code>TreeState</code> class, which is responsible for maintaining the current state of the tree, such as the current position (<code>xp</code>, <code>yp</code>), zoom level (<code>ws</code>), and whether an animation is in progress (<code>flying</code>). It also manages the focal area, which determines the portion of the tree that should be in view when animating or zooming and stores other miscellaneous state variables. It also provides methods to update this state, and triggers hooks (<code>call_hook</code>) when state variables change, allowing other components to react to changes in the tree state.</p> </li> <li> <p><code>global_config.js</code>: This file defines a <code>config</code> object that contains global configuration settings for the OZTree module. These settings include API endpoints, animation parameters, thresholds, default values, UI functions, and other parameters. This file allows for customization of the OZTree module's behavior and appearance.</p> </li> <li> <p><code>image_cache.js</code>: This file implements a simple image cache to improve performance. The <code>get_image</code> function retrieves images from the cache or loads them if they are not present. The <code>clear_least_used_image</code> function periodically removes the least recently used images to avoid excessive memory consumption.</p> </li> <li> <p><code>OZui.js</code>: This file serves as a central export point for UI-related modules, making them accessible to other parts of the application. It exports modules related to search, leaf drawing, and tour lists.</p> </li> <li> <p><code>position_helper.js</code>: This module implements the logic for calculating the position and scale of the tree during animations. It includes functions for targeting a specific node (<code>target_by_code</code>), calculating the appropriate zoom level (<code>get_xyr_target</code>), and performing animations (<code>perform_actual_fly</code>, <code>perform_fly_b2</code>). It also includes functions to re-anchor the tree based on the current position (<code>reanchor</code>).</p> </li> <li> <p><code>button_manager.js</code>: This file manages the actions associated with interactive elements within the tree. It defines the <code>global_button_action</code> object, which stores the action, data, and node associated with a click event. The <code>click_on_button_cb</code> function executes the appropriate action, such as flying to a node, opening a link, or displaying a popup.</p> </li> <li> <p><code>OZentry.js</code>: This is the main entry point for the OZTree module. It initializes the controller, sets up the API manager, binds event listeners, and sets up the data repository. It also exposes a public API for interacting with the OZTree module, including access to <code>utils</code>, <code>controller</code>, <code>tree_settings</code>, <code>tree_state</code>, <code>data_repo</code>, and <code>config</code>.</p> </li> <li> <p><code>tree_settings.js</code>: This module manages the settings that control how the tree is rendered. It defines the different layout types, themes, and node types, and allows the user to switch between these using <code>set_default</code>. It also includes logic for changing the view type, which may trigger a rebuild of the tree, and for changing the language.</p> </li> <li> <p><code>OZ_script_template.html</code>: This file is an HTML template used by the build process to include the necessary JavaScript files for the OZTree module.</p> </li> </ul> <p>The subdirectories within <code>src</code> further organize the module:</p> <ul> <li> <p><code>data</code>: This directory contains data files used by the OZTree module, such as column header definitions. The data is currently a hack that should be replaced with API calls.</p> </li> <li> <p><code>api</code>: This directory contains the code that interfaces with the OneZoom API. It includes modules for managing API requests, fetching node details, image details, and recording visit counts. The <code>api_manager.js</code> module is a core component responsible for managing all API requests. The <code>node_details.js</code> module handles fetching details about nodes, and the <code>image_details.js</code> module handles image metadata.</p> </li> <li> <p><code>tour</code>: This directory contains the core logic for creating and managing interactive tours within the OneZoom application. It consists of a <code>handler</code> subdirectory and files for tour management (<code>Tour.js</code>, <code>TourStop.js</code>, <code>Screensaver.js</code>).</p> </li> <li> <p><code>util</code>: This directory contains various utility functions and classes used throughout the OZTree project, such as object pooling, array pooling, drawing, math, and string manipulation.</p> </li> <li> <p><code>interactor</code>: This directory contains the code that handles user input for the OZTree component. It includes modules for both mouse and touch interactions, managed by the central <code>interactor.js</code> file.</p> </li> <li> <p><code>navigation</code>: This directory contains the core logic for managing the state of the OneZoom tree viewer, specifically how the URL and browser history interact with the displayed tree. The <code>state.js</code> file acts as the bridge between the URL and the internal state of the tree.</p> </li> <li> <p><code>factory</code>: This directory contains the core logic for creating and managing the tree structure, including classes for nodes, data storage, and garbage collection. The <code>data_repo.js</code> file acts as a central repository for all tree data and the <code>factory.js</code> file is responsible for creating and managing the tree.</p> </li> <li> <p><code>render</code>: This directory contains the core rendering logic for the OZTree module. It primarily manages the canvas and delegates the actual drawing to individual shape renderers. The <code>renderer.js</code> file acts as the central hub for rendering operations.</p> </li> <li> <p><code>ui</code>: This directory contains code for the user interface elements of the OneZoom tree, including components for search, tour lists, and leaf drawing. The <code>search_manager.js</code> file is responsible for fetching the search data, <code>search.js</code> displays the search results, <code>tours_list.js</code> displays the tours, and <code>leaf_draw.js</code> draws the leaves on the tree.</p> </li> <li> <p><code>themes</code>: This directory contains the code that defines the visual themes for the OneZoom tree, including color schemes and how they are applied to the tree's various elements. The <code>color_theme.js</code> file provides the logic for retrieving colors and the <code>index.js</code> file exports all the defined themes.</p> </li> <li> <p><code>projection</code>: This directory contains the core logic for projecting and rendering the OneZoom tree. It handles the layout of nodes and branches, as well as highlighting and interactivity. It is split into several subdirectories: <code>horizon_calc</code>, <code>highlight</code>, <code>shapes</code>, <code>layout</code>, and <code>pre_calc</code>, each of which is responsible for specific parts of the tree visualization. The <code>projection.js</code> file acts as the entry point for accessing all projection-related functionality.</p> </li> <li> <p><code>libs</code>: This directory contains external libraries used by the OZ Tree Module. It includes <code>jquery.js</code> and a polyfill for the <code>requestAnimationFrame</code> API in <code>requestAnimationFrame.js</code>.</p> </li> <li> <p><code>controller</code>: This directory contains the core logic for the OneZoom tree viewer. It manages user interactions, animations, navigation, and communication with the data layer. The <code>controller.js</code> file is the main file that defines the <code>Controller</code> class, which is then extended by the other files within the directory.</p> </li> <li> <p><code>tour/handler</code>: This directory contains JavaScript modules that add functionality to tour stops, including managing progress, media playback, querystring options, and UI events.</p> </li> <li> <p><code>projection/horizon_calc</code>: This directory contains the logic for calculating the \"horizon\" of nodes, which is used for layout and rendering. It includes classes for bezier curves and polytomies and a facade to select the calculator.</p> </li> <li> <p><code>projection/highlight</code>: This directory contains the logic for applying highlights to the OneZoom tree. The <code>highlight.js</code> file provides the functionality to define, resolve, apply, and manage highlights on the tree.</p> </li> <li> <p><code>projection/shapes</code>: This directory contains the shape classes used for rendering to a Canvas context, using an object pool for efficiency. It includes classes for paths, text, lines, arcs, bezier curves, and images.</p> </li> <li> <p><code>projection/layout</code>: This directory contains the core logic for laying out different tree projections, including a <code>layout_manager.js</code> file for coordinating the layout process. It includes subdirectories for each layout type (<code>AT</code>, <code>otop</code>, <code>polytomy</code>, <code>polytomy2</code>, and <code>life</code>) which override the base classes as needed.</p> </li> <li> <p><code>projection/layout/AT</code>: This directory contains the layout implementation for the \"AT\" projection.</p> </li> <li> <p><code>projection/layout/otop</code>: This directory provides the layout logic for a top-down view.</p> </li> <li> <p><code>projection/layout/polytomy</code>: This directory contains layout adjustments for trees with polytomies.</p> </li> <li> <p><code>projection/layout/polytomy2</code>: This directory is similar to <code>polytomy</code> but provides another specialized layout for polytomies.</p> </li> <li> <p><code>projection/layout/life</code>: This directory provides a simple re-export of the base layout classes, suggesting that no special layout logic is required for this projection.</p> </li> <li> <p><code>projection/pre_calc</code>: This directory contains the pre-calculation logic for different tree projections. The <code>pre_calc.js</code> file acts as a central manager, and the other files implement specific pre-calculation strategies.</p> </li> </ul> <p>In summary, the <code>src</code> directory and its subdirectories form the foundation of the OZTree module, providing a flexible and extensible architecture for visualizing and interacting with the OneZoom tree.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/api/","title":"api","text":"<p>This directory contains the code that interfaces with the OneZoom API. It includes modules for managing API requests, fetching node details, image details, and recording visit counts. </p> <p>The <code>api_wrapper.js</code> module is a core component responsible for managing all API requests. It maintains a queue of requests, limits the number of concurrent requests, and handles retries for timed-out requests. It also provides an option to abort requests if the application is busy. This prevents the application from being overloaded with API calls when the user is interacting with it intensively. The <code>api_wrapper</code> function is the main entry point for making API requests. It takes a configuration object (<code>params</code>) that specifies the URL, method, data, success and error callbacks, and other parameters.</p> <p>The <code>api_manager.js</code> module provides a higher-level interface for interacting with the OneZoom API. It uses <code>api_wrapper.js</code> to make the actual requests. It includes functions for making search requests, fetching tour data, and fetching pinpoints. It also initializes and starts other API modules, such as <code>node_details.js</code>, <code>image_details.js</code>, and <code>visit_count.js</code>. The <code>APIManager</code> class is designed to be instantiated once per application. It provides the <code>set_urls</code> method, which allows configuration of the API endpoints used by the application.</p> <p>The <code>node_details.js</code> module is responsible for fetching details about nodes in the tree. It uses the <code>api_manager</code> to make requests to the <code>/node_details</code> endpoint. It prioritizes fetching details for visible nodes and nodes near the user's current view, and limits the number of nodes fetched in a single API call to avoid server overload. The <code>NodeDetailsAPI</code> class manages the fetching process, and the <code>fetch_node_start</code> function starts a loop that periodically checks which nodes require details and fetches them from the server. The module also includes logic to update the node attributes once the API response is received. It also caches in-flight requests to avoid redundant requests.</p> <p>The <code>image_details.js</code> module handles fetching details for images displayed in the tree, such as copyright and licensing information. It fetches image details periodically using the <code>start_fetch_loop</code> function, which uses <code>api_wrapper</code> to make the requests. The <code>collect_nodes_need_image_details</code> function collects image details from nodes that are visible and large enough, and that have not already had their metadata fetched. It uses the <code>data_repo</code> module to update the image metadata once the API response has been received.</p> <p>The <code>visit_count.js</code> module records user interactions with the tree, such as searches, detail fetches, and leaf clicks. It sends this data to the server periodically using the <code>api_wrapper</code> module. The <code>start</code> function starts the collection process, which records these actions in local variables until the <code>send_statistic</code> function is called. This module is designed to be lightweight and to not impact the user experience. It also avoids sending the recorded visit information if the user is rapidly interacting with the tree, waiting for a quiet period.</p> <p>The <code>process_taxon_list.js</code> module takes in a list of taxon names and OTT ids, and resolves them to pinpoints (locations on the tree). This function is used to populate the popular species menu. It uses the <code>resolve_pinpoints</code> function from <code>../navigation/pinpoint.js</code> to do the actual resolution.</p> <p>These modules work together to provide a comprehensive solution for interacting with the OneZoom API. They are designed to be efficient, reliable, and easy to use.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/controller/","title":"controller","text":"<p>The <code>controller</code> directory contains the core logic for the OneZoom tree viewer. It manages user interactions, animations, navigation, and communication with the data layer. The files within this directory extend the <code>Controller</code> class with methods for different aspects of the application. </p> <p>Here's a breakdown of the most important files and how they work together:</p> <ul> <li><code>controller.js</code>: This is the main file that defines the <code>Controller</code> class. It sets up the core components, like the <code>interactor</code>, <code>renderer</code>, <code>projection</code>, and <code>factory</code>. It also includes methods for initializing the tree, handling canvas setup and resizing, managing the refresh loop, and triggering data loading and tree calculations. Crucially it imports all the other controller files and applies their prototypes to the main controller class, which is why the controller's methods are spread across multiple files.</li> <li><code>controller_navigation.js</code>: This file extends the <code>Controller</code> with functions for managing the state of the tree, including setting the language, changing the view type (e.g.  radial or rectangular), changing the color theme, and setting the image source. It also handles URL parameter parsing, and recording changes to the URL.</li> <li><code>controller_anim.js</code>: This file adds animation capabilities to the <code>Controller</code>. It includes functions for flying to a specific node (<code>fly_straight_to</code>, <code>fly_on_tree_to</code>), leaping to a node (<code>leap_to</code>), and managing in-flight data loading to ensure a smooth animation. It manages a queue of flight promises so that only one flight is performed at a time.</li> <li><code>controller_search.js</code>: This file provides methods to move the view to a node based on search results. It uses the <code>resolve_pinpoints</code> to convert search results (which could be an OTT id, or a set of pinpoints), into a location on the tree. It then calls the appropriate <code>fly</code> or <code>leap</code> method based on config.</li> <li><code>controller_dom.js</code>: This file contains functions that manipulate the canvas based on DOM events. It includes functions for zooming in and out using buttons, resetting the view, and moving up the tree.</li> <li><code>controller_tour.js</code>: This file adds functions to the controller that manage tours and screensavers. It includes methods for starting tours, setting up screensavers, and managing tour metadata.</li> <li><code>controller_highlight.js</code>: This file adds methods to the <code>Controller</code> to highlight nodes on the tree. It includes methods for adding, replacing, and removing highlights.</li> <li><code>controller_loc.js</code>: This file contains methods to determine the current location in the tree (i.e. the path from the root to the most zoomed in ancestor). It returns an array of names and IDs of nodes on this path.</li> <li><code>controller_interactor.js</code>: This file handles direct user interaction, such as zooming, panning, and clicking on the canvas. It also handles double-click zooming.</li> </ul> <p>These files work together to provide a complete and interactive tree visualization experience. The <code>controller.js</code> file acts as the main entry point, setting up the necessary components and delegating tasks to the other files. The other files extend the functionality of the <code>Controller</code> class, providing methods for specific aspects of the application, such as navigation, animation, search, and DOM manipulation.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/data/","title":"data","text":"<p>The <code>OZtree/OZprivate/rawJS/OZTreeModule/src/data</code> directory contains data files used by the OZTree module.</p> <p>The file <code>col_headers.js</code> defines a JavaScript object <code>col_headers</code> which is then exported. This object appears to be a configuration that defines column headers for different types of data related to the tree, specifically: * <code>colnames_leaves</code>: Column headers for leaf nodes * <code>colnames_images</code>: Column headers for images * <code>colnames_nodes</code>: Column headers for nodes * <code>colnames_reservations</code>: Column headers for reservations.</p> <p>The values in these objects appear to be indices. This data structure is a hack that should be replaced by a call to the <code>node_details</code> API.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/factory/","title":"factory","text":"<p>The <code>factory</code> directory contains the core logic for creating and managing the tree structure used in the OneZoom visualization. It includes classes for different types of nodes, data storage, and garbage collection.</p> <p>Here's a breakdown of the key files and how they work together:</p> <ul> <li> <p><code>data_repo.js</code>: This file defines the <code>DataRepo</code> class, which acts as a central repository for all tree data, metadata, and related information. It's responsible for:</p> <ul> <li>Storing and managing mappings between OneZoom IDs (metacodes), Open Tree of Life (OTT) IDs, and names.</li> <li>Storing metadata for both leaf and interior nodes, including scientific names, common names, popularity, image information, IUCN status, and sponsorship details.</li> <li>Providing methods to update metadata from API responses, parse vernacular names, and handle sponsorship and tour data.</li> <li>Defining the <code>ott_region_map</code>, a map that assigns a display priority to a given <code>ott</code> ID, used for the region layer.</li> <li>It also contains several helper functions that process the raw API data, populating the repository with data and metadata, including: <code>parse_ordered_leaves</code>, <code>parse_ordered_nodes</code>, <code>parse_iucn</code>, <code>parse_pics</code>, <code>parse_vernacular_by_ott</code>, <code>parse_vernacular_by_name</code>, <code>parse_sponsorship</code>, and <code>parse_tours_by_ott</code>.</li> </ul> </li> <li> <p><code>midnode.js</code>: This file defines the <code>Midnode</code> class, which is the base class for all nodes in the tree (both interior and leaf nodes). It includes:</p> <ul> <li>Properties for storing tree structure (children, parent node, start/end positions in the raw data string).</li> <li>Properties for storing metadata retrieved from <code>data_repo.js</code>.</li> <li>Methods to initialize a node (<code>init</code>), develop its children (<code>develop_children</code>), and find the child node that is on the path to a given metacode (<code>child_index_towards</code>).</li> <li>Methods for calculating and storing derived properties such as species richness (<code>calc_richness_of_node</code>), common names, image information, and IUCN threat status.</li> <li>A method <code>get_cuts</code> to calculate the cut points in the raw data string that define the boundaries of the child nodes, using either the <code>cut_map</code> in <code>data_repo.js</code>, or by calculating it directly from the raw data.</li> <li>A method <code>calc_start_metacode_of_children</code> that uses the cut points to calculate the metacodes for each child.</li> <li>Getter methods for accessing node attributes, including a <code>region</code> getter that gets the display priority for a given node.</li> <li>A method <code>get_picset_src_info</code> to get metadata about the 4x2 set of pictures on an internal node</li> </ul> </li> <li> <p><code>at_midnode.js</code>: This file defines the <code>ATMidnode</code> class, which extends <code>Midnode</code> and adds Ancestor's Tale specific logic. It includes:</p> <ul> <li>An overridden <code>concestor</code> getter to find a node's ancestor using a hardcoded <code>mapping</code> object.</li> <li>This file provides an example of how to extend the <code>Midnode</code> class for specific use cases.</li> </ul> </li> <li> <p><code>polytomy_midnode.js</code>: This file defines the <code>PolytomyMidnode</code> class, which extends <code>Midnode</code> and adds specific logic for polytomies (nodes with more than two children). It includes:</p> <ul> <li>An overridden <code>get_cuts</code> method that handles the parsing of polytomy-specific data, which is delimited using curly braces instead of parenthesis.</li> <li>An overridden <code>develop_children</code> method that reduces the depth of development of polytomy child nodes to avoid over-development.</li> </ul> </li> <li> <p><code>life_midnode.js</code>: This file defines the <code>LifeMidnode</code> class, which also extends <code>Midnode</code>. It appears to be a placeholder for life-specific logic, currently only adding Bezier curve variables to the <code>Midnode</code>.</p> </li> <li> <p><code>garbage_collection.js</code>: This file contains the logic for garbage collection, which is used to free up memory by removing nodes that are no longer visible.</p> <ul> <li>It defines functions to traverse the tree and identify unused nodes based on their distance from the visible main branch.</li> <li>The <code>free_space_from_node</code> and <code>free_space_from_node2</code> functions are used to release the memory occupied by those nodes by calling <code>node.free()</code>.</li> </ul> </li> <li> <p><code>utils.js</code>: This file contains utility functions that are used throughout the factory, including:</p> <ul> <li>Functions for formatting species numbers (<code>spec_num_full</code> and <code>number_convert</code>).</li> <li>A function to convert geological time to a string (<code>gpmapper</code>).</li> <li>Functions for converting ages into human-readable text (<code>ageAsText</code>).</li> <li>Functions to determine primary and secondary names, and to get a translated IUCN string (<code>extxt</code>).</li> </ul> </li> <li> <p><code>factory.js</code>: This file defines the <code>Factory</code> class, which is responsible for creating and managing the tree structure. It includes:</p> <ul> <li>A <code>build_tree</code> method which creates the root node.</li> <li>A <code>dynamic_loading_by_visibility</code> method which traverses the tree and creates nodes as they come into view.</li> <li>A <code>dynamic_loading_by_metacode</code> method which loads parts of the tree to reach a specific node (identified by its <code>OZid</code>).</li> <li>A <code>dynamic_load_to_common_ancestor</code> method that will load parts of the tree until a common ancestor of a given array of <code>OZid</code>s is found.</li> <li>A helper function <code>next_hop</code> is used by the dynamic loading methods to find the next node in the tree.</li> <li>The <code>set_factory_midnode</code> function is used to set which class should be used for <code>Midnode</code>.</li> </ul> </li> </ul> <p>In summary, the <code>factory</code> directory provides the classes and logic to build and manage a tree structure dynamically, using data stored in <code>data_repo.js</code> and visualized using the drawing code in the rest of the repository. It includes mechanisms for handling different types of nodes, optimizing performance with garbage collection, and loading parts of the tree on demand.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/interactor/","title":"interactor","text":"<p>The <code>interactor</code> directory contains the code that handles user input for the OZtree component. It includes modules for both mouse and touch interactions, as well as a central <code>interactor.js</code> file that manages these modules.</p> <ul> <li> <p><code>touch.js</code> - This file defines the <code>TouchInteractor</code> class, which handles touch events on the canvas. It tracks touch positions, detects gestures such as panning and zooming, and triggers corresponding actions on the OZtree controller. The <code>TouchInteractor</code> uses <code>touchstart</code>, <code>touchmove</code>, and <code>touchend</code> event listeners to handle touch input. It also prevents default browser touch behaviors and propagation of events. The logic in the <code>touch_move</code> function calculates the midpoint between two fingers and the distance between the current and previous finger positions to determine the scale factor and the amount to pan the tree.</p> </li> <li> <p><code>mouse.js</code> - This file defines the <code>MouseInteractor</code> class, which handles mouse events on the canvas. It tracks mouse positions, detects clicks, double clicks, and mouse wheel events for zooming. The <code>MouseInteractor</code> uses <code>mousedown</code>, <code>mouseup</code>, <code>mouseout</code>, <code>mousemove</code>, <code>mouseover</code>, <code>keydown</code>, <code>keyup</code>, <code>wheel</code>, and <code>dblclick</code> event listeners to handle mouse input. It also prevents default browser mouse behaviors and propagation of events. The <code>mouse_wheel</code> function calculates the zoom sensitivity based on the time between scroll events. It also sets the cursor to <code>zoom-in</code> or <code>zoom-out</code> temporarily when the user scrolls. The <code>mouse_move</code> function implements panning when the mouse is moved while holding the mouse button down.</p> </li> <li> <p><code>interactor.js</code> - This file is the entry point for the interactor module. It creates and manages instances of <code>MouseInteractor</code> and <code>TouchInteractor</code>, and binds event listeners to the canvas. It also listens for window <code>resize</code> events and device pixel ratio changes using a <code>matchMedia</code> query to trigger canvas resizes. The <code>Interactor</code> class uses the <code>mouse_interactor</code> and <code>touch_interactor</code> to handle user input. The <code>window_resize</code> function tells the controller to resize the canvas and refresh the display.</p> </li> </ul> <p>The <code>interactor</code> module provides a unified interface for handling user interactions with the OZtree component. It abstracts away the details of mouse and touch input, allowing the controller to focus on updating the tree. Both <code>mouse.js</code> and <code>touch.js</code> make use of <code>tree_state</code>, <code>record_url_delayed</code>, and <code>call_hook</code>, which are defined elsewhere in the module.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/libs/","title":"libs","text":"<p>The <code>OZtree/OZprivate/rawJS/OZTreeModule/src/libs</code> directory contains external libraries used by the OZ Tree Module.</p> <ul> <li> <p><code>jquery.js</code> is a version of the jQuery library. jQuery is a widely used JavaScript library that simplifies HTML document traversal, event handling, animation, and Ajax interactions. It provides a powerful and cross-browser compatible way to manipulate the DOM and handle asynchronous operations. This library is the foundation for the OZ Tree Module's user interface interactions and animations.</p> </li> <li> <p><code>requestAnimationFrame.js</code> provides a polyfill for the <code>requestAnimationFrame</code> API. This API is used to optimize browser rendering by scheduling animations to occur before the next browser repaint. This polyfill is necessary to provide this functionality for older browsers that do not natively support it. This file ensures smooth animations within the OZ Tree module across all browsers.</p> </li> </ul>"},{"location":"OZprivate/rawJS/OZTreeModule/src/navigation/","title":"navigation","text":"<p>The <code>navigation</code> directory contains the core logic for managing the state of the OneZoom tree viewer, specifically how the URL, and by extension the browser's history, interacts with the displayed tree. It handles parsing the URL, updating the tree based on the URL, and updating the URL to reflect the current state of the tree.</p> <p>Here's a breakdown of the key files and how they work together:</p> <ul> <li> <p><code>setup_page.js</code>: This file contains the core functions for setting up the page based on the current state and for extracting the current state.</p> <ul> <li><code>setup_page_by_state(controller, state)</code>: This function is the primary entry point for updating the tree based on a provided <code>state</code> object. The <code>state</code> object is typically generated by parsing the URL (see <code>state.js</code>). It sets various properties of the tree, including the image source, language, color theme, view type, highlights, and the initial position in the tree. It also handles opening popups based on URL parameters and triggers a \"oz_treestate\" event, used by UI components to update.</li> <li><code>tree_current_state_obj(controller, {record_popup = null})</code>: This function is the inverse of <code>setup_page_by_state</code>. It extracts the current state of the tree into a state object. The state includes the current position in the tree (as a pinpoint, see <code>pinpoint.js</code>), the current view type, color scheme, language, image source, search mode, highlights, tour settings, and popup information. This object is then typically used to generate a new URL (see <code>state.js</code>).</li> </ul> </li> <li> <p><code>state.js</code>: This file is responsible for parsing and generating URL strings based on a state object.</p> <ul> <li><code>parse_state(location)</code>: This function takes a URL (or a URL-like string or a state object) as input and returns a state object that can be used by <code>setup_page_by_state</code>. It handles parsing various parts of the URL including the path, query string, and hash. The query string parameters include things like visualization type, language, image source, and search mode.</li> <li><code>deparse_state(state)</code>: This function takes a state object and returns a URL object representing the state. It effectively reverses the action of <code>parse_state</code>.</li> <li><code>parse_url_base(location)</code>: Extracts the base URL of the OneZoom application, without any pinpoint or search parameters. This is used when resolving relative URL paths.</li> </ul> </li> <li> <p><code>pinpoint.js</code>: This file handles the conversion of \"pinpoints\" (which are strings that represent a location in the tree, such as a taxon name or ID) to internal IDs.</p> <ul> <li><code>resolve_pinpoints(pinpoint_or_pinpoints, extra_metadata={})</code>: This function takes a pinpoint string (or array of strings) and resolves it to an internal ID (ozid) which can be used by the tree. It can perform lookups against local data, and if that fails, makes an API request to resolve the pinpoint. It also handles special pinpoint formats such as common ancestor lookups.</li> <li><code>node_to_pinpoint(node)</code>: This function takes a node object from the tree and generates a pinpoint string that represents that node. This string can be used in a URL to refer to that specific node.</li> </ul> </li> <li> <p><code>utils.js</code>: This file contains utility functions for the navigation logic.</p> <ul> <li><code>get_largest_visible_node(node, width, height, condition=null)</code>: This function finds the largest node that is currently visible on the screen. It can optionally take a condition function to filter nodes. This function is used in <code>setup_page.js</code> to determine the node that should be used for creating the current state.</li> </ul> </li> <li> <p><code>record.js</code>: This file contains functions for updating the browser's URL to reflect the current state of the tree.</p> <ul> <li><code>record_url_delayed(controller, options, force)</code>: This function is a debounced wrapper around <code>record_url</code> which records the current position into the url.</li> <li><code>record_url(controller, options, force)</code>: This function generates a URL from the current tree state (using <code>tree_current_state_obj</code> in <code>setup_page.js</code> and <code>deparse_state</code> in <code>state.js</code>) and updates the browser's history. It also updates the document's title. This function is called when the user navigates the tree or opens/closes popups. It uses <code>pushState</code> and <code>replaceState</code> to add to browser history, avoiding full page reloads.</li> </ul> </li> </ul> <p>In summary, the files in the <code>navigation</code> directory work together to provide a seamless navigation experience for the OneZoom tree viewer. The <code>state.js</code> file acts as the bridge between the URL and the internal state of the tree, while <code>setup_page.js</code> applies that state to the actual tree visualization and <code>record.js</code> reflects changes to the tree in the browser URL. The <code>pinpoint.js</code> file translates between human-readable tree locations to ids, while <code>utils.js</code> provides useful functions for locating nodes within the tree.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/projection/","title":"projection","text":"<p>The <code>projection</code> directory contains the core logic for projecting and rendering the OneZoom tree. It handles the different ways the tree can be displayed, from the layout of nodes and branches to how they are highlighted and interacted with. The directory is divided into subdirectories and files that work together to perform this complex task.</p> <p>The <code>move_restriction.js</code> file defines the logic for how far the user can move the tree view. It uses screen size and node size to restrict movement, ensuring that important information is not moved off-screen. The <code>add_mr</code> function adds movement restrictions based on the size and position of a drawn circle. The <code>reset_mr</code> function resets these restrictions. The file includes helper functions such as <code>if_ok_up</code>, <code>if_ok_down</code>, <code>if_ok_left</code>, <code>if_ok_right</code>, <code>if_ok_zoom</code> and <code>circle_in_range</code> that calculate the restriction based on various parameters.</p> <p>The <code>re_calc.js</code> file handles the recalculation of node positions when the view is moved. The <code>re_calc</code> function takes a node, x and y positions, and a width scale to re-calculate positions for all nodes and determine which are on screen. The <code>drawreg</code>, <code>drawreg2</code>, <code>get_dvar_by_children</code>, <code>node_descendants_in_screen</code>, <code>node_in_screen</code> and <code>set_node_gvar_dvar</code> helper functions do the work of actually moving nodes.</p> <p>The <code>shape_manager.js</code> file is responsible for managing and sorting the shapes before rendering. The main function, <code>get_shapes</code>, uses the <code>layout_manager</code> to get the appropriate shapes for each node and its descendants and sorts the shapes based on their height using <code>height_comparator</code>. It uses an <code>ArrayPool</code> called <code>visible_nodes</code> and <code>signpost_nodes</code> to efficiently manage the nodes. It calls the <code>get_shapes_of_node</code> and <code>draw_bounding_box</code> helper functions to collect shapes and draw bounding boxes for debugging purposes. The <code>get_visible_and_signpost_nodes</code> method populates the <code>visible_nodes</code> and <code>signpost_nodes</code> with nodes that should be rendered.</p> <p>The <code>projection.js</code> file acts as the entry point for accessing all projection-related functionality. It imports functions from <code>pre_calc</code>, <code>re_calc</code>, <code>shape_manager</code>, <code>horizon_calc</code>, and <code>highlight</code>. It defines a <code>Projection</code> class that exposes methods for <code>pre_calc</code>, <code>calc_horizon</code>, <code>update_parent_horizon</code>, <code>highlight_propogate</code>, <code>re_calc</code>, and <code>get_shapes</code>. It uses a singleton pattern to ensure that only one <code>Projection</code> instance exists using the <code>get_projection</code> function.</p> <p>The <code>live_area_config.js</code> file defines the interactive areas of the tree and configures the actions that happen when these areas are clicked. It stores the <code>global_button_action</code> that triggers an event when the button is clicked and the <code>action</code> and <code>data</code> fields describe what should happen when the button is clicked. The configuration for these buttons is specific to certain parts of the tree, such as the <code>interior_low_res_circle</code>, <code>interior_high_res_text</code>, <code>interior_sponsor_text</code>, <code>interior_image</code>, <code>signpost</code>, <code>leaf_low_res_leafbase</code>, <code>leaf_sponsor_text</code>, <code>leaf_high_res_text</code>, <code>leaf_conservation_text</code> and <code>copyright</code>.</p> <p>The subdirectories within <code>projection</code> provide further organization:</p> <ul> <li> <p><code>horizon_calc</code>:  This directory contains the logic for calculating the \"horizon\" (bounding box) of nodes, which is used for layout and rendering. The <code>horizon_calc.js</code> file acts as a facade, allowing the user to select which type of horizon calculation to use, delegating the calculations to either <code>bezier_horizon_calc.js</code> or <code>polytomy_horizon_calc.js</code>.</p> </li> <li> <p><code>highlight</code>: This directory contains the logic for applying highlights to the OneZoom tree. The <code>highlight.js</code> file provides the functionality to define, resolve, apply, and manage highlights on the tree. The highlights are defined by strings, and the <code>resolve_highlights</code> function transforms these into structured objects with OZIDs, which are then applied to the tree.</p> </li> <li> <p><code>shapes</code>:  This directory contains the shape classes used for rendering to a Canvas context. Each class extends <code>BaseShape</code> and uses an <code>ObjectPool</code> for efficient reuse. The classes include <code>path_shape.js</code>, <code>arc_text_shape.js</code>, <code>line_to_shape.js</code>, <code>text_shape.js</code>, <code>move_to_shape.js</code>, <code>arc_shape.js</code>, <code>bezier_shape.js</code>, and <code>image_shape.js</code>. The <code>utils.js</code> file contains helper functions for shapes.</p> </li> <li> <p><code>layout</code>: This directory contains the core logic for laying out different tree projections. The <code>layout_manager.js</code> coordinates the layout process and the subdirectories (<code>AT</code>, <code>otop</code>, <code>polytomy</code>, <code>polytomy2</code>, and <code>life</code>) each contain specific layout implementations. It also includes base classes that are extended by the classes in the subdirectories: <code>node_layout_base.js</code>, <code>leaf_layout_base.js</code>, <code>branch_layout_base.js</code>, and <code>signpost_layout_base.js</code>. The <code>utils.js</code> file contains helper functions for layout.</p> </li> <li> <p><code>layout/AT</code>: This directory contains the layout implementation for the \"AT\" projection. It has customized implementations of <code>node_layout.js</code> and <code>leaf_layout.js</code>, and uses the base classes for <code>branch_layout.js</code> and <code>signpost_layout.js</code>.</p> </li> <li> <p><code>layout/otop</code>:  This directory provides the layout logic for a top-down view. It customizes <code>branch_layout.js</code>, <code>node_layout.js</code>, <code>signpost_layout.js</code>, and <code>leaf_layout.js</code> to create a unique visualization.</p> </li> <li> <p><code>layout/polytomy</code>: This directory contains layout adjustments for trees with polytomies. It customizes <code>branch_layout.js</code>, <code>node_layout.js</code>, and <code>leaf_layout.js</code>, and uses the base class for <code>signpost_layout.js</code>.</p> </li> <li> <p><code>layout/polytomy2</code>:  This directory is similar to <code>polytomy</code> but provides another specialized layout for polytomies. It customizes <code>branch_layout.js</code> and <code>node_layout.js</code>, and uses the base classes for <code>leaf_layout.js</code> and <code>signpost_layout.js</code>.</p> </li> <li> <p><code>layout/life</code>:  This directory provides a simple re-export of the base classes. This suggests that the core layout logic is handled in the base classes and these files are just used to specialize the layout for different parts of the life projection.</p> </li> <li> <p><code>pre_calc</code>: This directory contains the pre-calculation logic for different tree projections. The <code>pre_calc.js</code> file acts as a central manager, and the other files (<code>fern_pre_calc.js</code>, <code>polytomy_pre_calc.js</code>, <code>balanced_pre_calc.js</code>, <code>natural_pre_calc.js</code>, <code>spiral_pre_calc.js</code>) implement specific pre-calculation strategies for different tree visualizations.</p> </li> </ul> <p>In summary, the <code>projection</code> directory is crucial for the rendering of the OneZoom tree. It contains code to manage the layout, movement, drawing, and interactivity of the tree. The <code>projection.js</code> file serves as an entry point to this system and delegates to subdirectories and files to provide functionality, which is extensible and pluggable for different kinds of visualizations.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/projection/highlight/","title":"highlight","text":"<p>The <code>highlight</code> directory contains the core logic for applying highlights to the OneZoom tree. The primary file is <code>highlight.js</code>, which exports several functions:</p> <ul> <li><code>resolve_highlights(highlights, color_picker)</code>: This function is used to convert highlight strings (e.g., <code>\"path:@Mammalia\"</code>) or highlight objects into fully populated highlight objects. The highlight objects contain the highlight type (e.g., \"path\", \"fan\"), color, and the OZIDs of the nodes to highlight. The function uses <code>resolve_pinpoints</code> from <code>../../navigation/pinpoint.js</code> to convert pinpoints in the highlight string (e.g. \"@Mammalia\") into OZIDs.</li> <li><code>current_highlights()</code>: Returns an array of currently applied highlight objects. This data is stored in the <code>tree_state</code> (from <code>../../tree_state</code>).</li> <li><code>highlight_update(root_node, highlights)</code>: Applies a new list of highlight objects to the tree, starting from the root node. This function updates <code>tree_state.highlights</code> and calls <code>highlight_propogate</code> to update the highlight status for all nodes in the tree.</li> <li><code>highlight_propogate(node)</code>: This function recursively traverses the tree and updates the <code>highlight_status</code> for each node based on the given highlights. The <code>highlight_status</code> for each node tracks whether a highlight is <code>FUTURE</code>, <code>ACTIVE</code>, or <code>PAST</code>. The logic for how highlights are propagated depends on the highlight type:<ul> <li><code>fan</code>: Highlights all nodes below a specified pinpoint, unless they are in a list of exceptions.</li> <li><code>path</code>: Highlights the path between two nodes. If only one pinpoint is provided the path is from the root to the specified node.</li> </ul> </li> <li><code>highlights_for(node)</code>: Returns an array of the active highlight objects for a given node. Consecutive highlights of the same color are filtered out.</li> </ul> <p>In essence, <code>highlight.js</code> provides the functionality to define, resolve, apply, and manage highlights on the OneZoom tree. The highlights are defined by strings with a type, an optional color, and a set of pinpoints. The <code>resolve_highlights</code> function transforms these into structured objects with OZIDs, which are then applied to the tree through the <code>highlight_update</code> and <code>highlight_propogate</code> functions, while the <code>highlights_for</code> returns the highlights active for a given node.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/projection/horizon_calc/","title":"horizon_calc","text":"<p>The <code>horizon_calc</code> directory contains the logic for calculating the \"horizon\" of nodes in a tree, which is essentially their bounding box. This is used for layout and rendering of the tree. The core idea is that different kinds of tree projections will have different ways of calculating the bounding box, so the code supports a pluggable calculation.</p> <p>The directory contains these important files:</p> <ul> <li> <p><code>bezier_horizon_calc.js</code>: This file contains the <code>BezierHorizonCalc</code> class, which calculates the horizon (bounding box) of a node assuming that the tree branches are drawn as Bezier curves. The <code>calc_horizon</code> method computes the initial bounding box based on the Bezier curve control points and the node's arc. The <code>recalc_node_horizon</code> method adjusts the bounding box to include the bounding boxes of its children. </p> </li> <li> <p><code>polytomy_horizon_calc.js</code>: This file contains the <code>PolytomyHorizonCalc</code> class, which calculates the horizon of a node assuming a polytomy (a node with more than two children). The <code>calc_horizon</code> method calculates an initial bounding box for the node based on its start and end points and branch width.  It also expands to include the parent node. The <code>recalc_node_horizon</code> method adjusts the bounding box to include the bounding boxes of its children, similar to the bezier implementation.</p> </li> <li> <p><code>horizon_calc.js</code>: This file acts as a facade, allowing the user to select which type of horizon calculation to use. It imports the <code>BezierHorizonCalc</code> and <code>PolytomyHorizonCalc</code> classes. It defines the <code>set_horizon_calculator</code> function which selects the calculator to be used. The <code>calc_horizon</code> function calls the <code>calc_horizon</code> method of the selected calculator. The <code>update_parent_horizon</code> function recursively updates the horizon of a node and its parents.</p> </li> </ul> <p>In summary, the code provides a mechanism to calculate node bounding boxes that is extensible. The <code>horizon_calc.js</code> file acts as the single point of entry, delegating the calculations to the appropriate classes, <code>bezier_horizon_calc.js</code> or <code>polytomy_horizon_calc.js</code>. This design allows for easy addition of new horizon calculation methods as needed for new projection types, without modifying existing code.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/projection/layout/","title":"layout","text":"<p>The <code>OZtree/OZprivate/rawJS/OZTreeModule/src/projection/layout</code> directory contains the core logic for laying out different tree projections within the OZtree project. It includes a <code>layout_manager.js</code> file for coordinating the layout process and several subdirectories (<code>AT</code>, <code>otop</code>, <code>polytomy</code>, <code>polytomy2</code>, and <code>life</code>) each containing specific layout implementations. Additionally, it includes several base classes that are extended by the classes in the subdirectories.</p> <p>Here's a breakdown of the key components:</p> <ul> <li> <p><code>layout_manager.js</code>: This file acts as a central point for managing layout classes. It provides functions to set and retrieve the appropriate layout objects (branch, node, leaf, and signpost) that are used to render the tree. It uses <code>set_layout</code> to instantiate classes based on the projection, and then calls <code>get_signpost_shapes</code>, <code>get_leaf_shapes</code>, <code>get_interior_shapes</code>, and <code>get_branch_shapes</code> to retrieve the appropriate shapes.</p> </li> <li> <p><code>node_layout_base.js</code>: This file defines the base class for node layouts, <code>NodeLayoutBase</code>. It includes methods for calculating text dimensions, drawing images, and generating shapes for nodes. It also handles user interaction via hover effects and integrates with the <code>live_area_config</code> to register button events for clickable elements.</p> <ul> <li>The <code>get_shapes</code> method is the main method for generating the visual representation of a node. It calls several helper methods like <code>calc_twh</code>, <code>highlight_part_shapes</code>, <code>interior_circle_full_shapes</code>, <code>low_res_shapes</code>, and <code>high_res_shapes</code> to generate shapes for different scenarios and levels of detail.</li> <li>The class makes use of <code>ArcShape</code>, <code>TextShape</code>, <code>ImageShape</code>, and <code>ArcTextShape</code> from the <code>../shapes</code> directory, demonstrating the use of reusable shape components.</li> <li>The <code>copyright</code> method is used to draw a copyright symbol and handles user interactions, such as clicks, via the <code>live_area_config</code>.</li> </ul> </li> <li> <p>The <code>autopic_set_shapes</code> and <code>autopic_shapes</code> methods handle drawing images and copyright info for nodes.</p> <ul> <li>The high resolution functions use helper functions that determine text content and text position based on the properties of the node, including its common name, latin name, and specimen number.</li> <li>The <code>is_mouse_over_high_res_inner_circle</code> method determines when a user is hovering over the interior of a node so that it can be registered as a button.</li> <li>The <code>get_sponsor_text</code> method determines the text that should be displayed, if there is any.</li> <li>The <code>low_res_shapes</code> and <code>low_res_date_shapes</code> determine how to render text on nodes when the zoom level is low.</li> <li>The <code>interior_circle_shapes</code> and <code>interior_circle_full_shapes</code> methods draw the interior circles of nodes, which are sometimes interactive.</li> </ul> </li> <li> <p><code>leaf_layout_base.js</code>: This file provides the base class for leaf layouts, <code>LeafLayoutBase</code>. It includes methods for generating shapes and handling user interaction for leaf nodes.</p> <ul> <li>The <code>get_shapes</code> method orchestrates the drawing of leaves, calling helper methods like <code>get_fake_leaf_shapes</code> and <code>get_tip_leaf_shapes</code> for different rendering scenarios.</li> <li>The class leverages shapes from the <code>../shapes</code> directory, including <code>ArcShape</code>, <code>ArcTextShape</code>, <code>TextShape</code>, <code>PathShape</code>, <code>ImageShape</code>, <code>BezierShape</code>, <code>MoveToShape</code>, and <code>LineToShape</code>, to create a wide array of visual representations.</li> <li>The <code>get_sponsor_text</code> method determines the sponsorship text of a leaf and whether it is sponsored.</li> <li>The <code>loadingLeaf</code> method handles the drawing of leaves when the image has not loaded yet.</li> <li>The <code>fullLeaf</code> method draws the main aspects of the leaf and calls helper functions to display images, text, and sponsorship info depending on the size of the leaf.</li> <li>The <code>fullLeaf_sponsor</code> method draws the sponsorship text for the leaf.</li> <li>The <code>fullLeaf_detail1</code>, <code>fullLeaf_detail2</code>, and <code>fullLeaf_detail3_pics</code> methods draw different levels of detail to the leaves based on the zoom level.</li> <li>The <code>copyright</code> method draws a copyright symbol on a leaf and handles user interaction via the <code>live_area_config</code>.</li> <li>The <code>circle_cut_image</code> and <code>rounded_image</code> methods handle drawing an image for the leaf and making sure it is cropped correctly.</li> <li>The <code>naturalLeaf</code> method draws a leaf with a custom shape, while <code>randomNaturalLeaf</code> uses this method to select one of four possible leaf shapes.</li> <li>The <code>circularOutlinedLeaf</code>, <code>circularDottedLeaf</code>, and <code>ghostLeafBase</code> methods draw different simple shapes for leaves.</li> </ul> </li> <li> <p><code>branch_layout_base.js</code>: This file defines the base class for branch layouts, <code>BranchLayoutBase</code>. It includes methods for drawing Bezier curves for branches.</p> <ul> <li>The <code>get_shapes</code> method manages the main drawing of the branch.</li> <li>The <code>get_markings_list</code> method determines how highlights should be drawn.</li> </ul> </li> <li>The <code>set_bezier_shape</code> and <code>get_bezier_shapes</code> methods control how branches are drawn using <code>BezierShape</code>.</li> <li> <p>The <code>node_line_width</code> method controls the width of the line.</p> <ul> <li>The <code>draw_interior_circle</code> method draws the circle at the end of the branch, sometimes to mask a gap in the line.</li> </ul> </li> <li> <p><code>signpost_layout_base.js</code>: This file defines the base class for signpost layouts, <code>SignpostLayoutBase</code>, and includes methods for drawing labels.</p> <ul> <li>The <code>get_shapes</code> method is the main method for rendering signposts and calls helper methods to handle different parts of the rendering.</li> <li>The <code>calc_center_point</code> method determines the position and size of the signpost.</li> <li>The <code>pic_image_shapes</code>, <code>pic_outline_shapes</code>, <code>name_shapes</code>, <code>name_with_pic_shapes</code>, and <code>name_without_pic_shapes</code> are used to draw different elements of the signpost.</li> </ul> </li> <li> <p><code>utils.js</code>: This file, <code>utils.js</code>, provides utility functions for layout calculations.</p> <ul> <li><code>get_abs_x</code>, <code>get_abs_y</code>, and <code>get_abs_r</code> calculate absolute positions and radii based on a node's properties.</li> <li><code>substitute_variables</code> is a helper function for replacing variables in a string using a key-value object.</li> </ul> </li> </ul> <p>The subdirectories contain specific layout implementations, each extending the base classes:</p> <ul> <li> <p><code>AT</code>: This directory contains the layout implementation for the \"AT\" projection. It has custom implementations for <code>node_layout.js</code> (that handles <code>concestor</code> nodes with special text formatting and styling) and <code>leaf_layout.js</code> (that modifies the way leaves are displayed, including full leaves, fake leaves and move restrictions). The other two files do not override any of the base classes functionality.</p> </li> <li> <p><code>otop</code>: This directory provides the layout logic for a top-down view. It customizes branch rendering with thin blurred lines, clickable text labels for nodes, and a unique representation for \"human\" leaf nodes by fetching images from the UCAYA API. The signpost layout also fades in/out based on the zoom level.</p> </li> <li> <p><code>polytomy</code>: This directory contains layout adjustments for trees with polytomies. It customizes the <code>branch_layout.js</code> to ensure that branch lines are always visible, <code>node_layout.js</code> to change how nodes are rendered, and <code>leaf_layout.js</code> to change how fake leaves are drawn. The <code>signpost_layout.js</code> does not modify anything in the base class.</p> </li> <li> <p><code>polytomy2</code>: This directory is similar to <code>polytomy</code> but provides another specialized layout for polytomies, with a custom way to draw branches via <code>PathShape</code>, <code>LineToShape</code>, and <code>MoveToShape</code> objects.  The <code>leaf_layout.js</code> and <code>signpost_layout.js</code> files don't add any functionality beyond what is in the base classes.</p> </li> <li> <p><code>life</code>: This directory provides a simple re-export of the base classes. This suggests that the core layout logic is handled in the base classes and these files are just used to specialize the layout for different parts of the life projection.</p> </li> </ul> <p>In summary, this directory and its subdirectories provide a flexible system for laying out tree visualizations. The base classes define the fundamental structure and functionality, while the projection-specific subdirectories tailor these classes to create diverse and interactive tree views. The <code>layout_manager.js</code> allows for the selection of appropriate layout objects, and helper functions in <code>utils.js</code> provide a unified way to perform common calculations.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/projection/layout/AT/","title":"AT","text":"<p>The <code>OZtree/OZprivate/rawJS/OZTreeModule/src/projection/layout/AT</code> directory contains the layout implementations for the \"AT\" projection, which appears to be a specific type of tree visualization within the OZtree project. It includes layout classes for branches, nodes, signposts, and leaves. Each of these classes inherits from a corresponding base class located in the parent directory.</p> <p>Here's a breakdown of the key files:</p> <ul> <li> <p><code>branch_layout.js</code>: This file defines <code>ATBranchLayout</code>, which extends <code>BranchLayoutBase</code>. It doesn't add any custom functionality, so it likely uses the base class's behavior for branch layout.</p> </li> <li> <p><code>node_layout.js</code>: This file defines <code>ATNodeLayout</code>, which extends <code>NodeLayoutBase</code>. It customizes the header text and styling of nodes. Specifically:</p> <ul> <li>It handles <code>concestor</code> nodes (likely representing common ancestors) differently. It calls a <code>get_concestor_interior_header()</code> function to generate the header text. This function provides special text formatting, including the use of the <code>gpmapper</code> and <code>ageAsText</code> utility functions, based on whether the node represents a dated or undated ancestor.</li> <li>It adjusts <code>text_shape</code> properties for low resolution text. The position, width, and text size for <code>concestor</code> nodes are adjusted. Additionally the text content is determined based on whether or not the node is a <code>concestor</code> or has a <code>cname</code>, <code>latin_name</code>, or a <code>spec_num_full</code>.</li> <li>It imports a <code>color_theme</code> that is likely used to color text and shapes based on node properties.</li> </ul> </li> <li> <p><code>signpost_layout.js</code>:  This file defines a <code>SignpostLayoutBase</code> object. This object is exported directly without modification. It likely uses the base class's behavior for signpost layout.</p> </li> <li> <p><code>leaf_layout.js</code>: This file defines <code>ATLeafLayout</code>, which extends <code>LeafLayoutBase</code>. It customizes the appearance and behavior of leaf nodes:</p> <ul> <li>It overrides <code>get_fullleaf_r</code> and <code>get_sponsor_text_direction</code>, controlling leaf size and sponsor text positioning.</li> <li>It implements <code>get_tip_leaf_shapes</code> to generate shapes for leaf nodes, using <code>undeveloped_temp_leaf_shapes</code> or <code>full_leaf_shapes</code> based on <code>richness_val</code> and <code>full_children_length</code> of the node.</li> <li>It implements <code>get_fake_leaf_shapes</code> which is a visualization of nodes that are children, but below a certain radius.</li> <li>It uses <code>add_mr</code> (likely adding a move restriction) when creating the <code>full_leaf_shapes</code>.</li> <li>It uses <code>config</code> and <code>tree_state</code> objects.</li> </ul> </li> </ul> <p>In summary, this directory provides a set of layout classes specifically for the AT projection. The <code>node_layout.js</code> and <code>leaf_layout.js</code> files implement customized behavior. The other two files do not override any of the base classes functionality and may only be present for organization. The <code>ATNodeLayout</code> class adds specific text generation and layout logic, while the <code>ATLeafLayout</code> class modifies the way leaves are displayed and adds move restrictions, which suggests the layout may be interactive. These classes work together to define the visual appearance of the AT projection.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/projection/layout/life/","title":"life","text":"<p>This directory, <code>OZtree/OZprivate/rawJS/OZTreeModule/src/projection/layout/life</code>, contains files that define the layout of different parts of a life projection in the OZtree visualization. It uses a simple pattern where each file imports and re-exports a base class from the parent directory.</p> <p>The files are:</p> <ul> <li><code>branch_layout.js</code>: This file imports <code>BranchLayoutBase</code> from <code>../branch_layout_base</code> and exports it as the default export. This file is responsible for defining the layout of branches within the life projection.</li> <li><code>node_layout.js</code>: This file imports <code>NodeLayoutBase</code> from <code>../node_layout_base</code> and exports it as the default export. This is responsible for defining the layout of nodes within the life projection.</li> <li><code>signpost_layout.js</code>: This file imports <code>SignpostLayoutBase</code> from <code>../signpost_layout_base</code> and exports it as the default export. This is responsible for defining the layout of signposts (or labels) within the life projection.</li> <li><code>leaf_layout.js</code>: This file imports <code>LeafLayoutBase</code> from <code>../leaf_layout_base</code> and exports it as the default export. This file is responsible for defining the layout of leaves within the life projection.</li> </ul> <p>These files all follow the same pattern of importing a base class and then re-exporting it, which suggests that the core layout logic is handled in the base classes found in the parent directory, and these files are just used to specialize the layout for different parts of the life projection.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/projection/layout/otop/","title":"otop","text":"<p>The <code>otop</code> directory contains the layout logic for a specific projection of the OZtree, likely a top-down view. It includes files that define how different parts of the tree (branches, nodes, signposts, and leaves) are rendered. These files extend base classes from the parent directory, <code>../</code> (which contains <code>branch_layout_base.js</code>, <code>node_layout_base.js</code>, <code>signpost_layout_base.js</code>, and <code>leaf_layout_base.js</code>).</p> <p>Here's a breakdown of the key files and how they work:</p> <ul> <li> <p><code>branch_layout.js</code>: This file defines the layout for branches in the <code>otop</code> projection.</p> <ul> <li>It extends <code>BranchLayoutBase</code> to customize how branches are drawn.</li> <li>Branches are rendered as thin lines with a <code>shadowBlur</code> effect to improve visual clarity, with the amount of blur dependent on branch length.</li> <li>The root branch is extended off screen.</li> <li>It uses dashed lines for highlights rather than nested lines to avoid visual clutter.</li> <li>It overrides <code>draw_interior_circle</code> to disable drawing circles at branch joins.</li> </ul> </li> <li> <p><code>node_layout.js</code>: This file defines the layout for nodes.</p> <ul> <li>It extends <code>NodeLayoutBase</code>.</li> <li>It disables the drawing of interior circles.</li> <li>It renders low-resolution text for node names but makes them clickable when hovered over.</li> <li>It offsets and styles the text slightly, including a stroke to make it more visible.</li> </ul> </li> <li> <p><code>signpost_layout.js</code>: This file handles the layout of signposts, which are labels or indicators associated with nodes.</p> <ul> <li>It extends <code>SignpostLayoutBase</code>.</li> <li>Signposts are positioned above their associated node.</li> <li>The size of the signpost is determined by the bounding box of the node's children.</li> <li>The opacity of signposts are faded in/out dependent on zoom level.</li> <li>It draws a circle behind the signpost's image to provide a background for the text and colour the node.</li> <li>It overrides <code>name_without_pic_shapes</code> so that text nodes and picture nodes are rendered consistently.</li> </ul> </li> <li> <p><code>leaf_layout.js</code>: This file manages the layout of leaves, which are the terminal nodes of the tree.</p> <ul> <li>It extends <code>LeafLayoutBase</code>.</li> <li>It contains special logic to render human nodes, which have a unique layout.</li> <li>For other leaves, it uses a <code>circularLeafBase</code> for a circular representation.</li> <li>The human leaf fetches user data from the UCAYA API and displays a circle of profile images with challenge rings.</li> <li>It draws a wash over the images of human leaves.</li> <li>It uses <code>circle_cut_image</code> to clip images to a circular shape.</li> <li>It handles fake leaves differently, drawing them as semi-circles or fan-like shapes to indicate that the node has been collapsed.</li> <li>It implements <code>fullLeaf_detail3_pics</code> to add a wash over full leaf images.</li> </ul> </li> </ul> <p>These files work together to provide a specific visual representation of the OZtree. They use a combination of shapes (<code>BezierShape</code>, <code>ArcShape</code>, <code>TextShape</code>, and <code>ImageShape</code>) from the parent <code>shapes</code> directory (<code>../../shapes</code>) to render the different elements of the tree. Each layout file is responsible for calculating the position and appearance of its corresponding element type, while relying on shared configuration and theming logic from the <code>../../../themes</code> and <code>../../../global_config</code> directories. The <code>add_mr</code> function from <code>../../move_restriction.js</code> is used to define clickable / hoverable areas for each object.</p> <p>The <code>otop</code> directory provides a specific visual style with thin blurred branches, clickable text labels, and special treatment for the \"human\" leaf node.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/projection/layout/polytomy/","title":"polytomy","text":"<p>The <code>polytomy</code> directory contains files that define how nodes, branches, and leaves are rendered in a polytomy (a node with more than two children). These files customize the appearance and behavior of the tree structure when it has polytomies, overriding the default settings from <code>../node_layout_base</code>, <code>../branch_layout_base</code>, <code>../signpost_layout_base</code>, and <code>../leaf_layout_base</code>.</p> <p>Here's a breakdown of the key files and how they work:</p> <ul> <li> <p><code>branch_layout.js</code>: This file defines the <code>PolytomyBranchLayout</code> class, which extends <code>BranchLayoutBase</code>. It customizes how branches are drawn, particularly when a node has multiple children.</p> <ul> <li>The <code>node_line_width</code> method ensures that branch lines are always at least 1 pixel wide.</li> <li>The <code>get_markings_list</code> method modifies the appearance of branch highlights, setting them to use dashes instead of nested lines when branches are very thin.</li> <li>The <code>draw_interior_circle</code> method is overridden to prevent drawing circles at branch joins, which is a standard behavior in other layouts.</li> </ul> </li> <li> <p><code>node_layout.js</code>: This file defines the <code>PolytomyNodeLayout</code> class, which extends <code>NodeLayoutBase</code>. It is responsible for drawing the visual representation of a node in the tree.</p> <ul> <li>The <code>calc_twh</code> method calculates the width and height of the node based on its <code>rvar</code> and <code>arcr</code> properties.</li> <li>The <code>interior_circle_shapes</code> method generates the shapes for the interior circle of the node, including handling hover effects. It uses <code>ArcShape</code> to create the circle. When nodes are small or <code>config.projection.interior_circle_draw</code> is false, no interior circle is drawn. If a user hovers over the interior of a circle it is registered as a button.</li> </ul> </li> <li> <p><code>signpost_layout.js</code>: This file simply imports and exports <code>SignpostLayoutBase</code>. It does not appear to have any unique functionality for polytomies.</p> </li> <li> <p><code>leaf_layout.js</code>: This file defines the <code>PolytomyLeafLayoutBase</code> class, which extends <code>LeafLayoutBase</code> and customizes the appearance of leaves (terminal nodes) in the tree.</p> <ul> <li>The <code>fullLeafBase</code> method is overridden from the base class to avoid drawing a background around a leaf when it is small.</li> <li>The <code>get_fake_leaf_shapes</code> method is used to draw the fake leaves that appear when a node has too many children to display. If a node has a small number of children it uses Bezier curves. Otherwise, it uses an <code>ArcShape</code> to draw a semicircle.</li> </ul> </li> </ul> <p>These files work together to provide a specialized rendering style for trees containing polytomies. <code>branch_layout.js</code>, <code>node_layout.js</code>, and <code>leaf_layout.js</code> each have a modified base class that works to create the unique characteristics of a tree that contains polytomies. <code>signpost_layout.js</code> doesn't modify anything in the base class.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/projection/layout/polytomy2/","title":"polytomy2","text":"<p>The <code>OZtree/OZprivate/rawJS/OZTreeModule/src/projection/layout/polytomy2</code> directory contains files that define the layout of a specific type of tree visualization called a \"polytomy\". A polytomy is a node in a tree that has more than two children, unlike a traditional binary tree. The files in this directory provide a specialized layout for these nodes, overriding the default behavior. </p> <ul> <li> <p><code>branch_layout.js</code>: This file defines how branches are drawn in a polytomy. It extends <code>BranchLayoutBase</code> and uses <code>PathShape</code>, <code>LineToShape</code>, and <code>MoveToShape</code> to draw a line between the start and end points of each branch. The <code>get_shapes</code> method calculates the position of these lines. By default, the line width is set to a fixed size, but this can be changed to scale with the node's branch width. This class is responsible for creating the visual representation of a branch, including its color.</p> </li> <li> <p><code>node_layout.js</code>: This file defines the layout of a node. It extends <code>NodeLayoutBase</code> and calculates the width and height of a node. The <code>calc_twh</code> method calculates dimensions based on <code>node.rvar</code> and <code>node.arcr</code> properties, and specifies the node shape. This is an important method because the nodes form the skeleton of the tree.</p> </li> <li> <p><code>signpost_layout.js</code>: This file overrides the default signpost layout behavior by extending the <code>SignpostLayoutBase</code> class without adding any specific logic. It's essentially a placeholder that uses the default signpost layout, which is used to position additional labels or information around nodes.</p> </li> <li> <p><code>leaf_layout.js</code>: Similar to <code>signpost_layout.js</code>, this file overrides the default leaf layout behavior. It extends <code>LeafLayoutBase</code> without adding specific logic, and relies on the default leaf layout for visual representation of the leaf nodes in the tree. This differs from <code>node_layout.js</code> as it handles only leaf nodes, which are nodes at the end of a tree branch.</p> </li> </ul> <p>These files work together to create a specific layout for polytomy trees. They customize the branch, node, signpost, and leaf drawing based on a custom layout by extending base classes and adding the specifics for the <code>polytomy2</code> type. This modular approach allows easy customization for other types of trees in the project.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/projection/pre_calc/","title":"pre_calc","text":"<p>This directory contains the pre-calculation logic for different tree projections. The files here define how the tree nodes are positioned and sized before rendering, based on the chosen view type.</p> <ul> <li> <p><code>fern_pre_calc.js</code>: Implements the pre-calculation for a \"fern\" view. This projection positions nodes to resemble a fern-like structure, with alternating branching directions and dynamically adjusted angles. The <code>_pre_calc</code> function recursively calculates Bezier curve control points, angles (<code>arca</code>), and scale factors (<code>nextr</code>) for each node and its children. The <code>pre_calc</code> function initializes the root node's properties. <code>set_horizon_calculator</code> is called to set the appropriate horizon calculator.</p> </li> <li> <p><code>polytomy_pre_calc.js</code>: Handles the pre-calculation for \"polytomy\" view, which is characterized by nodes branching out radially. The <code>_pre_calc</code> function calculates the angles and positions of child nodes based on their richness values, ensuring that branches do not overlap. The <code>pre_calc</code> function sets up the root node. The <code>setup</code> function sets the horizon calculator to <code>polytomy</code>.</p> </li> <li> <p><code>balanced_pre_calc.js</code>: Defines pre-calculation for a \"balanced\" view. It calculates positions of child nodes, attempting to create a balanced tree structure. The <code>_pre_calc</code> function determines branch angles and scale based on the richness values of the children. The <code>pre_calc</code> function initializes the root node. The <code>setup</code> function sets the horizon calculator to <code>bezier</code>.</p> </li> <li> <p><code>natural_pre_calc.js</code>: Implements the pre-calculation for a \"natural\" view which adjusts branch angles and lengths based on the richness values of child nodes. The <code>_pre_calc</code> function calculates branch angles and scale factors dynamically. The <code>pre_calc</code> function initializes the root node, and the <code>setup</code> function sets the horizon calculator to <code>bezier</code>.</p> </li> <li> <p><code>spiral_pre_calc.js</code>: Provides pre-calculation for a \"spiral\" view. The <code>_pre_calc</code> function calculates child node positions and angles to create a spiral-like branching structure. This file also includes logic to handle undefined properties, ensuring that the initial state of the nodes is handled correctly. The <code>pre_calc</code> function sets up the root node and the <code>setup</code> function sets the horizon calculator to <code>bezier</code>.</p> </li> <li> <p><code>pre_calc.js</code>: This file acts as a central manager for all pre-calculation modules. It imports each of the pre-calculation modules (<code>spiral_pre_calc</code>, <code>natural_pre_calc</code>, <code>fern_pre_calc</code>, <code>balanced_pre_calc</code>, and <code>polytomy_pre_calc</code>). It provides functions to set the active pre-calculator using <code>set_pre_calculator</code> and to run the pre-calculation using <code>pre_calc</code>. The <code>set_pre_calculator</code> function selects the pre-calculation module based on the provided <code>viewtype</code>.</p> </li> </ul> <p>These files work together to enable different tree visualization styles. The <code>pre_calc.js</code> module is the main entry point for selecting and executing a specific pre-calculation strategy defined in the other files. Each pre-calculation module sets up the Bezier curves and positions for the nodes, which are then used to render the tree.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/projection/shapes/","title":"shapes","text":"<p>This directory contains the shape classes used for rendering to a Canvas context. These classes are used by the projection code to display the tree. Each class extends <code>BaseShape</code> and has a static <code>obj_pool</code> property that is an <code>ObjectPool</code> instance. This allows for efficient reuse of shape objects, reducing garbage collection overhead. Each class also has a <code>render</code> method that takes a Canvas context as an argument and draws the shape onto the canvas.</p> <p>Here's a breakdown of the key files:</p> <ul> <li><code>base_shape.js</code>: This is the base class for all shapes. It provides a constructor that sets properties on the shape instance and a static <code>create</code> method to get an instance from the object pool. The <code>free</code> method returns the shape to the object pool.</li> <li><code>utils.js</code>: This file contains utility functions used by other shape files, including <code>set_data</code> to copy properties from one object to another, <code>get_abs_x</code>, <code>get_abs_y</code> and <code>get_abs_r</code> which help to convert relative coordinates to absolute coordinates given a node and a value.</li> <li><code>path_shape.js</code>: This class represents a path composed of other shapes. The <code>path</code> property is an array of shapes that are rendered in order. The <code>follow_path</code> method calls the <code>follow_path</code> method of all child shapes.</li> <li><code>arc_text_shape.js</code>: This shape renders text along an arc. The <code>text</code> property holds the text string and other properties control the arc and font properties.</li> <li><code>line_to_shape.js</code>: This shape draws a line from the current path point to the specified <code>x</code>, <code>y</code> coordinates.</li> <li><code>text_shape.js</code>: This shape renders text. It uses functions from the <code>util</code> module to automatically size and style text.</li> <li><code>move_to_shape.js</code>: This shape moves the current path point to the specified <code>x</code>, <code>y</code> coordinates.</li> <li><code>arc_shape.js</code>: This shape draws an arc or a circle.  It allows for gradients as a fill.</li> <li><code>bezier_shape.js</code>: This shape draws a bezier curve. It also supports drawing markings along the path, such as dashes and shadows. It stores a list of path points which can be either lines or bezier curves.</li> <li><code>image_shape.js</code>: This shape renders an image. It uses the <code>get_image</code> function from <code>../../image_cache</code> to load images. It supports drawing parts of an image and setting the alpha level. It also supports applying a border radius or drawing a circle.</li> </ul> <p>These shape classes work together to provide a flexible and efficient way to render the tree. The <code>path_shape.js</code> can group many other shapes together to create more complicated shapes. The object pooling helps with performance by minimizing garbage collection. The <code>util.js</code> file contains the methods that help to do the calculations needed to perform the renderings.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/render/","title":"render","text":"<p>The <code>render</code> directory contains the core rendering logic for the OZtree module. It primarily manages the canvas, determines when to refresh the view, and delegates the actual drawing to individual shape renderers.</p> <p>The key file in this directory is <code>renderer.js</code>. This file acts as the central hub for rendering operations. Here's a breakdown of its functionality:</p> <ul> <li>Canvas Management: It sets up and manages the main canvas (<code>canvas</code>) and a background canvas (<code>bg_canvas</code>). It obtains 2D rendering contexts (<code>context</code> and <code>bg_context</code>) for both. It also handles scaling the canvas based on the device pixel ratio for high-resolution displays.</li> <li>Refresh Control: The <code>refresh()</code> function is the primary entry point for triggering a re-render of the tree. It first calls <code>reanchor_and_dynamic_load_tree()</code> to potentially re-center the tree and load new nodes as needed. It then checks if a refresh is needed using the <code>need_refresh()</code> function. If a refresh is necessary, it fetches the shapes to be rendered using <code>controller.projection.get_shapes()</code>, clears the canvas, and redraws the shapes.</li> <li>Dynamic Refresh Logic: The <code>need_refresh()</code> function determines if a full re-render is necessary, or whether the previous view is still valid. It increments <code>render_id</code> on each call and checks if a certain interval has passed (<code>render_id % 60 === 0</code>). It also checks if view state variables like <code>tree_state.xp</code>, <code>tree_state.yp</code>, or <code>tree_state.ws</code> have changed, or if the button action has changed, indicating a need to re-render. This approach avoids unnecessary redraws, making the application more efficient.</li> <li>Shape Rendering: The <code>refresh_by_redraw()</code> function is responsible for iterating over the shapes fetched by the projection and calling each shape's <code>render()</code> method on the rendering context. It also handles resetting the canvas transform and scaling it for device pixel ratio.</li> <li>Controller Interaction: The <code>renderer.js</code> file interacts with a controller object (set via <code>add_controller()</code>) that is responsible for managing the tree structure, calculations, and projections. It calls methods like <code>controller.reanchor()</code>, <code>controller.dynamic_load_and_calc()</code>, <code>controller.projection.get_shapes()</code>, and <code>controller.re_calc()</code> to update the tree before rendering.</li> <li>Cursor Management: The <code>update_cursor()</code> function manages the cursor style based on user interaction and actions within the tree.</li> <li>Frame Drawing: The <code>draw_frame()</code> function is used to draw a new frame regardless of the state of the tree. It is called when tree layout or the underlying data changes.</li> </ul> <p>In summary, <code>renderer.js</code> is the core rendering logic for the OZtree module. It manages the canvas, controls the render cycle, and orchestrates the process of drawing the tree's visual representation on screen. It works in tandem with other modules like the tree state, the projection, and the button manager to determine what and how to render.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/themes/","title":"themes","text":"<p>This directory (<code>OZtree/OZprivate/rawJS/OZTreeModule/src/themes</code>) contains the code that defines the visual themes for the OneZoom tree. It includes several JavaScript files that define different color schemes and how they are applied to the tree's various elements.</p> <p>The main files in this directory are:</p> <ul> <li><code>index.js</code>: This file acts as a central registry for all available themes. It imports each theme file and exports them as named objects, making them available to the rest of the application. This file also includes a comment explaining how to use themes from the console using <code>onezoom.controller.change_color_theme('_____')</code>.</li> <li><code>color_theme.js</code>: This file provides the <code>ColorTheme</code> class and its associated methods. The <code>ColorTheme</code> class is responsible for resolving color values from theme objects, including handling cases where the value is a function, allowing colors to change based on node properties, and applying alpha transparency. The <code>pick_marked_area_color</code> method implements logic to choose a color for highlighting marked areas on the tree.</li> <li><code>otop_theme.js</code>: This file defines the \"otop\" theme. This theme defines specific colors for different elements of the tree, such as branches, interior elements (circles, text, etc.), signposts, and leaves. It also contains functions, <code>location_color</code> and <code>endangered_location_color</code>, that determine colors based on a node's location in the tree and its endangered status.</li> </ul> <p>The remaining files define various themes:</p> <ul> <li><code>at_theme.js</code>: Defines a theme with a primary color of <code>rgb(207,180,95)</code>. Includes functions <code>leafcolor1</code>, <code>leafcolor2</code>, and <code>leafcolor3</code> that determine leaf colors.</li> <li><code>at_colour_blind_friendly.js</code>: A color-blind-friendly version of the <code>at_theme.js</code>. It merges the base theme with an empty object, suggesting that it's using the base theme colors.</li> <li><code>IUCN_explicit_theme.js</code>: Defines a theme that uses the IUCN red list status of nodes to determine their colors. It includes functions like <code>get_redlist_color</code> and <code>get_redlist_color2</code> that return different colors based on the conservation status.</li> <li><code>IUCN_explicit_colour_blind_friendly.js</code>: A color-blind-friendly version of the <code>IUCN_explicit_theme.js</code>.</li> <li><code>natural_theme.js</code>: Defines a \"natural\" theme that uses various shades of green, brown, and grey. It also includes functions <code>leafcolor1</code>, <code>leafcolor2</code>, and <code>leafcolor2b</code>.</li> <li><code>natural_colour_blind_friendly.js</code>: A color-blind-friendly version of the <code>natural_theme.js</code>.</li> <li><code>popularity_theme.js</code>: Defines a theme where node colors are based on their popularity, using a gradient from blue to red. It includes the function <code>get_color_by_popularity</code>, which interpolates the gradient. The file also defines <code>min_popularity</code> and <code>max_popularity</code> variables.</li> <li><code>popularity_colour_blind_friendly.js</code>: A color-blind-friendly version of the <code>popularity_theme.js</code>.</li> <li><code>genetic_conservation_theme.js</code>: Defines a theme for genetic conservation, using a color gradient based on the age of a branch. It includes functions <code>age</code>, <code>branch_colour</code>, <code>node_fill_colour</code>, and <code>node_stroke_colour</code>, which compute node color based on age and other factors.</li> </ul> <p>These files work together to provide a flexible theming system for the OneZoom tree. The <code>index.js</code> file makes the various themes available, while the <code>color_theme.js</code> file provides the logic for retrieving the correct colors from the theme objects. The theme files themselves define the specific color palettes and rules for different visual styles.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/tour/","title":"tour","text":"<p>The <code>tour</code> directory contains the core logic for creating and managing interactive tours within the OneZoom application. It consists of the following key components:</p> <ul> <li>The <code>handler</code> subdirectory contains modules that enhance tour stops with specific functionalities. These include managing tour progress, handling media playback (Vimeo, YouTube, and HTML5 audio/video), applying querystring options, and controlling UI events, all working together to create a rich interactive experience.</li> <li><code>Screensaver.js</code> extends the base <code>Tour</code> class to create a looping, automatic tour that starts after a period of inactivity. It manages the automatic activation of the tour and ensures that it loops correctly either forwards or back and forth.</li> <li><code>Tour.js</code> is the main class responsible for managing tours. It parses tour definitions from HTML, manages the state of the tour (inactive, playing, paused), handles navigation between tour stops, and applies the handlers from the <code>handler</code> subdirectory.</li> <li><code>TourStop.js</code> represents an individual stop within a tour. It manages the state of the tour stop (inactive, transitioning in/out, active), handles transitions to and from other tour stops, and manages blocking and unblocking the tour based on the stop's logic and user interactions.</li> </ul> <p>Here's how the components work together:</p> <ol> <li>Tour Definition: A tour is defined in an HTML document with each tour stop marked with the class <code>container</code>. Each <code>container</code> can have data attributes to define its behavior.</li> <li>Tour Initialization: The <code>Tour</code> class parses the HTML document and creates <code>TourStop</code> objects for each tour stop. It sets up the handlers to provide additional functionality to each stop.</li> <li>Tour Navigation: The <code>Tour</code> class manages the overall tour progression. It moves between <code>TourStop</code>s, handles user interactions like pause/resume, and manages the tour's state.</li> <li>TourStop Lifecycle: Each <code>TourStop</code> manages its own lifecycle. It handles transitions, waits for timers, manages blocks to prevent automatic progression, and controls when it is active or inactive.</li> <li>Screensaver Mode: The <code>Screensaver</code> class extends the <code>Tour</code> class to add automatic activation and looping behavior for use as a screensaver.</li> <li>Handlers: The modules in the <code>handler</code> subdirectory interact with and enhance tour stops. They control the visual progress of the tour with <code>TsProgress.js</code>, handle video playback with <code>Vimeo.js</code> and <code>Youtube.js</code> and <code>HtmlAV.js</code>, change tree state with <code>QsOpts.js</code>, and manage user inputs with <code>UIEvents.js</code>.</li> </ol> <p>In summary, the <code>tour</code> directory provides the fundamental building blocks for creating interactive, guided experiences within the OneZoom application, making use of individual handlers, <code>Tour</code> and <code>TourStop</code> objects to manage the overall tour experience, and <code>Screensaver</code> to provide an automated way to highlight areas of the tree.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/tour/handler/","title":"handler","text":"<p>The <code>tour/handler</code> directory contains JavaScript modules that add functionality to tour stops within the OneZoom application. Each file exports a <code>handler</code> function that takes a <code>tour</code> object as an argument. This <code>tour</code> object is used to interact with and modify the behavior of tour stops.</p> <p>Here's a breakdown of the key files and how they work:</p> <ul> <li> <p><code>TsProgress.js</code>: This file manages the progress of a user through a tour. It adds visual cues to a <code>&lt;select&gt;</code> dropdown with the class <code>ts-progress</code> inside a tour stop. The handler uses browser <code>localStorage</code> (or in-memory storage if <code>localStorage</code> is unavailable) to track which tour stops a user has visited. The visual cues are prepended to each <code>&lt;option&gt;</code> element in the select dropdown, with  \"\u2610\" indicating a tour stop not yet visited, \"\u25a3\" indicating a visited tour stop, and \"\u21e8\" to indicate the current tour stop. A <code>progressSummary</code> export allows other parts of the code to check the state of the tour.</p> </li> <li> <p><code>Vimeo.js</code>: This file handles Vimeo video playback within tour stops. It uses the Vimeo API to control video playback and block tour progression while a video is playing. The handler searches for <code>&lt;iframe&gt;</code> elements with the class <code>embed-vimeo</code>, and the <code>data-ts_autoplay</code> attribute, specifying the tourstop states in which the video should autoplay. It loads the Vimeo API if it's not already loaded and then attaches event listeners to each video. It also ensures videos are paused when the tour is paused or the tourstop containing the video is not visible, and adds blocks to stop the tour progressing past the current tourstop whilst the video is playing.</p> </li> <li> <p><code>QsOpts.js</code>: This file handles querystring options for tourstops. It uses the <code>data-qs_opts</code> attribute on tour stop containers to apply and revert querystring options to the OneZoom tree. When a tour stop with <code>data-qs_opts</code> becomes active, the handler will update the tree's state by setting any relevant <code>URLSearchParams</code> based on the attribute, such as highlighting or language. When the tour stop becomes inactive (or the tour is exited), the handler will revert these changes. This allows for dynamic modification of the tree based on the tour progression.</p> </li> <li> <p><code>HtmlAV.js</code>: This module is similar to <code>Vimeo.js</code>, but handles standard HTML5 <code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code> elements. It searches for these elements within a tour stop, using the <code>data-ts_autoplay</code> attribute to determine when to autoplay them. It blocks tour progression while media is playing. Similar to <code>Vimeo.js</code>, it ensures the media is paused when the tour is paused or the tour stop is not visible.</p> </li> <li> <p><code>Youtube.js</code>: This file handles YouTube video playback within tour stops. It uses the YouTube Iframe API to control playback and block tour progression while a video is playing. Like <code>Vimeo.js</code> and <code>HtmlAV.js</code>, it ensures the video is paused when the tour is paused or the tourstop is hidden, and reads the <code>data-ts_autoplay</code> to determine when to automatically play a video.</p> </li> <li> <p><code>UIEvents.js</code>: This file manages user interface events within tour stops. It listens for clicks on elements with classes such as <code>tour_forward</code>, <code>tour_backward</code>, <code>tour_exit</code>, and <code>tour_resume</code> to control tour navigation. It also handles changes to <code>&lt;select&gt;</code> elements with the class <code>tour_goto</code> to navigate directly to a specific tour stop. Additionally, it implements a drag-to-resize feature on tour stop headers, with the ability to collapse a tour stop (and potentially exit the tour) by dragging the header. It listens to document visibility changes, and blocks the tour when a tab is hidden.</p> </li> </ul> <p>These files work together to provide a rich and interactive tour experience within the OneZoom application. They allow for dynamic tree manipulation, multimedia integration, and user-friendly navigation. Each handler focuses on a specific aspect of tour functionality, making the code modular and maintainable.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/ui/","title":"ui","text":"<p>The <code>ui</code> directory contains code for the user interface elements of the OneZoom tree. This includes components for search, tour lists, and leaf drawing.</p> <ul> <li> <p><code>tours_list.js</code> is responsible for managing the display of tours.</p> <ul> <li>The <code>sortList</code> function orders the list of tours based on their progress (in progress, untouched, finished), and updates the progress meter. It uses the <code>progressSummary</code> function imported from <code>../tour/handler/TsProgress.js</code> to get the progress of each tour.</li> <li>The <code>teaseTour</code> function selects a tour to highlight, prioritizing in-progress tours, then unfinished tours.</li> </ul> </li> <li> <p><code>search.js</code> handles the search functionality, populating the dropdown with results from the API.</p> <ul> <li><code>searchPopulate</code> is the callback function that processes the search results, populating the dropdown menu with links to matching tree nodes and tours. It handles sponsored results differently from normal results and uses <code>compile_names</code> and <code>compile_extra</code> to generate the HTML for each result. It also uses the <code>OZstrings</code> object to get translated strings, such as \"Tours\", \"SponsorHits\", and \"Search results\".</li> <li><code>setup_location_list</code> takes a JSON list of locations, and uses <code>onezoom.utils.process_taxon_list</code> to create a list of links in the search dropdown. It calls <code>create_location_dd_element</code> to generate the HTML for each result.</li> <li><code>create_location_dd_element</code> creates a <code>&lt;dd&gt;</code> element for each location search result that is also draggable with a <code>dragstart</code> listener that allows the item to be dragged to another part of the interface.</li> <li>The <code>recent_places</code> variable uses <code>localStorage</code> to remember recently searched places. The <code>push_recent_place</code>, <code>add_element_to_recents_list</code>, <code>update_recents_list</code>, <code>clear_recents</code> and <code>setup_recents_list</code> functions work together to manage the recent search results shown at the top of the search dropdown.</li> <li><code>get_search_result_from_element</code> extracts data from a search result element.</li> </ul> </li> <li> <p><code>leaf_draw.js</code> contains functions for drawing leaves and related elements on a canvas. It provides a variety of functions for creating different leaf styles.</p> <ul> <li><code>ghostLeafBase</code> and <code>fullLeafBase</code> create the basic shapes for leaves, either circular or natural, and allow them to be filled with colors defined by a theme. The <code>node_eval</code> function allows colors to vary based on node properties, allowing different leaves to appear based on their characteristics (e.g. redlist status) and the chosen theme.</li> <li><code>ghostLeaf</code> and <code>fullLeaf</code> are the main functions for drawing leaves with text, images, and sponsorship information. They manage the different levels of detail based on the size of the leaf, as well as click and touch events. They use various helper functions like <code>autotext</code>, <code>autotext2</code>, <code>autotext3</code>, <code>circle_cut_image</code>, <code>rounded_image</code>, and <code>copyright</code> to draw the different elements of the leaf.</li> <li><code>loadingLeaf</code> is a simplified leaf drawing function for when data is loading.</li> <li>Other functions like <code>circularOutlinedLeaf</code>, <code>circularDottedLeaf</code>, <code>naturalLeaf</code>, <code>randomNaturalLeaf</code>, <code>arcText</code> draw the basic leaf shapes and add circular text, used by <code>ghostLeaf</code> and <code>fullLeaf</code>.</li> <li>The file also defines colors and styles for leaves using a <code>natural_theme</code> that can be found in <code>../themes/natural_theme.js</code>.</li> </ul> </li> <li> <p><code>search_manager.js</code> manages communication with the search API.</p> <ul> <li>The <code>SearchManager</code> class provides the functionality for querying the API and processing the results into a usable format.</li> <li>The <code>full_search</code> method takes a search string and a callback function, and it sends the query to the API, calling back with the results. It will search for a normal string or a sponsorship string depending on the content of the search. It also manages a timeout, so that if multiple searches are made in quick succession, only the last one will be sent to the server.</li> <li><code>searchForTree</code>, and <code>searchForSponsor</code> make the API requests.</li> <li>The <code>lookup_nodes</code> function fetches the details of a set of OneZoom nodes, using the <code>node_details_api</code> to make the API request and then combining the results to call the callback.</li> <li>The <code>populateBySponsorResults</code>, <code>populateByNodeResults</code>, and <code>compile_searchbox_data</code> are used to process the results returned from the API into a format suitable for use in the search dropdown. The <code>overall_search_score</code>, <code>match_score</code>, <code>pluralize</code>, <code>vowel</code>, and <code>dedash</code> functions work together to provide a quality score for a search result.</li> <li>It uses the <code>api_manager</code> from <code>../api/api_manager</code> to make the API calls.</li> <li>The <code>node_to_pinpoint</code> function from <code>../navigation/pinpoint</code> is used to create the pinpoint string for each result.</li> </ul> </li> </ul> <p>These files work together to provide the user interface for the OneZoom tree. The <code>search_manager.js</code> file is responsible for fetching the data from the API, the <code>search.js</code> file is responsible for displaying the data in the search dropdown, <code>tours_list.js</code> displays the tours, and <code>leaf_draw.js</code> draws the leaves on the tree.</p>"},{"location":"OZprivate/rawJS/OZTreeModule/src/util/","title":"util","text":"<p>The <code>util</code> directory contains a number of utility functions and classes that are used throughout the OZtree project. The files are organized into functional areas, such as math, drawing, and object pooling. Here's a breakdown of the key components:</p> <ul> <li> <p><code>index.js</code>: This file acts as a central export point, re-exporting all of the other modules in this directory. This allows other parts of the project to import everything from <code>src/util</code> with a single line like <code>import * as util from './util';</code>.</p> </li> <li> <p><code>object_pool.js</code>: This file defines an <code>ObjectPool</code> class which is used to manage a pool of objects of a given type. Instead of creating new objects each time they are needed, objects are created once and then re-used from the pool. This pattern helps to improve performance by reducing the overhead of object creation and garbage collection. The pool will also expand in size as needed.</p> </li> <li> <p><code>array_pool.js</code>: This file defines an <code>ArrayPool</code> class which manages a pool of arrays. It is similar to <code>object_pool.js</code> but for arrays. The pool will also expand in size as needed.</p> </li> <li> <p><code>draw.js</code>: This file contains functions for drawing text on a canvas.</p> <ul> <li><code>auto_text</code> attempts to draw text within a given width, scaling down the font size if necessary to fit. </li> <li><code>auto_text2</code> is similar to <code>auto_text</code>, but splits the text onto two lines if possible.</li> <li><code>auto_text3</code> is similar to <code>auto_text2</code>, but splits the text onto up to three lines if possible. All of these functions avoid drawing text if the text size would be below the <code>tree_state.min_text_size</code>.</li> </ul> </li> <li> <p><code>general.js</code>: This file provides general utility functions, specifically <code>resolve</code>, which enables the resolution of a JSON object by a string key. For example <code>resolve({a: {b: {c: 1}}}, 'a.b.c')</code> would return <code>1</code>.</p> </li> <li> <p><code>string.js</code>: This file provides utility functions for string manipulation.</p> <ul> <li><code>capitalizeFirstLetter</code> capitalizes the first letter of a string.</li> <li><code>onlyCapitalFirstLetter</code> capitalizes only the first letter of a string and lowercases the rest.</li> </ul> </li> <li> <p><code>math.js</code>: This file provides <code>max</code> and <code>min</code> functions that operate on a variable number of arguments and only consider numeric values. These functions are different from the JavaScript built-in <code>Math.max</code> and <code>Math.min</code> because they do not return <code>NaN</code> if any of the arguments are not numbers.</p> </li> <li> <p><code>hook.js</code>: This file provides a hook system. Hooks allow modules to register callbacks to be executed at certain points in the code without tight coupling. This pattern allows for more flexible and maintainable code.</p> <ul> <li><code>add_hook</code> adds a callback function to a hook.</li> <li><code>remove_hook</code> removes a callback function from a hook.</li> <li><code>call_hook</code> executes all the callback functions registered to a hook.</li> </ul> </li> </ul>"},{"location":"OZprivate/rawJS/OZTreeModule/tests/","title":"tests","text":"<p>The <code>OZtree/OZprivate/rawJS/OZTreeModule/tests</code> directory contains tests for the OZTree module. It includes several files that set up testing environments, mock data, and test specific features of the module.</p> <p>Here's a breakdown of the most interesting files:</p> <ul> <li> <p><code>util_factory.js</code>: This file is a utility for populating the <code>factory</code> object, which is central to how the OZtree module builds and manages the tree data. It imports functions from <code>../src/factory/factory.js</code>, <code>../src/factory/life_midnode.js</code>, and <code>util_data_repo.js</code>. The primary export, <code>populate_factory()</code>, populates the data repository and initializes the factory, marking all nodes as detail-fetched. This simulates a common scenario where node details are fetched from an API.</p> </li> <li> <p><code>util_data_repo.js</code>: This utility sets up the data repository, which is where the core taxonomic data for the tree is stored. It uses <code>jsdom</code> to simulate a browser environment and load data files as if they were included in an HTML document. The <code>populate_data_repo()</code> function loads the data and adds dummy data from <code>util_data_repo.node_details.fruit_bat.js</code> so that tests have a basic dataset to work with.  The <code>get_ozid()</code> function is a helper for tests that need to get a random node or leaf id.</p> </li> <li> <p><code>util_data_repo.node_details.fruit_bat.js</code>: This file provides a sample dataset, formatted like the output of a node details API call. It includes a variety of nodes and leaves, along with their metadata. The data is themed around fruit bats, and it's used to populate the data repository in tests. This is primarily for testing data lookups and the behavior of tree nodes when they have fetched details.</p> </li> <li> <p><code>test_navigation_pinpoint.js</code>: This file tests the pinpoint resolution functionality of the OZTree module. It uses <code>resolve_pinpoints</code> and <code>node_to_pinpoint</code> from <code>../src/navigation/pinpoint.js</code> to verify that pinpoints (a way of referring to nodes in the tree using various identifiers) are correctly parsed and resolved to their corresponding internal IDs. It covers various pinpoint formats, including OTT IDs, scientific names, and OZ IDs. It also tests the resolution of common ancestor pinpoints.</p> </li> <li> <p><code>test_tour_handler_QsOpts.js</code>: This file tests the <code>handler_qsopts</code> module (<code>../src/tour/handler/QsOpts.js</code>), which is responsible for managing tour state based on URL query parameters. The tests simulate tour navigation and how query parameters are applied and restored. It uses the <code>setup_tour</code> utility from <code>util_tourwrapper.js</code> to set up a test tour environment.</p> </li> <li> <p><code>util_tourwrapper.js</code>: This file provides utilities for setting up a test environment for tours and screensavers. It includes functions for creating mock DOM elements, a fake OneZoom controller, and a basic tour setup. The most important function, <code>setup_tour()</code>, sets up a <code>Tour</code> or <code>Screensaver</code> object and provides helper functions to interact with the test environment.</p> </li> <li> <p><code>test_factory_midnode.js</code>: This file tests the <code>LifeMidnode</code> class, specifically how it manages sponsorship, tours and images. It uses <code>populate_factory</code> from <code>util_factory.js</code> to set up a test environment with data and a factory, then tests how data is applied to nodes.</p> </li> <li> <p><code>test_projection_highlight.js</code>: This file tests how the OZtree module handles highlights, which are visual cues that can draw attention to specific nodes or paths within the tree. The tests focus on <code>resolve_highlights</code>, <code>current_highlights</code>, <code>highlight_update</code>, and <code>highlights_for</code>, ensuring that highlights are correctly parsed, applied, and managed within the tree. It tests how colours are picked, and which nodes should be highlighted for a given highlight rule.</p> </li> <li> <p><code>test_tree_state.js</code>: Tests the <code>tree_state.js</code> module, which is responsible for managing the tree's viewport and zoom level. The tests focus on the <code>focal_area</code> property, ensuring that the module correctly calculates the visible area of the tree based on different canvas sizes and constraints.</p> </li> <li> <p><code>test_tour_Tour.js</code>: This file contains tests for the <code>Tour</code> class itself, ensuring that it handles tour navigation, state transitions, and user interactions correctly. It uses <code>setup_tour</code> from <code>util_tourwrapper.js</code> to create test tour environments. The tests check the order of events, state changes, and how the tour responds to user actions such as forward, backward, pause and resume.</p> </li> <li> <p><code>test_tour_Screensaver.js</code>: This file tests the screensaver functionality, which is built on top of the tour infrastructure. It uses the <code>setup_screensaver</code> helper from <code>util_tourwrapper.js</code>. The tests focus on how screensavers are automatically started and stopped based on user inactivity, and how they loop back and forth between stops.</p> </li> </ul> <p>In summary, this directory contains a comprehensive suite of tests that cover many aspects of the OZTree module, from data loading and pinpoint resolution to tour navigation, highlight management and viewport calculations. The tests use a variety of utility files to create a consistent testing environment.</p>"},{"location":"OZprivate/scss/","title":"scss","text":"<p>The <code>OZtree/OZprivate/scss</code> directory contains the Sass files used to style the OZtree project. It's structured to provide a maintainable and modular approach to styling the project's UI, primarily using a customized version of the Bootstrap CSS framework.</p> <p>The most important subdirectories are:</p> <ul> <li><code>Boot-Sass</code>: This directory contains the core Sass files for styling the OZtree project using a modified version of the Bootstrap CSS framework. It includes the base Bootstrap styles and also the <code>oz_partials</code> subdirectory which holds the project's custom styles.</li> <li><code>Boot-Sass/oz_partials</code>: This directory contains a collection of Sass partials that define the styles for the OZtree project's implementation of the Bootstrap CSS framework, including the <code>mixins</code> subdirectory, which contains reusable Sass mixins.</li> <li><code>Boot-Sass/oz_partials/mixins</code>: This directory contains Sass mixins that generate reusable CSS styles.</li> </ul> <p>Here's how some of the most important files in this directory work together:</p> <ul> <li><code>content_pages.scss</code>: This file defines styles for content pages, including lists, blockquotes, and sponsor-related elements. It also contains styles for search results.</li> <li><code>tree_MD.scss</code>: This file provides overrides for the UIkit CSS framework, specifically for the OneZoom museum display, focusing on UI elements and button sizes.</li> <li><code>tree-dark.scss</code>: This file defines a dark color scheme for the tree viewer, including UI elements, modals and search.</li> <li><code>OZ_specific.scss</code>: This file contains styles specific to the OZtree project, including the footer, blockquotes, general styles, index page, sponsor pages and multi-column layouts. It also contains media queries for different screen sizes.</li> <li><code>OZ_bootstrap.scss</code>: This file is the main entry point for the Bootstrap styles. It imports the required partials from the <code>Boot-Sass/oz_partials</code> directory to construct the OZtree project's CSS, using a customized version of the Bootstrap framework.</li> <li><code>tree_treasure.scss</code>: This file provides styles for the OneZoom treasure hunt, hiding search and language switching and also styling the checkbox.</li> <li><code>OZ_shared.scss</code>: This file contains CSS that is shared between the tree viewer and main content pages, particularly for pages that load into the tree viewer.</li> <li><code>popup.scss</code>: This file provides styles for popup pages, including a background for sponsor leaf pages that are redirects.</li> <li><code>_OZ_variables.scss</code>: This crucial file defines all the variables used across the project's styles, including colors, fonts, sizes, breakpoints, and grid settings.</li> <li><code>search_ui.scss</code>: This file contains styles for the search UI, including the search box, dropdown, and advanced search.</li> <li><code>tree.scss</code>: This file provides styles for the tree viewer, including the canvas, UI elements, and modals. It also imports other relevant stylesheets including <code>ui_widgets.scss</code>, <code>search_ui.scss</code> and <code>tour.scss</code>.</li> <li><code>tour.scss</code>: This file defines the styles for the tour UI, including the tour wrapper, container and buttons.</li> <li><code>content.scss</code>: This file serves as an entry point for content pages, setting basic styles and importing other relevant files, and defining styles for page sections, header, and footer.</li> <li><code>colour_scheme.scss</code>: This file defines the color scheme for the project, including background, foreground colors, and font styles. It also defines some helper classes and mixins that can be used to apply styles to different elements on the page.</li> <li><code>content_index.scss</code>: This file contains styles specific to the homepage, including the grid modifications for the homepage, tour UI, and news items.</li> <li><code>_OZ_thumbnails.scss</code>: This file defines styles for thumbnails, including the base styles, captions, and hover effects, and it is imported into <code>OZ_bootstrap.scss</code>.</li> <li><code>ui_widgets.scss</code>: This file provides styles for UI widgets, including progress bars, buttons, selects, modals, icons, and call-to-action elements.</li> </ul> <p>These files work together to provide a consistent and maintainable styling system for the OZtree project. The use of Sass, mixins and variables promotes code reuse and makes it easier to customize the look and feel of the project. The project's use of Bootstrap provides a solid foundation for its styling and the project adds custom styles and themes on top of that framework.</p>"},{"location":"OZprivate/scss/Boot-Sass/","title":"Boot-Sass","text":"<p>The <code>OZtree/OZprivate/scss/Boot-Sass</code> directory contains the core Sass files for styling the OZtree project using a modified version of the Bootstrap CSS framework. It is structured to provide a customized and maintainable approach to styling the project's UI.</p> <p>The most important subdirectory is <code>oz_partials</code>. It contains the bulk of the project's styles, broken into logical partials that are imported into other files to generate the project's CSS. This includes the <code>mixins</code> subdirectory which contains mixins that are used to generate styles across the project, enabling code reuse and consistency.</p> <p>Here's how the most important files in this directory work together:</p> <ul> <li><code>_bootstrap.scss</code>: This file serves as the main entry point for the Bootstrap styles. It imports all the necessary Bootstrap components, variables, mixins, and utilities to provide a base for the OZtree project's styling, including <code>_normalize.scss</code>, <code>_grid.scss</code>, <code>_type.scss</code>, <code>_buttons.scss</code>, and many more. The file is organized into sections, such as \"Core CSS\", \"Components\", and \"Utility classes\", and imports the corresponding partials. It does not include any styles specific to the OZtree project.</li> <li><code>_button-groups.scss</code>: This file provides styles for grouping buttons, including basic button groups, toolbars, and split button dropdowns. It uses several mixins, such as <code>border-radius</code> to provide a cohesive look. This file is part of the Bootstrap framework, and is imported by <code>_bootstrap.scss</code>.</li> </ul> <p>There are also several files that provide compatibility with different asset management pipelines:</p> <ul> <li><code>_bootstrap-mincer.scss</code>: This file provides helper functions that enable compatibility with the Mincer asset pipeline, which is commonly used in Ruby on Rails projects.</li> <li><code>_bootstrap-compass.scss</code>: This file provides helper functions that enable compatibility with Compass, a Sass framework.</li> <li><code>_bootstrap-sprockets.scss</code>: This file provides helper functions that enable compatibility with the Sprockets asset pipeline, which is also common in Ruby on Rails projects.</li> </ul> <p>These files, combined with the partials in the <code>oz_partials</code> directory, provide the foundation for the OZtree project's styling. They demonstrate a modular approach, using Sass mixins and variables for code reuse, consistency, and maintainability.</p>"},{"location":"OZprivate/scss/Boot-Sass/oz_partials/","title":"oz_partials","text":"<p>The <code>OZtree/OZprivate/scss/Boot-Sass/oz_partials</code> directory contains a collection of Sass partials that define the styles for the OZtree project's implementation of the Bootstrap CSS framework. It includes several subdirectories and files that handle various aspects of the user interface.</p> <p>The most important subdirectory is <code>mixins</code>, which contains a large number of Sass mixins used to generate styles for various elements. The mixins are organized into separate files based on their function, such as:</p> <ul> <li><code>_text-emphasis.scss</code>: Contains the <code>text-emphasis-variant</code> mixin for styling text with a specific color and hover/focus effects.</li> <li><code>_panels.scss</code>: Provides the <code>panel-variant</code> mixin for styling panel components.</li> <li><code>_labels.scss</code>: Offers the <code>label-variant</code> mixin for styling labels with a background color and hover/focus effects.</li> <li><code>_gradients.scss</code>: Provides a variety of mixins to create different types of gradient backgrounds.</li> <li><code>_buttons.scss</code>: Includes the <code>button-variant</code> mixin for styling buttons with specific colors, backgrounds, and borders, and <code>button-size</code> for setting padding, font-size, etc. for buttons.</li> <li><code>_grid.scss</code>: Defines mixins for creating a grid system, including <code>container-fixed</code>, <code>make-row</code>, and mixins for generating columns for different screen sizes.</li> <li><code>_vendor-prefixes.scss</code>: Contains a large set of mixins for adding vendor prefixes to CSS properties.</li> <li><code>_include-media.scss</code>: Provides mixins for creating media queries using breakpoints and other media expressions.</li> <li><code>_grid-framework.scss</code>: Provides mixins for generating the grid framework, including <code>make-grid-columns</code>, <code>float-grid-columns</code>, <code>calc-grid-column</code>, <code>loop-grid-columns</code> and <code>make-grid</code>.</li> </ul> <p>These mixins work together to provide a comprehensive set of tools for styling various aspects of a web page.</p> <p>In addition to the <code>mixins</code> subdirectory, several important Sass partials are located directly in this directory:</p> <ul> <li><code>_normalize.scss</code>: This file contains a customized version of the normalize.css library, which is used to reset and normalize styles across different browsers.</li> <li><code>_dropdowns.scss</code>: This file defines the styles for dropdown menus, including the basic structure, positioning, and hover/focus effects.</li> <li><code>_breadcrumbs.scss</code>: This file provides styles for breadcrumb navigation, including the structure and separator styling.</li> <li><code>_panels.scss</code>: This file defines the base styles for panels and the contextual variations.</li> <li><code>_labels.scss</code>: This file sets up the base styles for labels, as well as the contextual variations.</li> <li><code>_navs.scss</code>: This file provides base styles for navigation menus, including tabs, pills, and stacked navs.</li> <li><code>_type.scss</code>: This file contains styles for headings, body text, emphasis, alignment, contextual colors, lists and blockquotes.</li> <li><code>_carousel.scss</code>: This file defines the styles for carousels, including the basic structure, navigation controls, indicators, and captions.</li> <li><code>_button-groups.scss</code>: This file provides styles for grouping buttons, including basic button groups, toolbars, and split button dropdowns.</li> <li><code>_glyphicons.scss</code>: This file includes the font face definition and styles for all Bootstrap's glyphicons.</li> <li><code>_wells.scss</code>: This file provides the base styles and sizing for well components.</li> <li><code>_badges.scss</code>: This file defines the styles for badges, including the base styles, link styles and styles for badges in lists and navs.</li> <li><code>_media.scss</code>: This file provides styles for media components, including spacing, sizing and alignment.</li> <li><code>_progress-bars.scss</code>: This file sets up styles for progress bars, including striped and animated variations.</li> <li><code>_pager.scss</code>: This file sets up the styles for basic pagination links.</li> <li><code>_tooltip.scss</code>: This file includes the base styles for tooltips, as well as arrow styles.</li> <li><code>_buttons.scss</code>: This file provides base styles for buttons, link buttons and various button sizes.</li> <li><code>_jumbotron.scss</code>: This file defines the base styles for the jumbotron component and responsiveness.</li> <li><code>_code.scss</code>: This file provides styles for inline and block code snippets and user input.</li> <li><code>_grid.scss</code>: This file defines the grid system based on the variables in <code>_variables.scss</code>.</li> <li><code>_component-animations.scss</code>: This file provides basic animation classes for components.</li> <li><code>_input-groups.scss</code>: This file defines base styles for input groups including text inputs, and buttons.</li> <li><code>_tables.scss</code>: This file provides styles for tables including zebra striping and bordered variations, as well as responsivity.</li> <li><code>_thumbnails.scss</code>: This file provides styles for thumbnails, including image styling, captions and hover effects.</li> <li><code>_alerts.scss</code>: This file defines the base styles for alerts, including alternate styles and dismissibles.</li> <li><code>_print.scss</code>: This file provides basic print styles for the project based on the html5 boilerplate.</li> <li><code>_variables.scss</code>: This crucial file defines all the variables used across the project's styles, including colors, fonts, sizes, and breakpoints.</li> <li><code>_responsive-utilities.scss</code>: This file includes styles to show and hide elements based on screen size.</li> <li><code>_forms.scss</code>: This file provides styles for basic form components, including labels, inputs, form groups, and validation states.</li> <li><code>_list-group.scss</code>: This file sets up the basic styles for list groups.</li> <li><code>_responsive-embed.scss</code>: This file provides styles for embedding responsive content based on screen size.</li> <li><code>_modals.scss</code>: This file defines the styles for modal components, including structure, sizing and background.</li> <li><code>_pagination.scss</code>: This file sets up the styles for standard pagination components, including sizing.</li> <li><code>_close.scss</code>: This file provides styles for close icons/buttons.</li> <li><code>_mixins.scss</code>: This file includes all the other files in the <code>mixins</code> subdirectory, making all of the mixins available when this file is imported.</li> <li><code>_scaffolding.scss</code>: This file provides basic scaffolding styles including resets, links, images, and sr-only content.</li> <li><code>_theme.scss</code>: This file sets up the theme using variables and mixins.</li> <li><code>_navbar.scss</code>: This file defines base styles for navbars, including alignment, brand, buttons, and forms.</li> <li><code>_utilities.scss</code>: This file provides various utility classes, including floats, clearing, and toggling content.</li> <li><code>_popovers.scss</code>: This file provides base styles for popovers, including the arrow.</li> </ul> <p>These files collectively form the foundation of the OZtree project's UI, defining the look and feel of the various elements and components used within the project. They demonstrate a comprehensive use of Sass for modularity, reusability and maintainability.</p>"},{"location":"OZprivate/scss/Boot-Sass/oz_partials/mixins/","title":"mixins","text":"<p>The <code>OZtree/OZprivate/scss/Boot-Sass/oz_partials/mixins</code> directory contains a collection of Sass mixins. These mixins are designed to be included in other Sass files to generate reusable CSS styles. They cover a wide range of styling needs, from basic typography and layout to more complex UI components. Here's an overview of some of the most important mixins and how they work together:</p> <ul> <li><code>_text-emphasis.scss</code>: Provides the <code>text-emphasis-variant</code> mixin, which is used to style text with a specific color and hover/focus effects. This mixin is designed to be used for text that requires emphasis.</li> <li><code>_panels.scss</code>: Contains the <code>panel-variant</code> mixin for styling panel components. It sets border colors, heading text colors, heading background colors, and heading border colors, as well as styles for badges within panel headings.</li> <li><code>_labels.scss</code>: Includes the <code>label-variant</code> mixin for styling labels with a background color and hover/focus effects.</li> <li><code>_tab-focus.scss</code>: Defines the <code>tab-focus</code> mixin for styling the focus state of elements. This uses a WebKit-style outline.</li> <li><code>_table-row.scss</code>: Offers the <code>table-row-variant</code> mixin which applies background colors to table rows and cells based on state, with hover effects.</li> <li><code>_image.scss</code>: Provides two mixins: <code>img-responsive</code> for making images responsive, and <code>img-retina</code> for handling retina images with different background images and sizes based on device pixel ratio.</li> <li><code>_clearfix.scss</code>: Implements the <code>clearfix</code> mixin, which is used to clear floats and prevent layout issues.</li> <li><code>_resize.scss</code>: Offers the <code>resizable</code> mixin which enables resizing of elements in the specified direction.</li> <li><code>_buttons.scss</code>: Defines the <code>button-variant</code> mixin for styling buttons with specific colors, backgrounds, and borders, including hover, focus, active, and disabled states. It also provides <code>button-size</code> for setting padding, font-size, line-height, and border-radius for buttons.</li> <li><code>_reset-filter.scss</code>: Contains the <code>reset-filter</code> mixin, which is used to reset the IE filter when removing gradient backgrounds.</li> <li><code>_gradients.scss</code>: Provides multiple mixins for creating various gradient backgrounds including <code>gradient-horizontal</code>, <code>gradient-vertical</code>, <code>gradient-directional</code>, <code>gradient-horizontal-three-colors</code>, <code>gradient-vertical-three-colors</code>, <code>gradient-radial</code>, and <code>gradient-striped</code>. These cover different types of gradients with color stops.</li> <li><code>_opacity.scss</code>: Includes the <code>opacity</code> mixin, which sets the opacity of an element and provides a fallback for IE8.</li> <li><code>_background-variant.scss</code>: Offers the <code>bg-variant</code> mixin for setting background colors with hover/focus effects, analogous to the text emphasis mixin, but for backgrounds.</li> <li><code>_grid.scss</code>: Defines mixins for creating a grid system, including <code>container-fixed</code>, <code>make-row</code>, and mixins for generating columns for different screen sizes (xs, sm, md, lg) with offsets, pushes, and pulls.</li> <li><code>_size.scss</code>: Contains the <code>size</code> mixin for setting both width and height, and <code>square</code> for setting both width and height to the same value.</li> <li><code>_reset-text.scss</code>: Provides the <code>reset-text</code> mixin, which resets various text-related properties like font family, style, weight, and more.</li> <li><code>_nav-divider.scss</code>: Defines the <code>nav-divider</code> mixin to create horizontal dividers within navigation lists.</li> <li><code>_center-block.scss</code>: Provides the <code>center-block</code> mixin for center-aligning block elements.</li> <li><code>_responsive-visibility.scss</code>: Includes the <code>responsive-visibility</code> and <code>responsive-invisibility</code> mixins for controlling the visibility of elements based on screen size.</li> <li><code>_alerts.scss</code>: Offers the <code>alert-variant</code> mixin for styling alert components, including background, border, and text colors.</li> <li><code>_text-overflow.scss</code>: Contains the <code>text-overflow</code> mixin, which provides text truncation with an ellipsis.</li> <li><code>_progress-bar.scss</code>: Provides the <code>progress-bar-variant</code> mixin for styling progress bars, including striped variations.</li> <li><code>_forms.scss</code>: Defines mixins for styling form elements, including <code>form-control-validation</code> for setting colors and borders for validation states, <code>form-control-focus</code> for focus styles, and <code>input-size</code> for different input sizes.</li> <li><code>_list-group.scss</code>: Includes the <code>list-group-item-variant</code> mixin for styling list group items with different states, including hover and active states.</li> <li><code>_include-media.scss</code>: This file provides mixins for creating media queries using breakpoints and other media expressions. The <code>media</code> mixin is used to apply styles based on defined breakpoints. It also supports custom breakpoints and has options for when media queries are not supported by a user's browser.</li> <li><code>_nav-vertical-align.scss</code>: Provides the <code>navbar-vertical-align</code> mixin for vertically centering elements within a navbar.</li> <li><code>_pagination.scss</code>: Defines the <code>pagination-size</code> mixin for styling pagination components.</li> <li><code>_border-radius.scss</code>: Includes mixins for setting border radius on single sides of an element: <code>border-top-radius</code>, <code>border-right-radius</code>, <code>border-bottom-radius</code>, and <code>border-left-radius</code>.</li> <li><code>_grid-framework.scss</code>: Provides mixins for generating the grid framework, including <code>make-grid-columns</code>, <code>float-grid-columns</code>, <code>calc-grid-column</code>, <code>loop-grid-columns</code> and <code>make-grid</code>.</li> <li><code>_vendor-prefixes.scss</code>:  This file contains a large set of mixins for adding vendor prefixes to CSS properties such as <code>animation</code>, <code>backface-visibility</code>, <code>box-shadow</code>, <code>box-sizing</code>, <code>content-columns</code>, <code>hyphens</code>, <code>placeholder</code>, <code>transform</code>, <code>transition</code> and <code>user-select</code>.</li> <li><code>_hide-text.scss</code>: Includes the <code>hide-text</code> mixin (deprecated) and <code>text-hide</code> mixin to hide text and replace it with an image.</li> </ul> <p>These mixins work together to provide a comprehensive set of tools for styling various aspects of a web page. They are designed to be reusable and flexible, making it easier to create consistent and maintainable styles. The mixins in this directory are typically included in other Sass files to generate CSS rules that apply these styles to HTML elements. For example, to use the <code>button-variant</code> mixin to style a button element you would need to include this file, then use the mixin in a selector targeting the button:</p> <pre><code>    @import 'OZtree/OZprivate/scss/Boot-Sass/oz_partials/mixins/buttons';\n\n    .my-button {\n        @include button-variant($color: #fff, $background: #007bff, $border: #007bff);\n    }\n</code></pre>"},{"location":"_COPY_CONTENTS_TO_WEB2PY_DIR/","title":"_COPY_CONTENTS_TO_WEB2PY_DIR","text":"<p>The <code>OZtree/_COPY_CONTENTS_TO_WEB2PY_DIR</code> directory is a staging area for files that will be symlinked into the web2py application directory by a Grunt build process.</p> <p>The most important file here is <code>routes.py</code>. It configures the web2py router, defining how URLs are mapped to applications and actions.</p> <p>Specifically, it sets the <code>default_application</code> to <code>OZtree</code>, meaning that requests without an application specified in the URL will be routed to the <code>OZtree</code> application. It also defines a custom 404 page (<code>/OZtree/default/custom_404.html</code>) and a custom 400 page (<code>/OZtree/default/custom_400.html</code>) to be served when those errors occur. Lastly, logging is set to off.</p> <p>The <code>README.markdown</code> file simply explains that the python files in this directory are intended to be symlinked into the web2py directory by a Grunt build process, indicating that this directory is not part of the final application structure.</p>"},{"location":"_github/","title":".github","text":"<p>The <code>OZtree/.github</code> directory contains configuration files and settings related to GitHub. The most important subdirectory is <code>workflows</code>.</p> <p>The <code>workflows</code> subdirectory contains GitHub Actions workflow files that automate various aspects of the OZtree project's development and deployment process.</p> <ul> <li> <p><code>deploy_repo_guide.yml</code>: This workflow publishes the documentation generated by the <code>repo-guide</code> tool. It is triggered manually via <code>workflow_dispatch</code>. The workflow checks out the repository, and then uses the <code>wolfmanstout/deploy-repo-guide@v1</code> action, passing in secrets for the Gemini API and configuration values for token limits and Google Analytics. This workflow is crucial for making the project's documentation available online.</p> </li> <li> <p><code>test-client.yml</code>: This workflow defines the Continuous Integration (CI) process for the OZtree module. It is triggered on pushes to the <code>main</code> and <code>production</code> branches, tags matching <code>v*</code>, and pull requests targeting the <code>main</code> and <code>production</code> branches. The workflow sets up Node.js, installs dependencies, builds the project, runs tests, and compiles/compresses JavaScript and CSS using Grunt. This workflow ensures code quality and prevents regressions.</p> </li> </ul>"},{"location":"_github/workflows/","title":"workflows","text":"<p>The <code>OZtree/.github/workflows</code> directory contains GitHub Actions workflow files that automate various aspects of the OZtree project's development and deployment process.</p> <ul> <li> <p><code>deploy_repo_guide.yml</code>: This workflow is responsible for publishing the documentation generated by the <code>repo-guide</code> tool. It is triggered manually via <code>workflow_dispatch</code>. The workflow checks out the repository, and then uses the <code>wolfmanstout/deploy-repo-guide@v1</code> action, passing in secrets for the Gemini API and configuration values for token limits and Google Analytics. This workflow is crucial for making the project's documentation available online.</p> </li> <li> <p><code>test-client.yml</code>: This workflow defines the Continuous Integration (CI) process for the OZtree module. It is triggered on pushes to the <code>main</code> and <code>production</code> branches, tags matching <code>v*</code>, and pull requests targeting the <code>main</code> and <code>production</code> branches. The workflow sets up Node.js, installs dependencies, builds the project, runs tests, and compiles/compresses JavaScript and CSS using Grunt. This workflow ensures code quality and prevents regressions.</p> </li> </ul>"},{"location":"cache/","title":"cache","text":"<p>The <code>OZtree/cache</code> directory is used for storing cached data. The <code>.gitignore</code> file indicates that all files in this directory should be ignored by git except for the <code>.gitignore</code> file itself. This is a common pattern for directories containing generated or temporary files that should not be tracked in the repository.</p>"},{"location":"controllers/","title":"controllers","text":"<p>The <code>OZtree/controllers</code> directory contains the controllers for the OZtree application. These controllers handle various aspects of the application, including tour management, user management, data display, API endpoints, and more. Here's a breakdown of the most interesting files and subdirectories:</p> <ul> <li> <p><code>tour.py</code>: This controller is responsible for handling \"tours\" in the application, which are guided explorations of the OneZoom tree. It includes:</p> <ul> <li>Endpoints for creating, retrieving, and updating tour data, using a JSON format. The format is described in a docstring within the file, and an example of a tour JSON is available at https://github.com/OneZoom/tours.</li> <li>The <code>homepage_animation</code> function, which fetches data for the animated startpoints on the OneZoom homepage.</li> <li>Functions <code>tutorial_MDmouse</code> and <code>tutorial_MDtouch</code> which return data for tutorial pages.</li> <li>The <code>screensaver</code> function that specifies a default tour that will be used as a screen saver.</li> <li>The <code>data</code> function which handles fetching of tour data given an identifier and also handles PUT requests for saving the tours.</li> <li>The <code>list</code> function which fetches a list of tour identifiers and returns the corresponding tours (or a list of the rest of the tours if requested).</li> <li>The <code>search</code> function which allows for searching tours by keywords.</li> </ul> </li> <li> <p><code>manage.py</code>: This controller contains various administrative tools and functions, all requiring manager privileges:</p> <ul> <li><code>edit_language</code> lets managers edit language files, copying functionality from the admin app.</li> <li><code>SHOW_SPONSOR_SUMS</code> lists all sponsors by the amount they have paid, grouped by username or name.</li> <li><code>SPONSOR_VALIDATE</code> displays sponsorship details and allows managers to validate or reject each one.</li> <li><code>SPONSOR_UPDATE</code> displays a single sponsorship and allows for updating the information provided by a sponsor. It also includes functionality to send auto-emails and auto-tweets to sponsors as part of the validation. This also interfaces with <code>EoLQueryPicsNames.py</code> to download and save images from the Encyclopedia of Life.</li> <li><code>LIST_IMAGES</code>  mines the database for all images and shows them ranked by popularity or image quality.</li> <li><code>SHOW_RENEWAL_INFO</code> shows renewal URLs and email information for a user.</li> <li><code>SHOW_EMAILS</code> groups sponsorships by date, and produces emails for each, using <code>ozmail.template_mail</code>, to be pasted into an email client.</li> <li><code>SET_PRICES</code> sets cutoff prices for sponsorships in the database and assigns them to taxa according to popularity, including special cases.</li> <li><code>REIMPORT_TREE_TABLES</code> is an attempt to quickly re-import the large tree tables in the database, however this is currently not working.</li> <li>The <code>emails</code> function returns the email texts that can be sent out, with options for different types of emails (e.g. \"no payment\", \"to verify\", \"live\").</li> </ul> </li> <li> <p><code>dev.py</code>: This controller provides various development tools and test endpoints, requiring manager privileges:</p> <ul> <li><code>index</code> shows the mammal ID.</li> <li><code>DOCS</code> renders compiled Markdown documentation.</li> <li><code>COMPILED_DOCS</code> returns a compiled Markdown file.</li> <li><code>TEST_POST</code> tests POST requests with a given OTT.</li> <li><code>TEST_EOL_API</code> tests the EOL API key.</li> <li><code>COMMAND_CALL_TEST</code> tests command-line calls, using a utility script.</li> <li><code>GARBAGE_COLLECT</code> collects garbage.</li> <li><code>PAUSE_WEB2PY_FOR_PDB</code> pauses the server to provide a debugging breakpoint on local connections.</li> <li><code>OBJGRAPH_DELTAS</code> provides a memory usage graph with the growth over the last time period.</li> <li><code>TEST_LINKS</code> tests the generation of internal links.</li> <li><code>TEST_POPUP</code> tests the UIkit popup functionality.</li> <li><code>SAFARI_IFRAME_BUG</code> tests a safari iframe bug (returns nothing).</li> </ul> </li> <li> <p><code>developer.py</code>: This controller manages some developer-facing pages:</p> <ul> <li><code>index</code> displays release information.</li> <li><code>changelog</code> also displays release information.</li> <li><code>embedding</code> shows a generic page with instructions on how to embed OneZoom into an external webpage.</li> <li><code>embed_edit</code> allows for creating an embed link which will be sent to the given email address</li> </ul> </li> <li> <p><code>education.py</code>: This controller provides various pages to help educators:</p> <ul> <li><code>museum_display_setup</code> returns data for a museum display setup page.</li> <li><code>treasure_hunt_setup</code> returns data for the treasure hunt setup page.</li> <li><code>installations</code> returns data for the installation page.</li> <li><code>screenshot_launcher</code> returns data for the screenshot launcher page.</li> <li><code>educational_materials</code> retrieves quotes for educational materials.</li> </ul> </li> <li> <p><code>popularity.py</code>: This controller provides API endpoints to query popularity scores for taxa on the OneZoom tree. It is used by tools like Phylotastic:</p> <ul> <li><code>index</code> provides a description of the API.</li> <li><code>test</code> provides an endpoint that returns the parents for a given OTT id, plus their popularity score and wikidata ID.</li> <li><code>list</code> is the main API endpoint, and can be called with a key, a comma separated list of OTT ids and several other optional parameters to return a list of OTTs, scientific names, popularity, and popularity rank.</li> <li>The <code>queryvar_is_true</code> function helps handle boolean parameters passed in as part of the API call.</li> <li>The functions <code>get_limits</code>, <code>record_usage</code>, and <code>update_count</code> manage API limits and usage statistics</li> </ul> </li> <li> <p><code>tree.py</code>: This controller manages various aspects of the OneZoom tree, including linking out to external pages and providing image information:</p> <ul> <li><code>wikipedia_OZpage</code> creates a page with javascript to grab and display a Wikipedia page based on a Wikidata ID.</li> <li><code>IUCN_OZpage</code> and <code>GBIF_OZpage</code> create similar pages for IUCN and GBIF pages respectively, using a similar javascript technique.</li> <li><code>pic_info</code> generates the correct URL for the 'jump out' image page.</li> <li><code>linkouts</code> returns a JSON response for a given taxon which contains URLs to external resources e.g. OpenTree, Wikipedia, and Encyclopedia of Life.</li> <li><code>leaf_linkouts</code> and <code>node_linkouts</code> return linkout data using <code>linkouts</code> for a given leaf OTT or node ID.</li> <li>The functions <code>eol_page_ID</code> and <code>eol_dataobject_ID</code> log the EOL pages or data objects being viewed, and redirect to the EOL website.  <code>eol_old_dataobject_ID</code> handles old EOL image URLs.</li> <li>The remaining functions generate the URLs for external resources, used in the <code>linkouts</code> function.</li> </ul> </li> <li> <p><code>redirect.py</code>: This controller handles redirection of short OneZoom URLs to external sites:</p> <ul> <li><code>eol</code> redirects to the EOL page for a given OTT id, or returns the EOL id in json format.</li> <li><code>wikidata</code> redirects to the Wikidata page, or returns the Wikidata id in json format.</li> <li><code>wikipedia</code> redirects to a Wikipedia page using the Wikidata redirection link for a given OTT id, with the requested language as part of the URL.</li> </ul> </li> <li> <p><code>API.py</code>: This controller provides several API endpoints to query the OneZoom database:</p> <ul> <li><code>index</code> describes the more public parts of the API, and sets public constraints for API keys.</li> <li><code>error</code> generates JSON error messages with a custom response code.</li> <li><code>version</code> returns the version number.</li> <li><code>node_details</code> returns details for a node or leaf based on their IDs.</li> <li><code>image_details</code> returns details for an image given a source and source id</li> <li><code>search_node</code> searches for a given text using the <code>search_for_name</code> and <code>sponsorship_search.search_sponsor</code> functions, combining the results.</li> <li><code>pinpoints</code> resolves one or more pinpoint strings into corresponding Open Tree IDs or other data.</li> <li><code>search_init</code> returns a list of leaf or node ids based on a given name or OTT id.</li> <li><code>search_for_name</code> takes a query, a language and other optional parameters, and returns all leaves or nodes that start with that text in either the scientific or vernacular name.</li> <li><code>search_by_name</code> implements the actual search for <code>search_for_name</code>. It searches against both scientific names and vernacular names using fulltext searches and simpler <code>like</code> queries. It attempts to get the best vernacular match if possible.</li> <li><code>search_for_sponsor</code> returns a JSON response containing sponsorship matches for a given text.</li> <li><code>get_ids_by_ott_array</code> maps a comma-separated list of OTTs to their IDs.</li> <li><code>update_visit_count</code> updates the counters for API calls by OTT in the <code>visit_count</code> table.</li> <li><code>get_id_by_ott</code> returns the leaf or node id corresponding to a single OTT.</li> <li><code>getOTT</code> maps a series of ids in other databases (eol, gbif, ncbi) to OneZoom OTT ids.</li> <li><code>children_of_OTT</code> gets all the terminal nodes of a given OTT, including EOL, Wikidata, and popularity scores.</li> <li><code>children_of_EOL</code> is the same as <code>children_of_OTT</code> but takes an EOL id as the starting point.</li> <li><code>search_for_sciname</code> returns results that begin with the scientific name passed as a query parameter</li> <li><code>otts2vns</code> maps a list of OTTs to their vernacular names, also specifying the language for the vernaculars.</li> <li><code>node_images</code> returns all images linked to a given node.</li> <li><code>otts2identifiers</code> maps a series of OTT ids to the corresponding identifiers in other databases.</li> <li><code>select_leaves</code> returns a list of leaves matching the given query.</li> <li><code>make_unicode</code> ensures the input is unicode.</li> <li><code>get_limits</code> gets the API usage limits from the database.</li> </ul> </li> <li> <p><code>treeviewer.py</code>: This controller manages the various versions of the OneZoom tree viewer and the data they require. This controller is also the location of the various different views used in the different OneZoom display modes.</p> <ul> <li><code>js_strings</code> returns a JSON response for all translatable strings in the javascript code.</li> <li><code>dynamic_scripts</code> returns javascript to load large files in advance.</li> <li><code>server_urls</code> returns javascript to define API urls.</li> <li><code>UI_layer</code> returns the main html code for the UI, so the skin can be reloaded with a different language.</li> <li><code>minlife</code> and <code>minlife_tour</code> return a minimal version of the tree viewer, without the text tree or language switching, and is for restricted installations.</li> <li><code>about_plus_data</code> returns the release info, plus a lambda to get image urls.</li> </ul> </li> <li> <p><code>default.py</code>: This controller contains many of the main functionalities of the website. This file also contains functionality for the tree viewer. It is responsible for the home page and all the user-facing \"life\" pages, also handling the sponsorship functionality:</p> <ul> <li><code>index</code> prepares all the information for the OneZoom home page, including carousel data, startpoint data, and quotes.</li> <li><code>footer_sponsor_items</code> returns information used in the footer of every page.</li> <li><code>user</code> manages the user authentication system (login, logout, registration, etc.)</li> <li><code>custom_400</code> and <code>custom_404</code> define handlers for these HTTP errors.</li> <li><code>sponsor_leaf</code>, <code>sponsor_leaf_check</code>, <code>sponsor_pay</code>, and <code>valid_spons</code> manage the sponsorship process for a single leaf, including the various checks and validation steps, and interaction with Paypal.</li> <li><code>sponsor_leaf_redirect</code>, <code>sponsor_replace_page</code>, <code>sponsor_renew_request</code>, <code>sponsor_unsubscribe</code>, and <code>sponsor_renew</code> manage various forms and redirect pages involved in the sponsorship process. <code>sponsor_renew</code> manages the page for renewing multiple sponsorships, including handling the interaction with Paypal, and <code>sponsor_unsubscribe</code> unsubscribes the user from future e-mails about their sponsorships.</li> <li><code>sponsored</code> provides a list of recently sponsored species.</li> <li><code>donor</code> and <code>donor_list</code> manage the pages for viewing single donors, or all donors, respectively.</li> <li><code>sponsor_picks</code>, <code>sponsor</code>, <code>treecards</code>, <code>sponsor_node_price</code>, <code>sponsor_node</code>, and <code>sponsor_handpicks</code> retrieve and display information for various sponsorship options. <code>sponsor_picks</code> is a base function, that fetches specific lists of OTTs, and <code>sponsor_node_price</code> retrieves the leaves available at a given price band for sponsoring.</li> <li><code>list_sponsorable_children</code> lists all the sponsorable leaves.</li> <li><code>pp_process_post</code> processes the IPN (Instant Payment Notification) response from Paypal after a payment.</li> <li><code>lang_export</code> exports the language file as a <code>.po</code> file.</li> <li>The following functions provide redirects to static pages, other controllers, or various versions of the main <code>life</code> page: <code>introduction</code>, <code>work_with_us</code>, <code>full_guide</code>, <code>sponsor_user_manage</code>, <code>otop_intro</code>, <code>sponsor_thanks</code>, <code>endorsements</code>, <code>impacts</code>, <code>impact</code>, <code>installations</code>, <code>developer</code>, <code>embed_instructions</code>, <code>embed_edit</code>, <code>about</code>, <code>data_sources</code>, <code>how</code>, <code>colkey</code>, <code>team</code>, <code>timeline</code>, <code>terms</code>, <code>accessibility</code>, <code>FAQ</code>, <code>gallery</code>, <code>tree_index</code>, <code>AT16</code>, <code>ADEPD_birds_nunes_etal_2015</code>, <code>amphibians</code>, <code>birds</code>, <code>custom_SFU</code>, <code>EDGE_birds</code>, <code>embed</code>, <code>embeded_ADEPD_birds_nunes_etal_2015</code>, <code>embeded_EDGE_birds</code>, <code>embeded_mammals</code>, <code>embeded_plants</code>, <code>embeded_tetrapods</code>, <code>Euphorbia_2014</code>, <code>fish</code>, <code>mammals</code>, <code>OneZoom_Tree_of_life_explorer_Android_license</code>, <code>plants_Soltis1</code>, <code>plants_Soltis2</code>, <code>plants</code>, <code>porifera</code>, <code>Squamates_Pyron</code>, <code>tetrapods_ballweg_arctic</code>, <code>tetrapods_SFU</code>, <code>tetrapods</code>, <code>vascularplants_tank2013nature</code>, <code>software</code>, <code>impact</code>, <code>licence</code>, and <code>news</code>.</li> <li>The function <code>life_text</code>, <code>life_text_init_taxa</code>, <code>treeview_info</code>, <code>life</code>, <code>life_noninteractive</code>, <code>life_MD</code>, <code>lifeMD</code>, <code>life_MDtouch</code>, <code>life_MDmouse</code>, <code>life_treasure</code>, <code>life_expert</code>, <code>AT</code>, <code>trail2016</code>, <code>linnean</code>, <code>otop</code>, <code>otop_MD</code>, <code>gnathostomata</code> and <code>list_controllers</code> manage the main OneZoom tree view and its different configurations, including different styles of navigation and UI. <code>remove_location_arg</code>, and <code>remove_partner_arg</code> are used to handle parameters that may be passed in as part of a URL.</li> <li>The functions <code>kew_plants</code> and <code>kew_fungi</code> are commented out, but are an example of a future redirect which could be used.</li> <li>The function <code>list_controllers</code> is only available when <code>is_testing</code> is true in the <code>db.py</code> file, and lists all controllers and functions for debugging purposes.</li> <li>The functions <code>safe_open</code> and <code>safe_read</code> are used when the <code>list_controllers</code> function reads in code from different controller files.</li> </ul> </li> <li> <p><code>appadmin.py</code>: This controller provides an alternative to web2py's built-in admin application, with its own user management.</p> <ul> <li>It includes a set of checks to ensure that the <code>appadmin</code> functionality is disabled except for localhost connections or valid logged in users.</li> <li><code>index</code> lists all the available databases and tables.</li> <li><code>insert</code> inserts a new record in a database table.</li> <li><code>download</code> provides the ability to download a given database, or a selection.</li> <li><code>csv</code> provides a function to download records as a CSV file, based on a query.</li> <li><code>import_csv</code> reads a csv file, and imports this to a table in the database.</li> <li><code>select</code> allows the selection and modification of data using a query expression. It also allows uploading from CSV.</li> <li><code>update</code> allows the user to update a single record in a database table, or delete that record.</li> <li><code>state</code> displays global variables.</li> <li><code>ccache</code> manages the caching functionality for the server, and includes a useful set of debugging tools.</li> <li><code>table_template</code> is a helper function to generate graphviz output showing the structure of a database table.</li> <li><code>manage</code> manages user permissions and also makes use of <code>SQLFORM.smartgrid</code>.</li> <li><code>hooks</code> displays information about the database hooks available.</li> <li><code>d3_graph_model</code> produces JSON to be passed into a javascript function, in order to show the structure of all the databases.</li> </ul> </li> </ul> <p>These controllers collectively manage the core features of the OneZoom application, including data access, user interaction, and administrative tasks. They are tightly integrated with the database and other modules in the application.</p>"},{"location":"cron/","title":"cron","text":"<p>The <code>OZtree/cron</code> directory contains files related to scheduled tasks using <code>cron</code>.</p> <ul> <li><code>crontab.example</code> and <code>crontab</code> are both example crontab files. The intended use of these files is to be edited to specify jobs and schedules that the cron daemon will execute.</li> </ul>"},{"location":"databases/","title":"databases","text":"<p>The <code>OZtree/databases</code> directory contains files related to database management.</p> <p>The .gitignore file specifies intentionally untracked files that Git should ignore. In this case, it is configured to ignore files with the <code>.table</code> and <code>.log</code> extensions, which are likely generated by the database system. This prevents these generated files from being accidentally committed to the repository, keeping the repository clean.</p>"},{"location":"errors/","title":"errors","text":"<p>The <code>OZtree/errors</code> directory is used to store error files.</p> <p>The .gitignore file ensures that all files within this directory are ignored by Git, except for the <code>.gitignore</code> file itself. This is a common practice when the directory needs to be present in the repository structure, but the contents are generated or temporary and not meant to be tracked by Git.</p>"},{"location":"languages/","title":"languages","text":"<p>The <code>OZtree/languages</code> directory contains a collection of Python files, each representing a different language for use in the OZtree application. These files are primarily used for internationalization (i18n) and localization (l10n), allowing the application to be presented in multiple languages.</p> <p>The files within this directory are all structured similarly, using a Python dictionary to store key-value pairs where the keys are English strings and the values are their translations in the respective language. The most interesting files are:</p> <ul> <li><code>my.py</code>: This file provides the Malay translation strings for the application. It includes translations for various UI elements, system messages, and other commonly used text in the application. For example, the key <code>'Hello World'</code> is translated to <code>'Halo Dunia'</code>. This file also includes format strings, such as <code>'%d days ago'</code> translated to <code>'%d hari yang lalu'</code> which is an important feature for applications that need to display localized times and dates.</li> <li><code>my-mm.py</code>: This file provides the Burmese translation strings for the application. It follows the same structure as <code>my.py</code> but includes a different set of translated strings. For example, the key <code>'Hello World'</code> is translated to <code>'\u1019\u1004\u103a\u1039\u1002\u101c\u102c\u1015\u102b \u1000\u1019\u1039\u1018\u102c\u1000\u103c\u102e\u1038\u104b'</code>. It's also interesting to note that this file has the encoding <code>utf-8</code> specified, which allows the file to contain a different character set from that used in <code>my.py</code>.</li> <li><code>zh-tw.py</code>: This file provides the Traditional Chinese translations for the application. It also has format strings, such as <code>'%s %%{row} deleted'</code> translated to <code>\u5df2\u522a\u9664 %s \u7b46</code>, which is an important feature for applications that need to display localized times and dates. It also includes translations for plural forms of text.</li> <li><code>sk.py</code>: This file provides the Slovak translation strings. Like the other language files, it has the same structure. For example, the key <code>'Hello World'</code> is translated to <code>'Ahoj svet'</code>.</li> <li><code>de.py</code>: This file contains the German translations. For example, the key <code>'Hello World'</code> is translated to <code>'Hallo Welt'</code>. It also contains examples of Markmin syntax embedded in translations, for example <code>'@markmin\\x01**Hello World**': '**Hallo Welt**'</code>.</li> <li><code>plural-ru.py</code>, <code>plural-uk.py</code>, <code>plural-en.py</code>, <code>plural-es.py</code>, and <code>plural-cs.py</code>: These files are different from the others in this directory. Instead of key-value pairs, these contain key-value pairs where the values are lists of words. These are pluralization rules. For example, in <code>plural-ru.py</code>, the key <code>'\u0432\u044b\u0431\u0440\u0430\u043d\u0430'</code> has the value <code>['\u0432\u044b\u0431\u0440\u0430\u043d\u044b','\u0432\u044b\u0431\u0440\u0430\u043d\u043e']</code> which will determine how the word is declined in Russian.</li> <li><code>sv.py</code>: This file contains the Swedish translations. It also contains examples of Markmin syntax embedded in translations, for example <code>'@markmin\\x01An error occured, please [[reload %s]] the page': 'Ett fel har intr\u00e4ffat, var good [[reload %s]] denna sida'</code>.</li> <li><code>ru.py</code>: This file contains the Russian translations. It is similar to the other language files, but is interesting to note that it uses pluralization rules to handle the correct declension of words based on context (see <code>plural-ru.py</code>). For example, <code>%d days ago</code> is translated to <code>%d %%{\u0434\u0435\u043d\u044c} \u0442\u043e\u043c\u0443</code> which is a string that uses the keys in <code>plural-ru.py</code>.</li> <li><code>ro.py</code>: This file contains the Romanian translations. It is also similar to the other language files. It has a large number of translations that can be used to translate the application.</li> <li><code>it.py</code>: This file contains the Italian translations. It is also similar to the other language files. It has a large number of translations that can be used to translate the application.</li> <li><code>en-us.py</code>: This file contains the English (US) translations and is used as the default language, this also has an interesting format string that displays a variable percentage with the text. <code>%s%% of your donations will help OneZoom to provide easy access to scientific knowledge about biodiversity and evolution, and raise awareness about the variety of life on earth together with the need to conserve it.</code></li> <li><code>uk.py</code>: This file contains the Ukrainian translations. It is similar to the other language files, but is interesting to note that it uses pluralization rules to handle the correct declension of words based on context (see <code>plural-uk.py</code>). For example, <code>%d days ago</code> is translated to <code>%d %%{\u0434\u0435\u043d\u044c} \u0442\u043e\u043c\u0443</code> which is a string that uses the keys in <code>plural-uk.py</code>. This file also demonstrates the use of a Markmin tag to add styling to a string.</li> <li><code>cs.py</code>: This file contains the Czech translations and has a similar structure to all the others in this directory.</li> <li><code>pt.py</code>: This file provides the Portuguese translation strings.</li> <li><code>es.py</code>: This file provides the Spanish translations. It also has format strings, such as <code>'%s %%{row} deleted'</code> translated to <code>'%s %%{fila} %%{eliminada}'</code>, which is an important feature for applications that need to display localized times and dates. This file also uses pluralization rules (see <code>plural-es.py</code>).</li> <li><code>pl.py</code>: This file provides the Polish translations.</li> <li><code>ro.py</code>: This file contains the Romanian translations. It is also similar to the other language files. It has a large number of translations that can be used to translate the application.</li> <li><code>plural-en.py</code>: This file contains pluralization rules for English.</li> <li><code>plural-es.py</code>: This file contains pluralization rules for Spanish.</li> <li><code>plural-cs.py</code>: This file contains pluralization rules for Czech.</li> <li><code>fr-ca.py</code>: This file contains the French (Canadian) translations and demonstrates that multiple french translations can exist for different regions.</li> <li><code>zh-cn.py</code>: This file provides the Simplified Chinese translations for the application. It also has format strings, such as <code>'%s %%{row} deleted'</code> translated to <code>\u5df2\u5220\u9664 %s \u7b14</code>, which is an important feature for applications that need to display localized times and dates.</li> <li><code>id.py</code>: This file contains the Indonesian translations. It is also similar to the other language files. It has a large number of translations that can be used to translate the application.</li> <li><code>pt-br.py</code>: This file contains the Portuguese (Brazilian) translations and demonstrates that multiple Portuguese translations can exist for different regions.</li> <li><code>ar.py</code>: This file contains the Arabic translations. The directionality is specified in some translations such as 'direction: ltr'.</li> <li><code>hi.py</code>: This file provides the Hindi translations.</li> <li><code>nl.py</code>: This file provides the Dutch translations and also contains strings related to pluralization.</li> <li><code>ca.py</code>: This file provides the Catalan translations. It is also similar to the other language files, and contains a large number of translations.</li> <li><code>hu.py</code>: This file provides the Hungarian translations.</li> <li><code>tr.py</code>: This file provides the Turkish translations. It is also similar to the other language files, and contains a large number of translations.</li> <li><code>default.py</code>: This file serves as the default language and provides the base English translations. All other language files are based on this file, and this is what will be displayed if no language translation is found.</li> </ul> <p>In summary, the files within <code>OZtree/languages</code> collectively allow the OZtree application to be presented to users in different languages by providing a comprehensive set of translations for UI elements, messages, and other text used in the application. They also contain pluralization rules and the ability to embed Markmin syntax for styling purposes, and also contain date formatting strings, making them versatile for i18n and l10n.</p>"},{"location":"models/","title":"models","text":"<p>The <code>OZtree/models</code> directory contains the core data models and configuration for the OneZoom application. It defines how data is stored, accessed, and manipulated, and how the application is structured.</p> <p>Here's a breakdown of the key files and their roles:</p> <ul> <li> <p><code>_OZglobals.py</code>: This file initializes global variables and settings used throughout the application. It's crucial because it's executed first, setting up the environment for the other models. Key aspects of this file are:</p> <ul> <li>It defines bitwise flags for different language Wikipedia articles (<code>wikiflags</code>), which are used to determine which language versions of Wikipedia articles to display.</li> <li>It establishes a priority system for different sources of images and vernacular names (<code>src_flags</code>). Lower numbers indicate higher priority, allowing the application to prefer \"bespoke\" images and names provided by clients or OneZoom over those from external sources like EoL or Wikipedia.</li> <li>It sets up a table for converting between different language codes (<code>conversion_table</code>).</li> <li>It defines a set of tab definitions (<code>tab_definitions</code>), which control the display of various external data sources such as Wikipedia, EoL, and IUCN.</li> <li>It uses a <code>cache.ram</code> function which acts as a simple in-memory cache to ensure the various dictionaries (e.g. <code>wikiflags</code>, <code>src_flags</code>) are only created once (or after the <code>time_expire</code> period, if given), thus preventing a computationally expensive function (<code>lambda</code> expressions) from being called every time.</li> <li>It makes all the global dictionaries available in modules as <code>current.OZglobals</code>.</li> </ul> </li> <li> <p><code>menu.py</code>: This file configures the application's navigation menu, defining the structure and links for the main menu, as well as providing shortcuts for developers. The menu is divided into sections for \"Everyone\", \"Education\", \"Science\", and \"About us\", with each section containing links to relevant pages. It also includes a development menu with links to various web2py resources (when <code>DEVELOPMENT_MENU</code> is <code>True</code>).</p> </li> <li> <p><code>db.py</code>: This file defines the database schema using web2py's Database Abstraction Layer (DAL). It includes:</p> <ul> <li>Configuration settings for the database connection, including support for MySQL and SQLite.</li> <li>Definitions for numerous database tables, including <code>ordered_leaves</code>, <code>ordered_nodes</code>, <code>vernacular_by_ott</code>, <code>images_by_ott</code>, <code>reservations</code>, <code>prices</code>, <code>tour</code>, and many others. These tables store information about the tree of life, vernacular names, images, sponsorship data, tours, and other application data.</li> <li>Each table definition specifies field names, types, constraints, and formatting. </li> <li>Many of the fields are of type <code>integer</code>, but these are used to represent foreign keys or priority flags. Where appropriate a <code>Field</code> is of type <code>reference</code> to link one table to another, e.g. the <code>user_id</code> field in the <code>reservations</code> table links to the <code>auth_user</code> table.</li> <li>There are also some fields of type <code>text</code> where arbitrary length text can be stored (e.g. a long quote), or type <code>boolean</code>, or type <code>datetime</code></li> <li>The tables use a \"one table per class\" strategy for object-relational mapping, with related data like \"vernacular names\" or \"images\" stored in their own tables rather than as fields in the \"nodes\" or \"leaves\" tables, which avoids large and cumbersome tables. The exception is the <code>ordered_leaves</code> and <code>ordered_nodes</code> tables which store information about the core topology of the tree, in a structure that supports fast searches using a nested-set algorithm.</li> <li>The <code>db.define_table</code> calls are wrapped in code that only creates an index for an SQLite database (since index creation in mySQL is different).</li> </ul> </li> </ul> <p>These files work together to form the foundation of the OneZoom application:</p> <ul> <li><code>_OZglobals.py</code> provides the essential application settings, and the source of many variables in the <code>current.OZglobals</code> namespace.</li> <li><code>menu.py</code> defines the application's navigation structure.</li> <li><code>db.py</code> sets up the database schema that stores the information required by the application.</li> </ul> <p>The files in this directory are crucial for the core functionality of the OneZoom application, including data storage, data access, user navigation, and application configuration.</p>"},{"location":"modules/","title":"modules","text":"<p>The <code>OZtree/modules</code> directory contains a collection of Python modules that provide various functionalities for the OneZoom application. These modules encapsulate specific logic and are used by the controllers and other parts of the application. Here's a breakdown of the key modules and how they work together:</p> <ul> <li><code>tour.py</code>: This module deals with tours. It provides functions to retrieve tours related to specific OTTs (<code>tours_related_to_ott</code>), generate URLs for tours (<code>tour_url</code>), and search for tours based on keywords (<code>tour_search</code>).</li> <li><code>partners.py</code>: This module manages partner-related information. It provides functions to retrieve partner definitions (<code>partner_definitions</code>), extract partner identifiers from a reservation name (<code>partner_identifiers_for_reservation_name</code>), and convert partner identifiers into a reservation name (<code>partner_identifiers_to_reservation_name</code>).</li> <li><code>img.py</code>: This module is responsible for handling images. It defines functions to generate thumbnail paths (<code>thumb_path</code>), create URLs for images based on their source and ID (<code>url</code>, <code>thumb_url</code>), and provide a JavaScript function to generate thumbnail URLs on the client-side (<code>js_thumb_url</code>).</li> <li><code>markdown.py</code>: This module provides a wrapper around the <code>Markdown</code> library to convert Markdown formatted text to HTML. It initializes a <code>Markdown</code> object with safe mode enabled and provides a function that can be called from other modules.</li> <li><code>usernames.py</code>: This module handles the creation and management of usernames. It includes functions to generate unique usernames based on a given name (<code>make_username</code>), find existing usernames based on various criteria (<code>find_username</code>), retrieve donor names associated with a username (<code>donor_name_for_username</code>), retrieve email addresses associated with a username (<code>email_for_username</code>), and retrieve all usernames associated to an email (<code>usernames_associated_to_email</code>).</li> <li><code>ozmail.py</code>: This module provides functionality for sending emails. It includes functions to obtain a mailer object with the correct settings (<code>get_mailer</code>), normalize whitespace in email messages (<code>normalize_whitespace</code>), and generate email messages from templates (<code>template_mail</code>).</li> <li><code>__init__.py</code>: This is an empty file that makes the <code>modules</code> directory a Python package.</li> <li><code>sponsorship_search.py</code>: This module is responsible for searching for sponsorships. It provides a function to search for sponsorships based on keywords and a search type (<code>search_sponsor</code>), returning the results as a dictionary containing information about the matching reservations, leaves and associated common names.</li> <li><code>OZfunc.py</code>: This module contains various utility functions used throughout the application, including private functions marked with double underscores. It includes functions to check the tree version (<code>__check_version</code>), get release information (<code>__release_info</code>), determine primary languages (<code>lang_primary</code>), construct a query for child leaves (<code>child_leaf_query</code>), determine the \"score\" of a vernacular name match (<code>score</code>), add \"the\" to a common name (<code>add_the</code>), create a nice name string combining scientific and common names (<code>nice_name</code>), get common names (<code>get_common_names</code>, <code>get_common_name</code>), get nice names from OTTs (<code>nice_name_from_otts</code>), perform language conversions (<code>language</code>), clean text (<code>punctuation_to_space</code>), determine if a language is logographic (<code>is_logographic</code>), check acceptability of scientific names (<code>acceptable_sciname</code>), create random user codes (<code>__make_user_code</code>), force HTTPS connections (<code>require_https_if_nonlocal</code>), extract summaries from HTML strings (<code>extract_summary</code>), and get detailed node information (<code>nodes_info_from_array</code>, <code>nodes_info_from_string</code>). It also contains functions to convert OTTs to IDs (<code>otts2ids</code>) and format currency (<code>fmt_pounds</code>).</li> <li><code>embed.py</code>: This module handles embedding media content in the application. It includes functions to embed URLs with an embed key (<code>embedize_url</code>), and generate embed code for various media types (<code>media_embed</code>) including images, YouTube videos, Vimeo videos, and Wikimedia Commons files.</li> <li><code>pinpoint.py</code>: This module deals with resolving pinpoint strings to their corresponding database entries. It provides functions to find the common ancestor of a list of OTTs (<code>common_ancestor_of_otts</code>), resolve a pinpoint string to a row in either the <code>ordered_nodes</code> or <code>ordered_leaves</code> table (<code>resolve_pinpoint_to_row</code>), convert latin names to pinpoint-friendly format (<code>tidy_latin</code>), and revert pinpoint-friendly names to latin names (<code>untidy_latin</code>).</li> <li><code>sponsorship.py</code>: This module manages the sponsorship functionality in the application. It includes functions to retrieve sponsorship configurations (<code>sponsorship_config</code>), check if sponsorship is enabled (<code>sponsorship_enabled</code>), retrieve total counts of donors or sponsored OTTs (<code>reservation_total_counts</code>), clear data from a reservation row (<code>clear_reservation</code>), expire a reservation (<code>reservation_expire</code>), validate reservation basket fields (<code>reservation_validate_basket_fields</code>), add a reservation to a basket (<code>reservation_add_to_basket</code>), confirm payment for reservations in a basket (<code>reservation_confirm_payment</code>), get the sponsorship status of a leaf (<code>sponsorship_get_leaf_status</code>), get a reservation for an OTT (<code>get_reservation</code>), get a query of sponsorable children of a given node (<code>sponsorable_children_query</code>), get a list of sponsorable children (<code>sponsorable_children</code>), generate HMAC keys for signed URLs (<code>sponsor_hmac_key</code>), generate signed URLs (<code>sponsor_signed_url</code>), verify a signed URL (<code>sponsor_verify_url</code>), generate email reminders for renewals (<code>sponsorship_email_reminders</code>), process sponsor renewal requests (<code>sponsor_renew_request_logic</code>), log email reminders (<code>sponsorship_email_reminders_post</code>), and set users to not be contacted any more (<code>sponsorship_restrict_contact</code>).</li> </ul> <p>These modules work together to provide a comprehensive set of functionalities for the OneZoom application. For example, <code>sponsorship.py</code> relies on <code>OZfunc.py</code> to get common names, and on <code>usernames.py</code> to get e-mail addresses, <code>ozmail.py</code> to send e-mails, <code>partners.py</code> to manage partner-related information. Similarly, <code>img.py</code> is used by <code>embed.py</code> to generate URLs for images. The modules are designed to be modular and reusable, making the codebase more maintainable and easier to extend.</p>"},{"location":"private/","title":"private","text":"<p>The <code>OZtree/private</code> directory contains configuration and background task scripts for the OneZoom application.</p> <p>The <code>appconfig.ini.example</code> file is a crucial configuration file for the application. It uses an INI format to store various settings, including:</p> <ul> <li>Database: Database connection settings (e.g., database URI, migration options).</li> <li>SMTP: Email server configuration for sending emails.</li> <li>Twitter: Settings related to Twitter.</li> <li>Forms: Styling for HTML forms.</li> <li>Paypal: PayPal settings.</li> <li>General: General application settings.</li> <li>Images: URL for retrieving thumbnail images. It's important to note that by default, this points to <code>//images.onezoom.org/</code>, which hosts the images for the main OneZoom site.</li> <li>Sponsorship: Options controlling the display and handling of sponsorships, including maintenance mode, reservation time limits, and other financial settings. The license does not allow users to set <code>allow_sponsorship = 1</code> unless it is the main OneZoom site.</li> <li>API: Configuration for external APIs, specifically for the Encyclopedia of Life (EOL).</li> <li>Analytics: Settings for Google Analytics and CivicUK's Cookie Control.</li> </ul> <p>The <code>my.cnf</code> file configures the MySQL database server to enable local file loading. This is essential for the application to be able to read data from local files into the database.</p> <p>The <code>background_tasks.py</code> file is a script that executes background tasks, such as:</p> <ul> <li>Expiring old sponsorships:  It checks for and expires sponsorships that have exceeded their time limits, making the associated leaf available for new sponsors.</li> <li>Sending email reminders: It handles sending email reminders for sponsorship renewals. It generates personalized emails using templates and the <code>ozmail</code> library, also utilizing the <code>nice_name_from_otts</code> function from <code>OZfunc</code> to generate nice names for sponsored leaves. </li> </ul> <p>This script is designed to be run from the command line with the hostname of the instance as an argument. It supports various options like <code>dry-run</code> (to test without making changes), <code>log-email</code> (to log emails to files), and <code>verbose</code> (to provide more detailed output during execution). This script is crucial for the day-to-day operation of the OneZoom system, ensuring that sponsorships are managed correctly and users receive timely notifications.</p>"},{"location":"sessions/","title":"sessions","text":"<p>The <code>OZtree/sessions</code> directory is used to store session data.</p> <p>The <code>.gitignore</code> file at <code>OZtree/sessions/.gitignore</code> is configured to ignore all files within the directory except for itself. This is used to prevent accidental commits of temporary session data to the repository.</p>"},{"location":"static/","title":"static","text":"<p>The <code>OZtree/static</code> directory serves as a central repository for all static assets required by the OZtree project. These assets include JavaScript, CSS, image, and font files. The files within this directory are used to provide the visual appearance and interactive functionality of the OZtree web application.</p> <p>The main subdirectories within <code>OZtree/static</code> are:</p> <ul> <li><code>uikit-3</code>: Contains a copy of the UIkit 3 framework, likely for UI components.</li> <li><code>OZLegacy</code>: A large directory containing all the static assets for the OZLegacy visualization tool, with subdirectories for scripts, CSS, and user data. This directory contains a number of subdirectories including:<ul> <li><code>OZLegacy/scripts</code> contains the JavaScript files for the interactive elements of the OZtree visualization, including the core rendering logic in <code>OZ_script_V1.2.original.js</code>, the UI configuration logic in <code>select_options.js</code>, and UI generation logic in <code>autoGenerator.js</code>.</li> <li><code>OZLegacy/OZ_W_1_fish</code>, <code>OZLegacy/OZ_W_1_Pyron</code>, <code>OZLegacy/OZ_W_Soltis</code>, and <code>OZLegacy/OZ_W_WPD</code> each contain the core logic and data necessary for rendering a specific phylogenetic tree (fish, pyron, soltis, and porifera respectively). They contain a <code>JScode_W_10.js</code> file for core rendering logic, a <code>*_data_locator_num3.js</code> for tree data, a <code>*_soption.js</code> file for default options and <code>User_options_13*.js</code> (or <code>User_options_14.js</code>) for styling and user preferences.</li> <li><code>OZLegacy/css</code> contains a collection of CSS files that control the styling and layout of the OZLegacy visualization, including styles for various screen sizes in <code>indexstyle*.css</code>, embedded content in <code>embedded.css</code> and <code>front_iframe.css</code>, and the generator page <code>generatorStyle*.css</code>.</li> <li><code>OZLegacy/user</code> contains JavaScript data files, including tree data and options for various visualizations, such as <code>plants_min.js</code> and <code>userOptions_river.js</code>, that together render the plant tree.</li> <li><code>OZLegacy/bootstrap</code> contains the Bootstrap framework, including CSS (<code>bootstrap.css</code>, <code>bootstrap-responsive.css</code>, and their minified versions in the <code>css</code> subdirectory) and JavaScript (<code>bootstrap.js</code> and <code>bootstrap.min.js</code> in the <code>js</code> subdirectory).</li> </ul> </li> <li><code>images</code>: Stores image assets, including logos, icons, and other graphics. This includes the <code>DarwinDinos</code> subdirectory with images licensed for non-commercial use only.</li> <li><code>otop</code>: Contains static files for the \"One Tree, One Planet\" feature, including SVG images of environmental challenges, CSS for styling, an HTML file that generates the challenge page, and <code>backgrounds.js</code>, which adds floating tree, particle, and haze effects.</li> <li><code>css</code>: Contains CSS files for the OZtree application, including <code>calendar.css</code>, <code>web2py-bootstrap3.css</code>, <code>web2py.css</code>, and <code>web2py-bootstrap4.css</code>, which are used to style different parts of the application with various bootstrap styles.</li> <li><code>tour</code>: Holds CSS files for the interactive tour functionality, including the exit confirmation popup (<code>exit_confirm.css</code>) and the main tutorial window (<code>tutorial_template.css</code>).</li> <li><code>fonts</code>: Contains font files, including the custom SVG icon font <code>glyphicons-halflings-regular.svg</code>.</li> <li><code>OZSponsor</code>: Contains CSS and JavaScript files for the sponsor pages, including styling for tabular data, sponsor listings, and email display, and the JavaScript logic to retrieve data from the Encyclopedia of Life (EoL) API in <code>EOLqueries.js</code>.</li> <li><code>OZSite</code>: Contains CSS files for the OZtree application, including styling for setting prices (<code>SET_PRICES.css</code>), definition lists (<code>dataprotection_and_privacy.css</code>), the life text tree (<code>life_text.css</code>), manage pages (<code>MANAGE.css</code>), and lists of images (<code>list_images.css</code>).</li> <li><code>FinalOutputs</code>: Intended to store final data outputs, but only contains a subdirectory named <code>data</code> that is currently empty, and other files like <code>refs.txt</code> and <code>dups.ott</code> for the final output processing.</li> <li><code>font</code>: Contains a custom SVG icon font called <code>fontello.svg</code>, which provides icons like <code>cog</code>, <code>location</code>, and <code>info-circled</code>.</li> <li><code>OZTreeModule</code>: Contains the source code for the OZTree module. The <code>dist</code> subdirectory contains build artifacts.</li> <li><code>js</code>: Contains JavaScript files for enhancing the OZtree application, including <code>canvas2svg.js</code>, which converts canvas drawings to SVG, <code>web2py.js</code>, the core of the web2py javascript framework, libraries for QR code generation (<code>qrcode.min.js</code>) and Bootstrap (<code>bootstrap.min.js</code>), social sharing (<code>share.js</code>), a full and minified version of jQuery (<code>jquery.js</code> and <code>jquery.min.js</code>), and a couple of libraries for responsive design and browser feature detection (<code>respond-1.4.2.min.js</code>, <code>modernizr-2.8.3.min.js</code>), along with files to enhance the calendar widget (<code>calendar.js</code>) and adapt web2py for bootstrap 3 (<code>web2py-bootstrap3.js</code>).</li> </ul> <p>The single file, <code>.gitignore</code>, in this directory specifies that most CSS files, gzipped files in <code>OZSponsor</code>, and any user-created HTML files should be ignored by Git, along with the exception of a few CSS files that are part of web2py, bootstrap, or the calendar. The <code>.gitignore</code> files within <code>OZTreeModule</code> and <code>OZTree</code> handle their respective subdirectories.</p> <p>In summary, the <code>OZtree/static</code> directory serves as the foundation for the OZtree web application, providing the core structure for displaying the user interface and managing its interactive elements.</p>"},{"location":"static/FinalOutputs/","title":"FinalOutputs","text":"<p>The <code>OZtree/static/FinalOutputs</code> directory is intended to hold the final outputs of the OZtree project. It contains a mix of data, configuration, and documentation-related files.</p> <p>The <code>OZtree/static/FinalOutputs</code> directory contains one subdirectory, <code>data</code>, which is currently empty and intended to store the final data outputs of the OZtree project.</p> <p>The directory also contains several files:</p> <ul> <li> <p><code>refs.txt</code> is a plain text file containing a list of Digital Object Identifiers (DOIs) and personal communications. These DOIs likely represent publications that are relevant to the OZtree project. This file serves as a reference list for the project.</p> </li> <li> <p><code>.gitignore</code> specifies intentionally untracked files that Git should ignore. It includes <code>pics</code>, <code>img/*/</code>, and <code>data/*</code>, indicating that the project intentionally does not track these directories.  This could be because these files are generated, too large, or not needed in the repository.</p> </li> <li> <p><code>dups.ott</code> appears to be a file that identifies duplicate Open Tree of Life (OTT) IDs, with the number of occurences of each ID listed to the left of the ID. This is likely a list of OTT IDs that need to be reviewed or further processed.</p> </li> </ul>"},{"location":"static/FinalOutputs/data/","title":"data","text":"<p>The <code>OZtree/static/FinalOutputs/data</code> directory is currently empty. It is intended to hold data files that are the final output of the OZtree project, but there are currently no such files in the directory.</p>"},{"location":"static/OZLegacy/","title":"OZLegacy","text":"<p>The <code>OZtree/static/OZLegacy</code> directory serves as a container for all static assets required by the OZLegacy visualization tool. It holds code, stylesheets, and data necessary to render the interactive visualizations.</p> <p>The <code>scripts</code> subdirectory is a core component, containing a variety of JavaScript files that drive the functionality and behavior of the OZtree visualizations. Notably, <code>index.js</code> initializes the interactive tree visualization and handles UI interactions. It loads the visualizations within an iframe and controls button behaviors. The file <code>select_options.js</code> defines the configuration options for the tree view, including color schemes, fonts, and layout settings.  <code>autoGenerator.js</code> dynamically generates HTML for the user interface controls based on data from <code>select_options.js</code>.  <code>auxiliaryFunction.js</code> is an important utility library of helper functions that manipulate the state of the visualization.  The primary rendering logic is found in <code>OZ_script_V1.2.original.js</code>, which parses tree data and handles rendering and user interactions.  The other scripts provide color selection (<code>spectrum.js</code> and <code>spectrum.css</code>), jQuery support (<code>jquery-1.10.2.min.js</code>), and randomly selected taxa for different groups (e.g., <code>plants_taxa_random.js</code>).</p> <p>The <code>OZ_W_1_fish</code> subdirectory contains the JavaScript files to display the fish tree. Of importance are <code>fish_data.js</code>, which defines the data and structure of the fish tree visualization, and <code>JScode_W_10.js</code>, which manages the rendering logic, user interactions, and the search and animation functionality.  <code>mammals_soption.js</code> controls configurable options, and  <code>User_options_13.js</code> holds color mapping and tree-drawing logic.</p> <p>The <code>css</code> subdirectory contains CSS stylesheets for different parts of the application, including the main layout and styling for different devices (<code>indexstyle.css</code> and its variations: <code>indexstyle_ms.css</code>, <code>indexstyle_l.css</code>, and <code>indexstyle_s.css</code>).  Other files include  <code>embedded.css</code> and <code>front_iframe.css</code>, for styling content within iframes, and <code>generatorStyle.css</code> and  <code>generatorStyle copy.css</code> for styling the generator page.  Finally, <code>style.css</code> provides some basic styles for the entire page.</p> <p>The <code>user</code> subdirectory holds data and settings specific to different visualizations. For example, <code>plants_min.js</code> contains data and metadata for the plant tree, and <code>userOptions_river.js</code> stores user configuration options for the same.  There are also data files for other visualizations, including <code>Euphorbia_2014_tree.js</code> and <code>ADEPD_birds_nunes_etal_2015_tree.js</code>.</p> <p>The <code>OZ_W_1_Pyron</code> subdirectory contains the logic to render the phylogenetic tree from data.  Of primary importance are <code>ps_soption.js</code>, which provides default settings; <code>JScode_W_10.js</code>, the main logic for drawing, manipulating and rendering the tree; and <code>User_options_13PS.js</code>, which handles the visual appearance based on user settings.  The data structure is defined in <code>ps_data_locator_num3.js</code>.</p> <p>The <code>OZ_W_Soltis</code> subdirectory contains files specific to displaying the plant tree according to the Soltis et al. data.  The file <code>JScode_W_10.js</code> contains the core rendering and interaction logic, <code>plants_data_locator_num3.js</code> contains the tree data, and <code>plants_soption2.js</code> and <code>plants_soption.js</code> define user display options. The file <code>User_options_13.js</code> stores the color mapping and styling functions.</p> <p>The <code>bootstrap</code> subdirectory contains the Bootstrap framework, version 2.1.1, for front-end web development.  It includes <code>css</code> and <code>js</code> subdirectories, each with a minified and non-minified versions of core Bootstrap files (e.g., <code>bootstrap.min.css</code>, <code>bootstrap.js</code>) along with a responsive CSS file (e.g., <code>bootstrap-responsive.css</code>) and a license file. These files enable responsive layouts and standardized UI elements throughout the project.</p> <p>The <code>OZ_W_SFU</code> subdirectory holds the configuration file, <code>birds_soption.js</code>, which defines the default options for the bird tree visualization, such as colors, font, and level of detail, when used within the Simon Fraser University context.</p> <p>The <code>OZ_W_WPD</code> directory contains files to display the Porifera (sponge) tree.  Key components are  <code>porifera_data_locator_num3.js</code>, which provides the tree data, and <code>JScode_W_10.js</code>, which manages the rendering logic, and mouse and animation controls.  The  <code>porifera_soption.js</code> file defines defaults, while  <code>User_options_14.js</code> sets styles and contains some helper methods for the visualization.</p> <p>The <code>bootstrap/css</code> subdirectory contains the CSS files for the Bootstrap framework, including <code>bootstrap-responsive.min.css</code>, <code>bootstrap.css</code>, <code>bootstrap.min.css</code>, and <code>bootstrap-responsive.css</code>, offering a layout system and consistent styles for UI elements.</p> <p>The <code>bootstrap/js</code> subdirectory contains JavaScript files for Bootstrap, including the full set of interactive UI widgets in <code>bootstrap.js</code>, and a minified version in <code>bootstrap.min.js</code>.</p> <p>The <code>Euphorbia_2014.htm</code> file is an example of a visualization based on the Euphorbia genus, using a modified version of the core JavaScript. It loads jQuery, the original OZ script, custom user options for the Euphorbia tree, and also includes the common stylesheet (<code>style.css</code>).  It sets initial parameters including a tracking ID. Similar HTML files, such as <code>embeded_EDGE_birds.htm</code> and <code>embeded_tetrapods.htm</code>, also display trees in an iframe using a similar structure, loading additional style files (<code>embedded.css</code>). The <code>EDGE_birds.htm</code> file displays a tree of birds based on EDGE data.  The <code>tetrapods_ballweg_arctic.htm</code> file uses a different set of options to render a different type of tetrapods tree. The file <code>plants_front_iframe.htm</code> displays a random plant tree in the main iframe, while  <code>amphibians_front_iframe.htm</code> does the same for amphibians. The file <code>Squamates_Pyron.htm</code> displays a tree of squamates based on the Pyron et al. (2013) data, and <code>vascularplants_tank2013nature.htm</code> displays a vascular plant tree using data from Tank et al. (2013).  The file <code>OZ_VPX361_amphibians.htm</code> is an example of the visualization with a different set of styling and button options and data.  All of these visualizations take advantage of the canvas drawing features provided by the jQuery library to render their results.  The file <code>embed.htm</code> is a custom html that generates the visualization with many options via JavaScript, and makes it easy for users to embed a wide variety of different visualizations using the JavaScript toolset provided.</p>"},{"location":"static/OZLegacy/OZ_W_1_Pyron/","title":"OZ_W_1_Pyron","text":"<p>The <code>OZtree/static/OZLegacy/OZ_W_1_Pyron</code> directory contains the core JavaScript files for rendering an interactive phylogenetic tree visualization. The primary function of these files is to take tree data (either in Newick format or a predefined dataset), perform necessary calculations, and render it onto a canvas element. It also includes code to handle user interactions like zooming, panning, searching, and animation of tree growth.</p> <p>Here's a breakdown of the most important files and how they work together:</p> <ul> <li> <p><code>ps_soption.js</code>: This file sets the initial parameters for the tree visualization. It defines variables for:</p> <ul> <li>Default viewing options: <code>polytype</code>, <code>viewtype</code>, <code>colourtype</code>, <code>leaftype</code></li> <li>Font and color settings: <code>fonttype</code>, <code>intnodetextcolor</code>, <code>backgroundcolor</code>, <code>outlineboxcolor</code></li> <li>Control over labels and interior node circles: <code>auto_interior_node_labels</code>, <code>innode_label_help</code>, <code>commonlabels</code>, <code>intcircdraw</code></li> <li>Text and mouse sensitivity options: <code>mintextsize</code>, <code>sensitivity</code>, <code>threshold</code>, <code>thresholdtxt</code></li> <li>Search behavior: <code>searchinteriornodes</code></li> <li>Animation behavior: <code>growthtimetot</code></li> </ul> <p>This file essentially sets the stage for how the tree will be rendered initially. These values can be changed by the user through buttons to interact with the tree.</p> </li> <li> <p><code>JScode_W_10.js</code>: This is the main logic file. It contains:</p> <ul> <li>Functions for drawing leaves (<code>drawleaf1</code>, <code>drawleaf2</code>). These determine the visual style of the leaf nodes on the tree.</li> <li>Global variable declarations for display size, zoom, pan, mouse controls, growth animations, search parameters and preferences.</li> <li><code>init()</code>: The primary initialization function. It sets up the canvas, adds event listeners for mouse interactions (zoom and pan), and calls <code>readintree()</code> to parse the tree data.</li> <li><code>readintree()</code>: Parses the tree data (from form input or embedded dataset) and creates a <code>midnode</code> object representing the root of the tree and precalculates data for display and interaction.</li> <li><code>Resize()</code>: Handles resizing of the canvas when the browser window changes.</li> <li>Mouse interaction functions: <code>holdon</code>, <code>holdoff</code>, <code>movemouse</code>, <code>mousewheel</code>, <code>zoomin</code>, <code>zoomout</code>. These enable panning and zooming through mouse events.</li> <li>Button control functions: <code>clearbuttons</code>, <code>searchoptions</code>, <code>growoptions</code>, <code>viewoptions</code>, <code>dataoptions</code>. These functions handle the display and behavior of the user interface elements like button controls to change display options.</li> <li>Drawing routines: <code>draw2</code>. This function is responsible for drawing the tree structure onto the canvas, taking into account zoom level, pan position, and rendering detail based on <code>threshold</code>.</li> <li>Fractal form algorithms: <code>update_form</code>, <code>midnode.prototype.precalc*</code>, which define the various ways the tree can be drawn (e.g., radial, fractal).</li> </ul> <p>This file provides the core functionality to parse, draw, and manipulate the tree, and is where most of the interactive features are implemented.</p> </li> <li> <p><code>User_options_13PS.js</code>: This file contains code that defines how the tree should appear based on the options selected by the user or default options. It includes:</p> <ul> <li><code>redlistcolor(codein)</code>: A function that defines the colors to use when displaying nodes in redlist mode based on their conservation status.</li> <li><code>gpmapper(datein)</code>: A function that maps node ages to geological periods for use in the timeline feature.</li> <li><code>midnode.prototype.leafcolor1</code>, <code>midnode.prototype.leafcolor2</code>, <code>midnode.prototype.leafcolor3</code>: Functions that define leaf colors based on the color mode.</li> <li><code>midnode.prototype.branchcolor</code>: A function that defines branch colors, also based on color modes (e.g. by geological period).</li> <li>Functions to draw the leaves, like <code>midnode.prototype.fakeleaflogic</code>, <code>midnode.prototype.growthleaflogic</code>, and <code>midnode.prototype.tipleaflogic</code>.</li> <li>String manipulation functions to properly format dates and names for display.</li> <li>Functions for drawing the signposts <code>midnode.prototype.draw_sp_back</code> and <code>midnode.prototype.draw_sp_txt</code>, that handle the display of the common name, latin name, or genus when the user zooms in.</li> <li><code>midnode.prototype.draw</code>: function that handles drawing each node and branch</li> <li><code>midnode.prototype.leafdetail</code>: A function to display details for each leaf such as conservation status, and name.</li> <li>Functions to control the display of interior node names and the text on each leaf</li> </ul> <p>This file customizes the visual aspects of the tree based on the chosen options and handles how metadata is displayed. It also includes functions to define custom logic for drawing the leaves and their associated text.</p> </li> <li> <p><code>ps_data_locator_num3.js</code>: This file is responsible for providing the default tree data, if no tree data is passed in via the form. It also contains the constructor for the <code>midnode</code> object.</p> </li> </ul> <p>These files are all interconnected. <code>ps_soption.js</code> provides default settings to <code>JScode_W_10.js</code> which contains the core logic to process and display the tree. <code>User_options_13PS.js</code> then styles how the tree will appear based on these settings and provides ways to change the style based on various options. <code>ps_data_locator_num3.js</code> provides the underlying data and the <code>midnode</code> object that are used by all the other scripts.</p> <p>In summary, these files work together to create a functional interactive visualization of a phylogenetic tree, with a range of user controls and display options, including growth animation, search, and various color schemes.</p>"},{"location":"static/OZLegacy/OZ_W_1_fish/","title":"OZ_W_1_fish","text":"<p>The <code>OZtree/static/OZLegacy/OZ_W_1_fish</code> directory contains the JavaScript files necessary to render an interactive tree of life visualization, specifically focused on fish. The core functionality is split between data (<code>fish_data.js</code>) and rendering/interaction (<code>JScode_W_10.js</code>), with configuration and styling in <code>mammals_soption.js</code> and helper functions in <code>User_options_13.js</code>.</p> <p>Here's a breakdown of the key files:</p> <ul> <li><code>fish_data.js</code>: This file contains a single function, <code>userdata()</code>, which is responsible for creating the tree structure. This function instantiates a <code>midnode</code> object named <code>fulltree</code>.  The function's primary job is to define the phylogenetic tree data. It does so by constructing a nested string using the <code>midnode</code> class, which in this case encodes the relationships and branch lengths between different fish species and higher taxonomic groups. This data is then used by the other JavaScript files to render the tree.</li> <li> <p><code>JScode_W_10.js</code>: This is the main JavaScript file that handles the logic for rendering the tree visualization, user interactions, search functions, and animation. Key components and functionality include:</p> <ul> <li>Drawing Functions: <code>drawleaf1</code> and <code>drawleaf2</code> define how leaf nodes are rendered. <code>draw2</code> is the main function that draws the entire visualization.</li> <li>Initialization: The <code>init()</code> and <code>init2()</code> functions set up the canvas, event listeners for mouse actions, and call functions to read in tree data and set initial view properties.</li> <li>User Interaction: Event listeners for mouse events (<code>holdon</code>, <code>holdoff</code>, <code>movemouse</code>), and zoom via mousewheel (<code>mousewheel</code>), <code>zoomin</code>, and <code>zoomout</code> are defined to enable panning and zooming.</li> <li>Data Loading: The <code>readintree</code> function parses tree data and calculates species richness at various nodes.</li> <li>Display Management: Includes functions like <code>Resize</code>, <code>Reset</code> and <code>draw_loading</code> to manage canvas size, clear search results, reset the view to start position, and display loading screens.</li> <li>Search and Highlight: Functionality to search within the tree using <code>usersearchclear</code>, <code>usersearch</code>, <code>performsearch2</code>, and <code>marksearch</code>. Includes toggling highlights with <code>unmarksearch</code> and <code>marksearchchange</code>, and performs fly or leap animations (<code>performfly</code>, <code>performfly2</code>, <code>performleap</code>).</li> <li>Growth Animations: Functions like <code>growoptions</code>, <code>growstart</code>, <code>growrev</code>, <code>growpause</code>, <code>growplay</code>, <code>growend</code>, <code>growfaster</code>, <code>growslower</code>, <code>grow2</code>, and <code>grow3</code> provide the interactive growth animation feature.</li> <li>Button Logic: Functions such as <code>clearbuttons</code>, <code>reopenbuttons</code>, <code>searchoptions</code>, <code>growoptions</code>, <code>viewoptions</code>, <code>moreoptions</code>, <code>dataoptions</code>, <code>Closebar</code> define the button interaction logic of the visualization. </li> <li>Fractal Form Algorithms: <code>update_form</code>, <code>midnode.prototype.precalc</code>, <code>midnode.prototype.precalc2</code>, <code>midnode.prototype.precalc3</code>, and <code>midnode.prototype.precalc4</code> are used to precalculate positions and layout options of the tree.</li> <li>Text Drawing Tools: <code>autotext</code>, <code>autotext2</code> and <code>autotext3</code> define ways to draw text into the visualization.</li> <li>Information Bar: The <code>infobar</code> function manages the display of information at the top of the canvas.</li> <li>Link Handling: <code>Link2OZ</code>, <code>Link2DF</code>, <code>Link2Facebook</code>, and <code>Link2Twitter</code> functions manage links from the visualization.</li> <li>Popups: <code>drawremind</code>, <code>drawopen</code> functions assist with a help pop-up displayed on load. <code>AboutOZ</code>, and <code>LicenseOZ</code> display popups over the canvas.</li> </ul> </li> <li> <p><code>mammals_soption.js</code>: This file stores the user configurable settings and options for the tree.  It defines:</p> <ul> <li>Default View and Color: Variables for <code>polytype</code>, <code>viewtype</code>, <code>colourtype</code>, <code>leaftype</code>, <code>fonttype</code>, <code>intnodetextcolor</code>, <code>backgroundcolor</code>, and <code>outlineboxcolor</code>, as well as options to toggle <code>auto_interior_node_labels</code>, <code>commonlabels</code>, and <code>intcircdraw</code>.</li> <li>Interaction Settings: Controls for <code>mintextsize</code>, <code>sensitivity</code>, <code>threshold</code>, and <code>thresholdtxt</code>.</li> <li>Animation Control: Sets <code>growthtimetot</code>.</li> <li>Search Controls: Options to toggle drawing signposts or not and use interior nodes in search.</li> </ul> </li> <li> <p><code>User_options_13.js</code>: This file includes:</p> <ul> <li>Color Mapping: <code>redlistcolor</code> defines how different conservation statuses are colored.</li> <li>Geological Period Definitions: The <code>gpmapper</code> function maps dates to geological periods for use in animations and labels.</li> <li>Node Object Color Logic: Color functions, <code>midnode.prototype.leafcolor1</code>, <code>midnode.prototype.leafcolor2</code>, <code>midnode.prototype.leafcolor3</code>, <code>midnode.prototype.hitstextcolor</code>, <code>midnode.prototype.branchcolor</code>, <code>midnode.prototype.barccolor</code>, <code>midnode.prototype.highlightcolor</code>, <code>midnode.prototype.datetextcolor</code>, and <code>midnode.prototype.richnesstextcolor</code> define how nodes and branches are colored.</li> <li>Leaf Shape Logic: Functions like <code>midnode.prototype.fakeleaflogic</code>, <code>midnode.prototype.growthleaflogic</code>, and <code>midnode.prototype.tipleaflogic</code> define the shape of different leaves on the tree.</li> <li>Date &amp; Species Count Formatting: <code>midnode.prototype.datepart</code>, <code>midnode.prototype.datemed</code>, <code>midnode.prototype.datefull</code>, and <code>midnode.prototype.specnumfull</code> functions define how text details of nodes are displayed.</li> <li>Name Formatting: <code>midnode.prototype.iprimaryname</code> and <code>midnode.prototype.isecondaryname</code> determine what name is used for display purposes.</li> <li>Sign Post Logic: <code>midnode.prototype.draw_sp_back</code> and <code>midnode.prototype.draw_sp_txt</code> define how labels are drawn.</li> <li>Tree Drawing: <code>midnode.prototype.draw</code> implements the core tree-drawing logic and calls all the various graphical elements.</li> <li>Leaf Details: <code>midnode.prototype.leafdetail</code> is responsible for drawing details associated with a leaf, including names and conservation status.</li> <li>Link Logic: <code>midnode.prototype.links2</code>, <code>midnode.prototype.clearlinks</code>, and <code>midnode.prototype.wikilink</code> manage links associated with each node.</li> <li>Search Functions: <code>performsearch2</code>, <code>midnode.prototype.searchone</code>, and <code>midnode.prototype.searchtwo</code> implement the search functionality to find matching species or nodes.</li> <li>Red List status converters: <code>conconvert</code> and <code>conconvert2</code> convert codes to text for display.</li> <li>Pop Up Box Logic: <code>AboutOZ</code> and <code>LicenseOZ</code> define the structure and text within two popups in the visualization.</li> </ul> </li> </ul> <p>In summary, these files work together to load, render, and allow user interaction with a phylogenetic tree visualization focused on fish. The data file defines the tree, the javascript files handle the rendering, manipulation and features, option files allow users to modify the appearance and behavior of the display, while the user option files contains color and other logic for the display.</p>"},{"location":"static/OZLegacy/OZ_W_SFU/","title":"OZ_W_SFU","text":"<p>The <code>OZtree/static/OZLegacy/OZ_W_SFU</code> directory contains configuration files for the OZtree visualization. It defines parameters that control how the tree is rendered and how users interact with it.</p> <p>The file birds_soption.js is a JavaScript file that sets a variety of default options for the tree visualization. These options include:</p> <ul> <li><code>polytype</code>: Defines how polytomies (nodes with more than two branches) are displayed.</li> <li><code>viewtype</code>: Sets the default view of the tree.</li> <li><code>colourtype</code>: Determines the default coloring scheme, with a specific setting for redlist data.</li> <li><code>leaftype</code>: Specifies the leaf shape, either circular or natural.</li> <li><code>fonttype</code>: Sets the font for text labels in the tree.</li> <li><code>intnodetextcolor</code>: Specifies the color of text labels for internal nodes.</li> <li><code>backgroundcolor</code>: Sets the background color of the visualization.</li> <li><code>outlineboxcolor</code>: Specifies the color of the outline box.</li> <li><code>auto_interior_node_labels</code>: Toggles automatic labeling of monophyletic groups of genera.</li> <li><code>innode_label_help</code>: Controls whether 'namingtodo' labels are suppressed in interior nodes.</li> <li><code>commonlabels</code>: Determines if common names are prioritized over Latin names.</li> <li><code>intcircdraw</code>: Controls whether interior circles are drawn on the tree.</li> <li><code>mintextsize</code>: Sets the minimum size of displayed text.</li> <li><code>sensitivity</code>, <code>sensitivity2</code>, <code>sensitivity3</code>: Configures mouse sensitivity for various interactions.</li> <li><code>threshold</code>, <code>thresholdtxt</code>: Controls the detail threshold for rendering the tree.</li> <li><code>drawsignposts</code>: Toggles the display of signposts.</li> <li><code>searchinteriornodes</code>: Controls the ability to search interior nodes.</li> <li><code>growthtimetot</code>: Sets a total growth time, likely for animations.</li> </ul> <p>These options allow for significant customization of the tree visualization, such as the visual appearance, labeling, and user interaction. The <code>birds_soption.js</code> file acts as the central configuration for how the phylogenetic tree is rendered.</p>"},{"location":"static/OZLegacy/OZ_W_Soltis/","title":"OZ_W_Soltis","text":"<p>The <code>OZtree/static/OZLegacy/OZ_W_Soltis</code> directory contains the core logic and data for the OneZoom plant tree visualization. It includes JavaScript files that handle the drawing of the tree, user interactions, and data loading.</p> <p>Here's a breakdown of the key files and how they work together:</p> <ul> <li><code>JScode_W_10.js</code>: This file contains the main JavaScript logic for the interactive tree visualization.<ul> <li>It defines functions for drawing different types of leaves (<code>drawleaf1</code>, <code>drawleaf2</code>).</li> <li>It includes global variable declarations for display size, data, zoom, pan, mouse control, growth animations, flight animations, search functions, and preferences.</li> <li>It initializes the application (<code>init</code>, <code>init2</code>), reads in tree data (<code>readintree</code>), and handles canvas resizing (<code>Resize</code>, <code>Resize_only</code>).</li> <li>It manages mouse events for panning and zooming (<code>holdon</code>, <code>holdoff</code>, <code>movemouse</code>, <code>mousewheel</code>, <code>zoomin</code>, <code>zoomout</code>), along with button controls, and several related utility functions.</li> <li>It provides functions for searching the tree (<code>usersearchclear</code>), resetting the view (<code>userReset</code>, <code>Reset</code>), and text drawing utilities (<code>autotext</code>, <code>autotext2</code>, <code>autotext3</code>).</li> <li>It defines drawing routines for the information bar (<code>infobar</code>), the loading screen (<code>draw_loading</code>), and the main visualization (<code>draw2</code>).</li> <li>It implements fractal form algorithms and precalculations (<code>update_form</code> and the <code>midnode.prototype</code> functions for <code>precalc</code>, <code>precalc2</code>, <code>precalc3</code>, <code>precalc4</code>).</li> <li>It handles deep zoom rereferencing methods and node object basic calculations, providing methods for searching, moving, and calculating different aspects of the tree data (<code>search</code>, <code>searchtarget</code>, <code>move</code>, <code>setxyr</code>, <code>setxyr3r</code> etc.).</li> <li>It implements growth animation (<code>growstart</code>, <code>growrev</code>, <code>growpause</code>, <code>growplay</code>, <code>growend</code> and related functions) and flight animation (<code>performfly</code>, <code>performfly2</code>).</li> <li>It contains functions for displaying pop-up text (<code>popup_search</code>, <code>popup_grow</code>, etc.).</li> <li>This file is the core of the visualization, handling the majority of the interactive elements and rendering.</li> </ul> </li> <li><code>plants_data_locator_num3.js</code>: This file contains the actual tree data in Newick format, embedded within the <code>userdata()</code> function. This data is used to construct the tree visualization. This file is necessary to have data if no data is entered in via user input.</li> <li><code>plants_soption2.js</code> and <code>plants_soption.js</code>: These files define default viewing options for the tree, such as the polytomy display style (<code>polytype</code>), the view type (<code>viewtype</code>), color scheme (<code>colourtype</code>), font, colors, text sizes, zoom sensitivity, detail threshold, signpost drawing, interior node searching, and animation speed. These files are very similar with only minor differences in the viewtype that is set.</li> <li><code>User_options_13.js</code>: This file provides customization options for the visualization.<ul> <li>It defines functions for color coding based on redlist status (<code>redlistcolor</code>) and mapping geological periods (<code>gpmapper</code>).</li> <li>It sets branch colors based on the view type, and includes the functionality to change the colors based on the conservation status of a group.</li> <li>It provides functions for setting the fill and text colors of the leaves and branches and highlight colors.</li> <li>It includes the leaf drawing logic by calling drawleaf1 and drawleaf2</li> <li>It includes functions for determining if a leaf link was clicked.</li> <li>It defines how the text of nodes is displayed (<code>leafdetail</code>), and functions related to node labels.</li> <li>It defines the <code>midnode.prototype.draw()</code> function for the main recursive draw function of the tree.</li> <li>It also contains the core search routine to find results in the nodes with various search parameters.</li> <li>It implements the popup box functionality.</li> </ul> </li> </ul> <p>How they work together:</p> <ol> <li>Initialization: <code>JScode_W_10.js</code> sets up the canvas, loads the tree data, sets the canvas size, and centers the view on the tree. Default settings are sourced from <code>plants_soption2.js</code> or <code>plants_soption.js</code>.</li> <li>Data:  The tree data is sourced from the <code>userdata()</code> function in <code>plants_data_locator_num3.js</code>. This data is parsed and used to create the hierarchical structure of the tree.</li> <li>Rendering: <code>JScode_W_10.js</code> uses the functions in <code>User_options_13.js</code> to determine color, text, and styling for the different components of the tree (branches, leaves, node labels).</li> <li>Interaction: User interactions like zooming, panning, and searching are handled in <code>JScode_W_10.js</code>.</li> <li>Customization: The visualization is customized by various options set in <code>plants_soption2.js</code> or <code>plants_soption.js</code>, such as color schemes, branch forms, and text styles, which can be changed through user interface elements. The various node labels and colors can also be customized using functions within the <code>User_options_13.js</code> file.</li> </ol> <p>In summary, <code>JScode_W_10.js</code> is the main driver, <code>plants_data_locator_num3.js</code> provides the tree data, <code>plants_soption2.js</code> and <code>plants_soption.js</code> control the default visual appearance, and <code>User_options_13.js</code> defines how different tree elements are colored and styled based on user options or node properties.</p>"},{"location":"static/OZLegacy/OZ_W_WPD/","title":"OZ_W_WPD","text":"<p>The <code>OZtree/static/OZLegacy/OZ_W_WPD</code> directory contains the JavaScript code for rendering an interactive tree of life visualization, specifically focused on the Porifera (sponges). This visualization is part of the OZtree project. The files within this directory work together to fetch, process, and display the tree data, as well as handle user interactions.</p> <p>Here's a breakdown of the key files and their roles:</p> <ul> <li> <p><code>porifera_data_locator_num3.js</code>: This file is a data file, not executable code. It defines the <code>userdata()</code> function, which initializes the <code>fulltree</code> variable with a Newick formatted string, which encodes the Porifera tree. The string includes taxonomic names, and node IDs, and conservation status information (e.g., <code>133939_LC_S</code> means node ID 133939 and conservation status \"Least Concern\" and \"Stable\"). The <code>fulltree</code> variable is used by other JavaScript files in this directory to build and display the tree visualization. The comments in this file show previous versions of the tree, including one with no color codes, one with color codes, and one with both color codes and italics.</p> </li> <li> <p><code>JScode_W_10.js</code>: This is the core logic file that handles the visualization of the tree.</p> <ul> <li>It initializes the canvas and sets up event listeners for user interactions (mouse clicks, mouse wheel scrolling) for panning and zooming.</li> <li>It reads in tree data using the <code>userdata()</code> function from <code>porifera_data_locator_num3.js</code> or from a user-provided text field.</li> <li>It includes functions to calculate and draw the tree structure, including branches and leaves, using different fractal forms. The file also defines <code>drawleaf1</code> and <code>drawleaf2</code> which are different ways to draw the leaves of the tree.</li> <li>It manages zoom and pan functionality. The <code>holdon</code>, <code>holdoff</code>, and <code>movemouse</code> functions handle panning with mouse drags. The <code>mousewheel</code>, <code>zoomin</code> and <code>zoomout</code> functions provide zoom functionality.</li> <li>It implements search functionality allowing users to highlight parts of the tree by names or conservation status.</li> <li>It manages a growth animation feature which causes the tree to grow over time.</li> <li>It also manages a view with an info bar.</li> <li>The function <code>init()</code> initializes and draws the tree, the event listeners, and the initial view. The <code>Resize()</code> function handles canvas resizing to fit the browser window. The draw2() function draws the tree itself.</li> <li>This file also handles link clicks for more information.</li> </ul> </li> <li> <p><code>porifera_soption.js</code>: This file defines global variables that control the appearance and behavior of the tree visualization.</p> <ul> <li>It sets default values for parameters like the type of polytomy representation, the view type, color scheme, leaf style, font, zoom sensitivity, and level of detail.</li> <li>These variables are used by <code>JScode_W_10.js</code> to determine how the tree is rendered. This file also defines the minimum text size used in the visualization.</li> </ul> </li> <li> <p><code>User_options_14.js</code>: This file contains helper functions for the main JavaScript logic and definitions of some styles.</p> <ul> <li>It defines functions to convert redlist codes to colors. It defines <code>gpmapper</code> to convert a geological date to a geological period and to label data on the tree.</li> <li>It contains the logic to define the color scheme and the styles for leaves and nodes in the <code>leafcolor1</code>, <code>leafcolor2</code>, <code>leafcolor3</code>, <code>hitstextcolor</code>, <code>branchcolor</code>, <code>barccolor</code> <code>highlightcolor</code> <code>highlightcolor2</code> <code>datetextcolor</code> and <code>richnesstextcolor</code> functions.</li> <li>It contains the logic to draw specific leaf types in <code>fakeleaflogic</code>, <code>growthleaflogic</code>, and <code>tipleaflogic</code>.</li> <li>It has the string functions for dates and specification numbers. It implements the functions to specify primary and secondary names.</li> <li>It defines how links to an external webpage and email addresses should be handled in <code>links2</code>, <code>links2_w</code>, <code>links2_e</code> <code>leaflink</code>, <code>leaflink_w</code>, <code>leaflink_e</code>, <code>clearlinks</code>, <code>wikilink</code>, <code>weblinkgo</code> and <code>emailgo</code> functions</li> <li>It includes code to convert text for conservation status and population stability.</li> <li>It also includes the <code>midnode</code> object, which is the main datatype for the tree used to store the node and its properties.</li> </ul> </li> </ul> <p>These files work together to create an interactive visualization of the Porifera tree of life: *  <code>porifera_data_locator_num3.js</code> provides the data, which <code>JScode_W_10.js</code> reads, processes and uses to draw the tree according to parameters defined in <code>porifera_soption.js</code> and logic and styles described in <code>User_options_14.js</code>.  * The <code>midnode</code> object in <code>User_options_14.js</code> is used to process and display the data. It performs all the precalculations to allow for fast drawing of all graphics elements using methods like <code>precalc</code>, <code>precalc2</code>, <code>precalc3</code>, <code>precalc4</code> and methods to calculate and store properties of the tree such as <code>richness_calc</code>, <code>concalc</code>, <code>name_calc</code>, <code>phylogeneticdiv_calc</code>, <code>age_calc</code>, <code>inlabel_calc</code> and <code>academic_calc</code>. * Methods such as <code>draw</code>, <code>drawreg</code>, <code>drawreg2</code>, and <code>draw_sp_back</code> <code>draw_sp_txt</code> are responsible for recursively drawing all the branches, leaves, and names on the screen. * User interaction is handled by many methods in <code>JScode_W_10.js</code> such as <code>holdon</code>, <code>holdoff</code>, <code>movemouse</code> and <code>mousewheel</code> and all the functions that link to a specific button on the display.</p> <p>In summary, this directory contains the necessary JavaScript code to render a complex tree visualization in a web browser, providing an interactive way to explore the relationships within the Porifera.</p>"},{"location":"static/OZLegacy/bootstrap/","title":"bootstrap","text":"<p>The <code>OZtree/static/OZLegacy/bootstrap</code> directory contains the Bootstrap framework, version 2.1.1, used for styling and interactivity on the OZLegacy website. It includes subdirectories for CSS and JavaScript assets, as well as a license file.</p> <p>The <code>css</code> subdirectory contains the CSS files:</p> <ul> <li> <p><code>bootstrap-responsive.min.css</code>: This file is a minified version of the responsive CSS for Bootstrap. It uses media queries to apply specific styles based on screen dimensions for devices like phones, tablets, and desktops. For example, it contains styles for classes such as <code>.visible-phone</code>, <code>.visible-tablet</code>, and <code>.hidden-desktop</code>, which can be used to control the visibility of elements depending on the device.</p> </li> <li> <p><code>bootstrap.css</code>: This is the core CSS file for the Bootstrap framework, defining base styles for typography, grids, forms, buttons, navigation, and other UI components. It uses a grid system based on spans (e.g. <code>span1</code>, <code>span2</code>, ..., <code>span12</code>) and includes styles for helper classes such as <code>.clearfix</code>, <code>.hide-text</code>, and <code>.input-block-level</code>.</p> </li> <li> <p><code>bootstrap.min.css</code>: This is a minified version of <code>bootstrap.css</code>, optimized for production by removing unnecessary whitespace and comments.</p> </li> <li> <p><code>bootstrap-responsive.css</code>: This file contains the unminified responsive CSS for Bootstrap, which allows the layout to adapt to different screen sizes using media queries and visibility classes.</p> </li> </ul> <p>These files work together to provide a responsive and visually consistent user interface. The core styles in <code>bootstrap.css</code> or <code>bootstrap.min.css</code> provide the foundation, while <code>bootstrap-responsive.css</code> or <code>bootstrap-responsive.min.css</code> ensure the layout adapts to different screen sizes.</p> <p>The <code>js</code> subdirectory contains the JavaScript files:</p> <ul> <li> <p><code>bootstrap.min.js</code>: This is a minified version of all the Bootstrap JavaScript components, intended for use in production environments.</p> </li> <li> <p><code>bootstrap.js</code>: This file is the unminified source code of the Bootstrap framework, which has been split into multiple modules. Each module provides a specific feature, which are all included in <code>bootstrap.min.js</code>. These modules include:</p> <ul> <li>Transitions: Provides CSS transition support.</li> <li>Alerts: Enables dismissable alert messages.</li> <li>Buttons: Adds interactive button states (loading, toggling).</li> <li>Carousel: Implements a slideshow component.</li> <li>Collapse: Manages the display of collapsible content sections.</li> <li>Dropdowns: Provides the functionality for dropdown menus.</li> <li>Modals: Creates modal dialogs.</li> <li>Tooltips: Implements small informational popups on hover.</li> <li>Popovers: Similar to tooltips, but contain more content.</li> <li>Scrollspy: Tracks the user's scroll position to highlight navigation items.</li> <li>Tabs: Provides tabbed navigation.</li> <li>Typeahead: Implements autocompletion for input fields.</li> <li>Affix: Allows an element to be \"pinned\" to the viewport as the user scrolls.</li> </ul> </li> </ul> <p>The modules are designed to be modular and customizable. For example, the Carousel module depends on the Transitions module. Individual modules are often initialized using <code>data-api</code> attributes on HTML elements.</p> <p>Additionally, the directory contains <code>License.txt</code>, which provides licensing information for the Bootstrap framework.</p>"},{"location":"static/OZLegacy/bootstrap/css/","title":"css","text":"<p>The <code>OZtree/static/OZLegacy/bootstrap/css</code> directory contains the CSS files for the Bootstrap framework, version 2.1.1. These files provide the styling and layout for the user interface of the OZtree application.</p> <ul> <li> <p><code>bootstrap-responsive.min.css</code>: This file is a minified version of the responsive CSS for Bootstrap. It enables the layout to adjust to different screen sizes, making the application usable on various devices, including phones, tablets, and desktops. It uses media queries to apply specific styles based on screen dimensions. For example, it contains styles for <code>.visible-phone</code>, <code>.visible-tablet</code>, and <code>.hidden-desktop</code> classes, which can be used to control the visibility of elements depending on the device.</p> </li> <li> <p><code>bootstrap.css</code>: This is the core CSS file for the Bootstrap framework. It defines the base styles for typography, grids, forms, buttons, navigation, and other UI components. It uses a grid system based on spans (e.g. <code>span1</code>, <code>span2</code>, ..., <code>span12</code>) to create responsive layouts. It also includes styles for helper classes like <code>.clearfix</code>, <code>.hide-text</code>, and <code>.input-block-level</code> to manage layout and element behavior. </p> </li> <li> <p><code>bootstrap.min.css</code>: This is a minified version of <code>bootstrap.css</code>. It provides the same styling as the unminified version, but with all unnecessary whitespace and comments removed to reduce the file size and improve loading performance.</p> </li> <li> <p><code>bootstrap-responsive.css</code>: This file contains the unminified responsive CSS for Bootstrap. Like its minified counterpart, it provides styles to adapt the application's layout across different screen sizes. It uses similar techniques, such as media queries and visibility classes, as <code>bootstrap-responsive.min.css</code>.</p> </li> </ul> <p>These files are used together to create a responsive and visually consistent user interface. The core styles in <code>bootstrap.css</code> or <code>bootstrap.min.css</code> provide the base for all elements, while <code>bootstrap-responsive.css</code> or <code>bootstrap-responsive.min.css</code> ensure that the layout adapts to different screen sizes. The minified versions (<code>bootstrap.min.css</code> and <code>bootstrap-responsive.min.css</code>) are typically used in production environments to reduce load times, while the unminified versions (<code>bootstrap.css</code> and <code>bootstrap-responsive.css</code>) are useful during development for debugging and inspecting styles.</p>"},{"location":"static/OZLegacy/bootstrap/js/","title":"js","text":"<p>The <code>OZtree/static/OZLegacy/bootstrap/js</code> directory contains the JavaScript files for the Bootstrap framework, version 2.1.1. These files provide the interactive components and effects for the OZLegacy website.</p> <ul> <li><code>bootstrap.min.js</code>: This is a minified version of all the Bootstrap JavaScript components, intended for use in production environments.</li> <li><code>bootstrap.js</code>: This file is the unminified source code of the Bootstrap framework, which has been split into multiple modules. Each module provides a specific feature, which are all included in <code>bootstrap.min.js</code>. These modules include:<ul> <li>Transitions: Provides CSS transition support.</li> <li>Alerts: Enables dismissable alert messages.</li> <li>Buttons: Adds interactive button states (loading, toggling).</li> <li>Carousel: Implements a slideshow component.</li> <li>Collapse: Manages the display of collapsible content sections.</li> <li>Dropdowns: Provides the functionality for dropdown menus.</li> <li>Modals: Creates modal dialogs.</li> <li>Tooltips: Implements small informational popups on hover.</li> <li>Popovers: Similar to tooltips, but contain more content.</li> <li>Scrollspy: Tracks the user's scroll position to highlight navigation items.</li> <li>Tabs: Provides tabbed navigation.</li> <li>Typeahead: Implements autocompletion for input fields.</li> <li>Affix: Allows an element to be \"pinned\" to the viewport as the user scrolls.</li> </ul> </li> </ul> <p>These modules work together to provide a comprehensive set of UI components and behaviors, enabling the interactive elements of the OZLegacy website. Each component is designed to be modular and customizable.  For example, the Carousel module depends on the Transitions module to create smooth animations when sliding between items. The individual modules are often initialized via <code>data-api</code> attributes set on HTML elements. For example, any element with <code>data-toggle=\"modal\"</code> will automatically initialize the Modal module on click.</p>"},{"location":"static/OZLegacy/css/","title":"css","text":"<p>The <code>OZtree/static/OZLegacy/css</code> directory contains CSS files that control the styling and layout of the OZtree application. It includes styles for different screen sizes and contexts.</p> <ul> <li><code>indexstyle.css</code>, <code>indexstyle_ms.css</code>, <code>indexstyle_l.css</code>, and <code>indexstyle_s.css</code> are all related.  These files provide the main styling for the index page, with <code>indexstyle.css</code> being the base, and <code>_ms</code>, <code>_l</code>, and <code>_s</code> files providing specific overrides for medium, large, and small screens respectively. They define the layout of the main content area (<code>#iframe_box</code>), the group selection area (<code>#group_selection</code>), and the footer (<code>#footer_box</code>). They also handle basic styling such as colors, fonts, and text shadows, and provide a basic style for links. They use absolute positioning to manage the layout of these elements.</li> <li><code>embedded.css</code> styles content that is embedded within an iframe. It hides images, sets the background to black, and removes scrollbars.</li> <li><code>front_iframe.css</code> is similar to <code>embedded.css</code> in that it styles the content of an iframe and hides images. It is likely intended for the main iframe in the application, and has a specific style for buttons and selected elements, setting their color to yellow.</li> <li><code>generatorStyle.css</code> and <code>generatorStyle copy.css</code> are related. These files provide the styling for a generator page, and control the layout of the selection bar and main container using floats and absolute positioning. The <code>copy</code> version appears to be a variation, with different positioning rules for <code>#selection_bar</code>. They style the canvas element, and form elements such as <code>select</code> and <code>textarea</code>, and also include a style for a home button.</li> <li><code>style.css</code> provides some basic styles for the entire page including setting the <code>align</code> and <code>background-color</code> for the <code>body</code> and hiding overflow.</li> </ul>"},{"location":"static/OZLegacy/scripts/","title":"scripts","text":"<p>The <code>OZtree/static/OZLegacy/scripts</code> directory contains the JavaScript and CSS files that power the interactive elements of the OZtree visualization. The core functionality is split between several files that work together:</p> <ul> <li> <p><code>index.js</code> This file initializes the interactive tree visualization. It sets up the iframe that displays the tree, and handles button clicks to change the displayed tree or open a new page. It also contains a <code>clickToggle</code> jQuery extension function which is not used in this application.</p> <ul> <li>The <code>$(document).ready()</code> function sets the initial iframe source and handles button clicks.</li> <li>Clicking a <code>.group_select_btn</code> changes the iframe source to the corresponding <code>_iframe.htm</code> file.</li> <li>Clicking a <code>.group_select_full_btn</code> opens a new window to the corresponding <code>.htm</code> file.</li> <li>Clicking <code>#toggle_control</code> shows or hides the group selection buttons.</li> <li>Clicking <code>#about</code> or <code>#tutorial</code> changes the iframe to display a YouTube video.</li> </ul> </li> <li> <p><code>spectrum.js</code> This file is the complete source of the Spectrum colorpicker library, a jQuery plugin that is used to implement color selection within the visualization. It provides an interface to select colors and returns the selected color in various formats, such as RGB, HSL, or hexadecimal. This library is quite extensive, and not all features are utilized by this application.</p> <ul> <li>The <code>$.fn.spectrum</code> function is the main entry point for the plugin and allows for the creation of new color picker instances with configurable options.</li> <li>The <code>tinycolor</code> object provides color manipulation and conversion functions.</li> </ul> </li> <li> <p><code>jquery-1.10.2.min.js</code> This file contains the jQuery library, which is a dependency for other JavaScript files within the directory. It provides DOM manipulation, event handling, and AJAX functionality.</p> </li> <li> <p><code>spectrum.css</code> This is the CSS file that styles the Spectrum color picker.</p> </li> <li> <p><code>plants_taxa_random.js</code>, <code>mammals_taxa_random.js</code>, <code>birds_taxa_random.js</code>, <code>amphibians_taxa_random.js</code>, and <code>tetrapods_taxa_random.js</code> These files each contain a list of taxa and select one at random. The selected taxa is stored in a <code>taxa_URL</code> variable.</p> </li> <li> <p><code>select_options.js</code> This file defines the available options for the tree visualization.  These options are used to configure the visual layout and style of the tree, such as the branch layout, color scheme, font, and animation settings.</p> <ul> <li>The <code>FunctionMap</code> function acts as a dispatcher, routing calls to other functions based on user actions from the visualization options.</li> <li>The <code>selections</code> array defines the structure and properties of the various user options. Each section is a set of related controls, and each control can be of different types: radio, checkbox, select, color, combination. Each control links a visual element to a function that will update the display.</li> </ul> </li> <li> <p><code>autoGenerator.js</code> This file dynamically generates the HTML for the user interface controls based on the <code>selections</code> data defined in <code>select_options.js</code>, making it easy to reconfigure the options for each visualization. It handles the loading of data based on the selected group, and dynamically loads the corresponding JavaScript files for each group. It also manages the creation of URLs to the visualizations.</p> <ul> <li>The <code>onloadSelections</code> function is the main function that is called when the page loads. It dynamically generates the HTML for the user options.</li> <li>The <code>loadData</code> function is called after the options HTML is generated. It sets the active group by loading a corresponding JavaScript file.</li> <li>The <code>createAutoGeneratedURL</code>, <code>createSubmitButton</code>, and <code>setnewurl</code> functions all deal with URL creation and processing.</li> <li>The <code>createComponent</code>, <code>createSection</code>, and other <code>create</code> functions build the HTML elements for the form.</li> <li>The <code>add_option</code> and <code>addminusButton</code> functions deal with dynamic addition of controls when using the \"More...\" option selector.</li> </ul> </li> <li> <p><code>auxiliaryFunction.js</code> This file defines helper functions that are called from <code>select_options.js</code>. They are used to update the values of various global variables that control the state of the tree visualization. These functions are called when the user interacts with the UI, and they in turn update the tree visualization.</p> <ul> <li>Each function here, such as <code>form_change_aux</code>, <code>colour_change_aux</code>, <code>font_change_aux</code> etc., is associated with a control element defined in the <code>select_options.js</code> file.</li> </ul> </li> <li> <p><code>OZ_script_V1.2.original.js</code> This is the core JavaScript file for rendering the OZtree visualization. It is responsible for parsing the Newick tree data, calculating positions and layouts, handling user interactions like zooming and panning, and drawing the tree onto the HTML canvas.</p> <ul> <li>The <code>midnode</code> class represents a node in the tree. The <code>parseLeafNode</code> and <code>parseCircleNode</code> methods parse node data from the Newick format.</li> <li>The <code>init</code> and <code>init2</code> functions are responsible for loading data and performing initial setup of the visualization.</li> <li>The <code>draw2</code> function is the main rendering function, drawing all the elements onto the HTML canvas.</li> <li>The <code>set_defaults</code> function initializes the visualization with default options, applying any configuration changes requested from the URL or the JavaScript configuration.</li> <li>Many functions here calculate or modify various properties, including text sizes, colors, etc., that are used in the drawing or searching of the tree.</li> <li>There are a number of rendering, animation, and search functions.</li> <li>The file also includes functions to read metadata, to generate and update the view's URL, and for handling user interactions.</li> </ul> </li> </ul> <p>These files work together to create a dynamic and interactive visualization. <code>select_options.js</code> and <code>autoGenerator.js</code> control the UI and how users can interact with the visualization. <code>spectrum.js</code>, <code>jquery-1.10.2.min.js</code>, and <code>spectrum.css</code> provide utility, style, and color selection components. The different <code>*_taxa_random.js</code> files provide data for the initial visualization. Finally, <code>OZ_script_V1.2.original.js</code> and <code>auxiliaryFunction.js</code> work together to process data and drive the rendering of the interactive tree.</p>"},{"location":"static/OZLegacy/user/","title":"user","text":"<p>The <code>OZtree/static/OZLegacy/user</code> directory contains JavaScript files crucial for the functionality and customization of the OZtree visualization.</p> <ul> <li> <p><code>plants_min.js</code>: This file contains the raw data and metadata necessary to render the plant tree visualization. The <code>rawData</code> variable appears to hold a compressed representation of the tree structure itself, while the <code>metadata</code> variable contains an array of arrays called <code>leaf_meta</code> that stores associated data such as IUCN conservation status and whether the plant is woody. The <code>node_meta</code> array provides similar data for internal nodes of the tree including conservation status, a common name and richness (likely the number of species). This is a fundamental data file for the plant tree.</p> </li> <li> <p><code>userOptions_river.js</code>: This file defines user-configurable options for the OZtree application. It includes settings for:</p> <ul> <li>Tree rendering (<code>polytype</code>, <code>viewtype</code>, <code>colourtype</code>, <code>leaftype</code>, <code>intcircdraw</code>)</li> <li>Labels and text (<code>commonlabels</code>, <code>fonttype</code>, <code>mintextsize</code>, <code>threshold</code>, <code>thresholdtxt</code>)</li> <li>Interactions and animations (<code>sensitivity</code>, <code>sensitivity2</code>, <code>sensitivity3</code>, <code>growthtimetot</code>, <code>allowurlparse</code>, <code>length_init_zoom2</code>, <code>init_zoom_speed</code>, <code>length_intro_in</code>, <code>length_intro_in2</code>)</li> <li>Styling (<code>sign_background_size</code>, <code>sign_text_size</code>, <code>pieborder</code>, <code>partl2</code>, <code>leaf_outline_def</code>, <code>leaf_fill_def</code>, <code>leaf_text_col_def</code>, <code>brown_branch_def</code>, <code>signpost_col_def</code>, <code>signpost_txtcol_def</code>, <code>popupbox_col</code>, <code>popupbox_txtcol</code>, <code>loading_txtcol</code>, <code>pie_background_color</code>, <code>link_background_color</code>, <code>link_highlight_color</code>, <code>intnodetextcolor</code>, <code>backgroundcolor</code>, <code>outlineboxcolor</code>, <code>highlightcolor1</code>, <code>highlightcolor2</code>)</li> <li>Partner links (<code>PartnerProfiles</code>, <code>linkSet</code>)</li> <li>Credits (<code>creditsText</code>)</li> <li>Functions for setting leaf and node styling and for searching and displaying data.</li> </ul> <p>The <code>userOptions_river.js</code> file also includes crucial functions for rendering and highlighting nodes and leaves, for example: <code>midnode.prototype.leafcolor1</code>, <code>midnode.prototype.branchcolor</code>, <code>midnode.prototype.highlightcolor</code>, <code>midnode.prototype.should_highlight1</code>, and <code>midnode.prototype.dotraitsearch</code>. These functions tie the data from <code>plants_min.js</code> to the visual rendering. This file controls many aspects of how the plant tree is displayed and how users interact with it.</p> </li> <li> <p><code>Euphorbia_2014_tree.js</code>: This file contains the raw data for the Euphorbia tree visualization. It contains a <code>rawData</code> variable representing the tree structure. It's similar to the data structure used in <code>plants_min.js</code> but is specific to Euphorbia species.</p> </li> <li> <p><code>ADEPD_birds_nunes_etal_2015_tree.js</code>: This file contains the raw data for a bird tree visualization, specifically based on data from Nunes et al. (2015). The <code>rawData</code> variable holds the tree structure which is similar to the structure used in <code>plants_min.js</code>.</p> </li> </ul> <p>These files work together to provide a flexible and customizable visualization framework. The <code>plants_min.js</code>, <code>Euphorbia_2014_tree.js</code>, and <code>ADEPD_birds_nunes_etal_2015_tree.js</code> files provide the tree structure and associated data, while <code>userOptions_river.js</code> provides the visual style and interactive behavior, and the search functionality.</p>"},{"location":"static/OZSite/","title":"OZSite","text":"<p>The <code>OZtree/static/OZSite</code> directory contains CSS files that provide styling for various parts of the OZtree web application. These files are used to control the appearance of HTML elements and are referenced from the HTML templates.</p> <p>The file <code>SET_PRICES.css</code> provides styles for setting prices. It includes styles for tables, such as borders, padding and alignment. It also includes styles for form controls for integers, doubles, and strings to control their widths.</p> <p>The file <code>dataprotection_and_privacy.css</code> styles the display of definition lists by setting the display of the <code>&lt;dt&gt;</code> and <code>&lt;dd&gt;</code> elements to inline.</p> <p>The file <code>life_text.css</code> is used to style the life text tree. This file controls the color of the text, the opacity of spans, how emphasis is displayed, and the size of species names.</p> <p>The file <code>MANAGE.css</code> provides styles for the manage pages, such as links and warnings. It styles definition list <code>&lt;dt&gt;</code> elements with a background and border and adds some left margin and bottom margin to <code>&lt;dd&gt;</code> elements. It also styles elements with the <code>warning</code> class with red text.</p> <p>The file <code>list_images.css</code> contains styles for displaying lists of images and includes styles for the image borders and a modal edit frame. Images are given a grey border. Images with the <code>pd</code> class have a blue border and those with the <code>pdnew</code> class have a green border. The <code>edit_frame</code> is a fixed position element that covers the entire viewport with a semi-transparent background. It contains an <code>iframe</code> with a white background that is centered in the <code>edit_frame</code>.</p>"},{"location":"static/OZSponsor/","title":"OZSponsor","text":"<p>This directory, <code>OZtree/static/OZSponsor</code>, contains CSS and Javascript files that handle the styling and functionality of the sponsor pages within the OZtree application. These files primarily deal with the visual presentation of sponsor information, and the interactions with the Encyclopedia of Life (EoL) API to retrieve and display relevant species data.</p> <p>Here's a breakdown of the key files:</p> <ul> <li> <p>validate.css: This CSS file provides the styling for tabular data display on the sponsor pages. It ensures a consistent table-like layout, with alternating row colors, and styles for specific elements, such as headers, database IDs, images, and input fields. It also handles the styling for the admin comments and PayPal information. The styling makes sure extra lines in <code>&lt;textarea&gt;</code> elements are visible. The CSS also has styles for making image buttons that can change and remove the images in the table.</p> </li> <li> <p>sponsor_node.css: This stylesheet defines the look and feel of the sponsor node pages, including the display of lists of sponsors with thumbnail images. It controls the size, shape, and layout of sponsor entries, as well as how they are presented on the page. It includes styles for alphabetical lists of nodes, which uses columns to display the data.</p> </li> <li> <p>SHOW_EMAILS.css: This CSS file specifically styles the display of email information, especially in a details/summary structure. It is used to present email details in a clear and organized way, and includes styling for missing data, emails, and quoted text.</p> </li> <li> <p>name_search.css: Styles the name search form and the layout of search results on the sponsor pages. It provides basic styling for the introductory text, form elements, and the container for the results.</p> </li> <li> <p>sponsor_replace_page.css: This CSS file styles the \"last\" link on the sponsor pages. It centers the link, and provides basic visual styling.</p> </li> <li> <p>sponsor_leaf.css: This stylesheet is responsible for the layout and appearance of the individual leaf sponsorship pages. It includes styling for the intro text, form fields, image selection, and the \"donate\" button. It is designed to be responsive, with different layouts for wider and narrower screens. It also styles a gift aid section and hides licence text unless a picture is displayed. It has several classes that indicate errors, and styles for displaying twitter handles.</p> </li> <li> <p>sponsor.css: This CSS file is a more general stylesheet for the overall appearance of the sponsor pages. It includes the styling for headings, quotes, the subtext under the page headings, and the lists of suggestions. It has some styles for displaying images, such as their size and border radius.</p> </li> <li> <p>EOLqueries.js: This JavaScript file contains functions to interact with the EoL API. It handles fetching data related to species, such as images, common names, and other relevant information. These functions are used to populate the sponsor pages with data from the EoL database. It includes several different methods, including <code>setDataFromEoLdataObjectID</code>, <code>setDataFromEoLpageID</code>, and <code>setDataFromEoLpageID_batch</code>. These are used to load single and batch images of species, and includes functions for dealing with images and common names in multiple languages.</p> </li> </ul> <p>These files work together to create the sponsor pages for the OZtree application, with the CSS files handling the visual aspects and the Javascript file handling the dynamic loading of data. The <code>EOLqueries.js</code> file makes asynchronous API requests, and the response is handled by the functions that use it to change the appearance of the page. These pages allow users to browse, search, and sponsor different species, and the overall presentation is handled by the CSS files in this directory.</p>"},{"location":"static/OZTreeModule/","title":"OZTreeModule","text":"<p>The <code>OZtree/static/OZTreeModule</code> directory contains the source code for the OZTree module.</p> <p>The <code>dist</code> subdirectory contains the built files for the OZTree module. This directory is intended as a distribution directory, and should not be modified directly. It should contain a <code>.gitignore</code> that prevents accidental check-ins of build artifacts.</p>"},{"location":"static/OZTreeModule/dist/","title":"dist","text":"<p>The <code>OZtree/static/OZTreeModule/dist</code> directory contains built files that are output from a build process. This directory is meant to be a distribution directory, and as such, it is expected to contain a <code>.gitignore</code> that ignores all files except itself. This prevents developers from accidentally checking in build artifacts.</p>"},{"location":"static/css/","title":"css","text":"<p>The <code>OZtree/static/css</code> directory contains the CSS files for the OZtree application. These files provide the styling for the various elements and components of the user interface.</p> <p>The following CSS files are present in this directory:</p> <ul> <li> <p><code>calendar.css</code>: This file contains the styles for a calendar widget. It defines the appearance of the calendar, including the layout, colors, and fonts. It includes styles for the calendar container, navigation elements, day cells, and time pickers.</p> </li> <li> <p><code>web2py-bootstrap3.css</code>: This file contains styles that customize the appearance of web2py's default UI elements to fit with a bootstrap 3 theme. It includes styling for flash messages, error messages, lists, autocomplete selects, the web2py logo, and overall page layout with a header and footer. It also includes styling for grid tables, console forms, breadcrumbs, and the wiki editor.</p> </li> <li> <p><code>web2py.css</code>: This file provides the base styles for web2py applications. It includes generic styles for basic HTML elements like <code>h1</code>-<code>h6</code>, <code>p</code>, <code>table</code>, <code>form</code>, <code>a</code>, <code>img</code>, <code>ul</code>, <code>ol</code>, etc. as well as styling for layout (e.g. <code>right</code>, <code>left</code>, <code>center</code>, <code>footer</code>). It contains web2py specific styles for flash messages, the top bar, status bar, and grid tables. It also has some media query setup.</p> </li> <li> <p><code>web2py-bootstrap4.css</code>: This file is similar to <code>web2py-bootstrap3.css</code> in that it customizes the appearance of web2py's default UI elements. This file is meant to be used with a bootstrap 4 theme. </p> </li> </ul> <p>These CSS files work together to define the overall look and feel of the OZtree application. <code>web2py.css</code> provides the base styles, while <code>web2py-bootstrap3.css</code> or <code>web2py-bootstrap4.css</code> customize the web2py elements for the chosen bootstrap version, and <code>calendar.css</code> styles a specific calendar widget.</p>"},{"location":"static/font/","title":"font","text":"<p>The <code>OZtree/static/font</code> directory contains a single file, <code>fontello.svg</code>. This file defines a custom font using SVG.</p> <p>The font, named \"fontello\", includes several glyphs (icons) such as <code>cog</code>, <code>location</code>, <code>info-circled</code>, <code>popup</code>, <code>menu</code>, <code>angle-double-up</code>, <code>angle-up</code>, and <code>help</code>. These icons are used throughout the OZtree application to provide a visual interface for various functionalities, improving the user experience by supplementing text with familiar and intuitive symbols.</p>"},{"location":"static/fonts/","title":"fonts","text":"<p>The <code>OZtree/static/fonts</code> directory contains font files used by the OZtree project.</p> <p>The most significant file in this directory is <code>glyphicons-halflings-regular.svg</code>. This file defines a custom icon font using SVG. It includes a variety of glyphs, including symbols, mathematical operators, and currency symbols, as well as some commonly used symbols. This custom font is likely used throughout the OZtree application to display icons and other symbols.</p>"},{"location":"static/images/","title":"images","text":"<p>The <code>OZtree/static/images</code> directory stores various image assets used throughout the OZtree project. These images include logos, icons, and other graphical elements that contribute to the site's visual design and user experience.</p> <p>The <code>DarwinDinos</code> subdirectory contains images related to Darwin and Dinosaurs, but its  <code>license.txt</code> file explicitly prohibits reuse, so there's no need to discuss its contents further. </p> <p>Here's a breakdown of some of the interesting files within this directory:</p> <ul> <li> <p><code>W.svg</code>: This file appears to be a custom \"W\" logo, likely for a specific section or feature within the application. It is an SVG file, which means it can scale without losing quality and is therefore ideal for web use.</p> </li> <li> <p><code>oz-pill-share-greenfg.svg</code>, <code>oz-rightarrow-darkbg.svg</code>, <code>oz-leftarrow-greenfg.svg</code>, <code>oz-pausearrow-darkbg.svg</code>, and <code>oz-playarrow-darkbg.svg</code>: This group of files provides interface icons for share, navigation, and media control. The consistent naming convention (<code>oz-*</code>) suggests they are part of a common design system used within the project. The different color schemes (e.g. <code>greenfg</code> and <code>darkbg</code>) imply that these icons are intended to be used on a variety of backgrounds.</p> </li> <li> <p><code>links.svg</code>: This file provides an icon for representing external links. The graphic depicts two chains linking, which provides clear visual communication for its purpose.</p> </li> <li> <p><code>oz-logo-1line-mono-dark.svg</code>, <code>oz-logo-leafout-white.svg</code>, <code>oz-logo-1line-dark.svg</code>, <code>oz-logo-leafout-black.svg</code>, <code>oz-logo-1line-white.svg</code>, and <code>oz-logo-leafout-outline-red.svg</code>, and <code>oz-logo-leafout-outline.svg</code>: This set of files contain different versions of the OZtree logo, each designed for different use cases.  The variations in style (e.g. <code>1line</code>, <code>leafout</code>) and color (e.g. <code>white</code>, <code>dark</code>, <code>red</code>) suggest that the logo is used in multiple contexts withing the application.</p> </li> <li> <p><code>oz-sectionbg-polytomy.svg</code>, <code>oz-sectionbg-quotes.svg</code>, <code>oz-sectionbg-leaves-old.svg</code>, and <code>oz-sectionbg-natural.svg</code> and <code>oz-sectionbg-darkspiral.svg</code>: These files appear to be background images for different sections of the site. Their names (e.g. <code>polytomy</code>, <code>quotes</code>, <code>leaves</code>, <code>natural</code>, and <code>darkspiral</code>) suggest a variety of themes. The consistent <code>oz-sectionbg-*</code> naming indicates they are intended for use as section backgrounds within the site.</p> </li> <li> <p><code>IUCN_Red_List.svg</code>: This file contains the IUCN Red List logo, indicating that the OZtree project integrates information from the IUCN Red List.</p> </li> <li> <p><code>oz-leaf-greenfg.svg</code>: This file provides a simple leaf icon, likely used as a visual cue or branding element.</p> </li> <li> <p><code>pd.svg</code>: This file provides a Public Domain icon, suggesting that some content within the site may be in the Public Domain.</p> </li> <li> <p><code>by-sa.svg</code>, and <code>by.svg</code>, and <code>by-nc.svg</code>: These files provide icons related to Creative Commons licenses. They are likely used to indicate the type of licensing that applies to specific content.</p> </li> <li> <p><code>tour-pin.svg</code>: This file provides a pin icon, likely used in map-based tours or navigation features.</p> </li> <li> <p><code>GBIF-2015-dotorg-stacked.svg</code>: This file contains the GBIF logo indicating that the OZtree project integrates information from the Global Biodiversity Information Facility.</p> </li> <li> <p><code>oz-logo-icon-darkbg.svg</code> and <code>oz-logo-icon-darkfg.svg</code>: These are icon versions of the OZtree logo with different fill colors, likely used in UI elements.</p> </li> </ul> <p>In summary, the <code>OZtree/static/images</code> directory contains a wide variety of image assets, each with a specific purpose. The files are well-organized, with logical naming conventions and subdirectories, making it relatively easy to understand the role of each image within the project.  The SVG files are likely used for logos, icons, and backgrounds where scalability is required, while the other images are likely used for static or fixed-size elements. These images are essential for providing a visual interface and enhancing the overall user experience of the OZtree project.</p>"},{"location":"static/images/DarwinDinos/","title":"DarwinDinos","text":"<p>The <code>OZtree/static/images/DarwinDinos</code> directory contains image files used by the OZtree project, specifically those related to Darwin and Dinosaurs.</p> <p>The directory contains a single file:</p> <ul> <li> <p><code>license.txt</code></p> <p>This file indicates that the image files within this directory are used with permission from https://darwindinosaurs.com. It explicitly states that reuse is not permitted.</p> </li> </ul>"},{"location":"static/js/","title":"js","text":"<p>The <code>OZtree/static/js</code> directory contains several JavaScript files that enhance the functionality and appearance of the OZtree web application. Here's a breakdown of the key files:</p> <ul> <li> <p><code>canvas2svg.js</code>: This library enables the conversion of HTML5 canvas drawings into SVG (Scalable Vector Graphics) format. It works by creating a mock canvas context that records drawing operations and then translates these into equivalent SVG elements. This allows for vector-based representations of canvas content, which is useful for preserving image quality at different resolutions and for embedding graphics within the web application. Some interesting aspects of this library include:</p> <ul> <li>It includes helper functions for formatting strings, generating random strings, mapping named to numbered HTML entities, and converting between canvas and SVG text alignment and baseline properties.</li> <li>The library emulates the Canvas 2D API, handling common drawing functions like <code>moveTo</code>, <code>lineTo</code>, <code>bezierCurveTo</code>, <code>arc</code>, and <code>fill</code>.</li> <li>It has support for gradients and patterns.</li> <li>It supports embedding images within SVG, either as data URLs or by referencing existing elements defined in the <code>&lt;defs&gt;</code> section.</li> <li>The library ensures that different browsers correctly render text in svg, including support for text decoration and links.</li> <li>It has functions for managing asynchronous image loading to make sure that dynamically loaded images are correctly rendered in the resulting SVG.</li> </ul> </li> <li> <p><code>web2py.js</code>: This file is the core of the web2py framework's JavaScript support. It provides a set of functions that enable the interactive features within the application. It relies heavily on jQuery and handles things like:</p> <ul> <li>AJAX: The main communication driver with the server. Functions like <code>ajax</code>, <code>ajax_page</code>, and <code>component</code> enable dynamic content updates without page reloads. The <code>component</code> function allows for timed or event-driven updates of parts of the page. The <code>after_ajax</code> function processes responses from the server, allowing for specific actions, including Javascript code execution and message display. The component system implemented allows for a single server request to update multiple areas on a page using <code>web2py-component-content</code> header set on the response.</li> <li>Form Handling: Functions such as <code>trap_form</code>, <code>disableFormElements</code> and <code>enableFormElements</code> manage the submission of forms, the visual disabling of form elements during a form submission, and the trapping of forms loaded by the <code>LOAD</code> helper. The use of <code>FormData</code> supports file uploads.</li> <li>UI Enhancements: Functions like <code>popup</code>, <code>collapse</code>, <code>fade</code>, and <code>flash</code> provide general user interface enhancements. The <code>flash</code> function uses the <code>.w2p_flash</code> CSS class to display messages, making them dismissible with a click.</li> <li>Dynamic Content: The <code>ajax_init</code> function is invoked whenever an AJAX request completes, managing the hiding of elements with the class <code>w2p_hidden</code>, calling <code>manage_errors</code> to show form errors, <code>ajax_fields</code> to attach necessary event handlers, <code>show_if_handler</code> to process form display conditional logic and <code>component_handler</code> to initialize any dynamically created component.</li> <li>Event Handling: The <code>event_handlers</code> function adds event handlers to the document. Examples include handling integer, double, and decimal inputs to allow only appropriate characters, enabling datetime and date pickers, and preventing double form submission, also see form_handlers and a_handlers.</li> <li>Security: The <code>validate_entropy</code> function provides basic password strength validation, indicating strength with a color gradient. The <code>confirm</code> function is a helper that prompts the user with a message before performing an action.</li> <li>WebSockets: The <code>web2py_websocket</code> function enables client connection to a WebSocket server.</li> </ul> </li> <li> <p><code>qrcode.min.js</code>: This is a minified version of a library to generate QR codes. It takes text as input and outputs a 2D barcode which can then be scanned by a camera and a suitable application.</p> </li> <li> <p><code>bootstrap.min.js</code>: This is a minified version of the Bootstrap 3 JavaScript library. It provides the functionality for UI components like alerts, buttons, carousels, dropdowns, modals, popovers, scrollspy, tabs, tooltips and the affix utility, that enhance the web application's user interface.</p> </li> <li> <p><code>share.js</code>: This script adds a floating toolbar with social media icons to pages, making it easy for users to share content via Twitter, Facebook, and Google Plus. The look and feel of the bar are customized via inline CSS styles in the file, including a hover animation.</p> </li> <li> <p><code>jquery.js</code>: This is a full, unminified version of the jQuery 3.1.0 library. It provides a cross-browser API for DOM manipulation, event handling, animation, and AJAX interactions, and is the basis for several other libraries in this directory. It provides an interface for selecting DOM elements using CSS-like selectors (via the Sizzle engine), performing animations, making asynchronous calls to the server, and manipulating the DOM. The file also includes a large amount of comments and detailed code, giving valuable insight to how jQuery works internally.</p> </li> <li> <p><code>respond-1.4.2.min.js</code>: This library provides a polyfill for CSS3 media queries.  It enables responsive design features in older browsers that do not natively support media queries, enhancing the web application's adaptability across devices.</p> </li> <li> <p><code>modernizr-2.8.3.min.js</code>: This is a minified version of the Modernizr library. It performs feature detection for various browser capabilities (e.g., HTML5 and CSS3 features). This allows for conditional code execution based on the availability of features, improving the web application's adaptability to different browser implementations.</p> </li> <li> <p><code>calendar.js</code>: This file is a fully commented Date/Time picker written by Dynarch, which allows for selecting dates and times. It features:</p> <ul> <li>A highly customizable UI for date and time selection.</li> <li>Support for multiple calendar views and navigation options.</li> <li>Integration with text inputs for easy interaction.</li> <li>Functions for changing month and year, and for setting min/max year.</li> <li>A robust mechanism for drag-and-drop, navigation, and tooltip display, even on older versions of Internet Explorer.</li> <li>A custom Date object extension for easy date formatting and manipulation.</li> <li>Support for setting callbacks for specific events.</li> </ul> </li> <li> <p><code>web2py-bootstrap3.js</code>: This file provides extensions to <code>web2py.js</code> to make the website work with bootstrap. It defines <code>ajax_fields</code> to style elements with bootstrap css classes. It also makes the nested dropdowns provided by web2py compatible with Bootstrap menu, making it suitable for use with complex navigation.</p> </li> <li> <p><code>jquery.min.js</code>: This is a minified version of the jQuery 3.1.0 library. It provides the same core features as <code>jquery.js</code>, but has had comments and spacing removed to reduce its size.</p> </li> </ul> <p>These files collectively provide the functionality for the interactive elements, UI components, client-side logic, responsive design, and feature detection required by the OZtree web application.</p>"},{"location":"static/otop/","title":"otop","text":"<p>The <code>OZtree/static/otop</code> directory contains a set of static files for the \"One Tree, One Planet\" feature within the OneZoom project. This feature aims to educate and engage users with various environmental challenges.</p> <p>The directory contains a mix of SVG images, CSS, HTML, Javascript, and a license file:</p> <ul> <li> <p>The SVG files, such as <code>challenge-reducefoodwaste.svg</code>, <code>challenge-reducewater.svg</code>, <code>challenge-zerowaste.svg</code> and many others, are visual representations of different environmental challenges. Each SVG depicts a stylized icon for a specific challenge, such as reducing food waste, water consumption, or aiming for zero waste. The consistent visual style, with a circle outline and a solid white icon within, suggests they are intended to be used together as part of a unified visual system. They are designed by Naziha Mestaoui and licensed under a CC BY-NC-ND 4.0 license.</p> </li> <li> <p><code>challenge.svg</code> appears to be a more generic icon, possibly used as a default or placeholder, or to represent the general idea of taking a challenge.</p> </li> <li> <p><code>challenge.css</code> provides the basic styling for the challenge pages, such as font styles, layout, and background effects. It's designed to work with the HTML structure defined in <code>challenge.html</code>.</p> </li> <li> <p><code>license.txt</code> specifies the usage terms for the image files in the directory. All of the images are copyrighted by Naziha Mestaoui 2018 and are available under a Creative Commons Attribution-NonCommercial-NoDerivs 4.0 International license (CC BY-NC-ND 4.0).</p> </li> <li> <p><code>challenge.html</code> is the primary HTML file for the challenge pages. It dynamically loads the appropriate SVG icon and challenge text based on the query parameter in the URL. It includes a link to the OneZoom application that will trigger the challenge in the app. It also has radial gradient backgrounds that match the colors of the challenge icons.</p> </li> <li> <p><code>backgrounds.js</code> is a javascript file that initializes the background elements for the \"One Tree, One Planet\" view. It is responsible for:</p> <ul> <li>Creating floating images of trees.</li> <li>Creating particle effects.</li> <li>Creating a haze effect that matches the color of the current location.</li> <li>It sets up hooks that can be used to trigger transitions when a user interacts with the OneZoom view.</li> </ul> </li> </ul> <p>The files in this directory work together to provide a series of interactive challenge pages. Each challenge page is designed to be a standalone webpage that can be accessed with a specific URL. The <code>challenge.html</code> file uses JavaScript to dynamically set the content of the page and the user will be taken to a specific challenge in the OneZoom app when they click on the button. The CSS styles the content and the SVG files provide the visual icons. The <code>backgrounds.js</code> file will create the floating image, particle, and haze effects when the page is loaded within the OneZoom app.</p>"},{"location":"static/tour/","title":"tour","text":"<p>The <code>OZtree/static/tour</code> directory contains CSS files that style the interactive tour functionality in the OZtree application.</p> <p>The file <code>exit_confirm.css</code> styles the popup that is displayed when a user attempts to exit the tour prematurely. It includes styles for the shader behind the popup, the popup box itself, text within the popup, and buttons for exiting or continuing the tour.</p> <p>The file <code>tutorial_template.css</code> styles the main tutorial window that appears during a tour. It includes styles for the container, title, image, text area, footer, and buttons within the tour window. The styles make the tutorial window appear fixed to the top of the screen while the rest of the content is displayed normally, allowing users to interact with the underlying app while the tutorial is active.</p>"},{"location":"static/uikit-3/","title":"uikit-3","text":"<p>The <code>OZtree/static/uikit-3</code> directory contains static files for the UIkit 3 framework. This directory likely contains a copy of UIkit 3, or a customized version of it.</p> <p>The presence of the <code>.dir</code> file suggests this directory should be tracked by Git, even if it's empty.</p>"},{"location":"tests/","title":"tests","text":"<p>The <code>OZtree/tests</code> directory contains tests for the OneZoom project. These tests are crucial for verifying the correctness, stability, and performance of the application. The tests are divided into functional, unit, and benchmarking tests.</p> <p>The subdirectories within <code>OZtree/tests</code> are organized as follows:</p> <ul> <li> <p><code>functional</code>: This directory contains functional tests that use Selenium to simulate user interactions in a browser. The core test logic is in <code>functional_tests.py</code> which sets up the test environment and provides helper methods for common test tasks. The subdirectories <code>sponsorship</code> and <code>treeviewer</code> contain tests for those specific components. <code>test_functions_in_default.py</code> tests all public facing functions, and <code>test_webpage_spidering.py</code> spiders the entire site to check for errors.</p> </li> <li> <p><code>data_files</code>: This directory contains data files used for testing. The most important file is <code>opentree_tax.tsv</code>, which contains taxonomic information used in various tests. <code>small_opentree_tax.tsv</code> is a smaller version for quicker unit tests, and <code>.gitignore</code> specifies files that Git should ignore.</p> </li> <li> <p><code>site_setup</code>: This directory contains tests for the database and file system setup. The most important files are <code>test_database_settings.py</code>, which verifies that the database indexes and charsets are set up correctly, and <code>test_image_files.py</code>, which verifies that all images referenced in the database are present on the file system.</p> </li> <li> <p><code>fixtures</code>: This directory contains fixtures for the database, specifically the <code>reservations.py</code> file. This script populates the database with test reservations, and uses <code>util.time_travel()</code> to simulate reservations at various states of their lifecycle.</p> </li> <li> <p><code>benchmarking</code>: This directory contains code for benchmarking the OZtree application. The <code>API</code> subdirectory contains the <code>test_textsearch.py</code> script, which tests the performance of the text search API, using Javascript to score results. The directory also contains <code>test_viewer_loading.py</code> which is a placeholder for future tests, and a <code>.gitignore</code> file to ignore cache files.</p> </li> <li> <p><code>unit</code>: This directory contains unit tests for various modules and controllers. Key tests include: <code>test_modules_markdown.py</code>, testing the markdown module for XSS vulnerabilities; <code>test_modules_tour.py</code>, testing the tour module; <code>test_controllers_tour.py</code>, testing the tour controller; <code>test_modules_embed.py</code>, testing the embed module; <code>test_controllers_default.py</code>, testing the default controller; <code>test_modules_usernames.py</code>, testing the usernames module; <code>test_modules_sponsorship_search.py</code>, testing the sponsorship search module; <code>test_controllers_default_sponsor.py</code>, testing sponsor related functions; <code>test_controllers_API.py</code>, testing the API controller; <code>test_modules_OZfunc.py</code>, testing the OZfunc module; <code>test_modules_sponsorship.py</code>, testing the sponsorship module; <code>test_modules_ozmail.py</code>, testing the ozmail module; <code>util.py</code> provides various utilities for testing, and <code>test_modules_pinpoint.py</code> tests the pinpoint module, and <code>test_private_background_tasks.py</code> tests the background tasks.</p> </li> <li> <p><code>functional/sponsorship</code>: This subdirectory contains functional tests specifically for the sponsorship feature. The main file is <code>sponsorship_tests.py</code>, which provides helper methods for the tests, including setting up the test environment. Other files such as <code>test_maintenance_mode.py</code>, <code>test_unsponsorable_site.py</code>, and <code>test_normal_site.py</code> test different sponsorship scenarios.</p> </li> <li> <p><code>functional/treeviewer</code>: This subdirectory contains functional tests for the tree viewer. Key test files include: <code>test_tree_data_mismatch.py</code>, testing data mismatch handling; <code>test_viewer_urls.py</code>, testing different viewer URL formats; <code>test_wikipages.py</code>, testing Wikipedia and Wikidata page displays; <code>test_viewer_errors.py</code>, testing error handling; <code>test_sandbox.py</code>, testing iframe sandboxing; <code>test_links_and_infoboxes.py</code>, testing links in infoboxes; <code>test_tabs.py</code>, testing tab functionality; <code>test_language_localisation.py</code>, testing language localization; <code>test_viewer_availability.py</code>, testing different viewer modes; and <code>test_image_info.py</code>, testing the image info popups.</p> </li> <li> <p><code>benchmarking/API</code>: This subdirectory contains <code>test_textsearch.py</code>, a script used to benchmark the performance of the text search API.</p> </li> </ul> <p>The files directly within <code>OZtree/tests</code> are:</p> <ul> <li><code>license.txt</code>: This file contains the license information for the code within the tests directory, which is unlicensed.</li> <li><code>__init__.py</code>: An empty file that makes the directory a Python package.</li> <li><code>requirements.txt</code>: This file lists the Python package dependencies required to run the tests.</li> <li><code>util.py</code>: This file provides utility functions used in various tests, such as setting up a web2py server, connecting to the database, and setting application configurations.</li> <li><code>beta_cfg.ini</code>: This file provides a configuration for the beta site, used for testing.</li> </ul> <p>In summary, the <code>OZtree/tests</code> directory contains a comprehensive set of tests to verify all aspects of the OneZoom application. The functional tests use Selenium to simulate user interactions, the unit tests verify the logic of individual modules and controllers, the benchmarking tests assess the performance of the application, and the data files provide test data. The utilities provide a set of functions for setting up the test environment.</p>"},{"location":"tests/benchmarking/","title":"benchmarking","text":"<p>The <code>OZtree/tests/benchmarking</code> directory contains code for benchmarking various aspects of the OZtree application. It helps to ensure that the application performs well under different conditions.</p> <p>The most important part of this directory is the <code>API</code> subdirectory which contains a script, <code>test_textsearch.py</code>, used to benchmark the performance of the text search API. This script sends a series of search queries to the API and measures the response times. It ensures the search functionality is accurate and performant by checking the number of results, ordering, and time it takes to return them. It is critical for ensuring the API is robust, fast, and accurate. The script also includes a JavaScript scoring function to ensure results are ordered correctly, as they would be in a live environment.</p> <p>The <code>test_viewer_loading.py</code> file contains a basic functional test to check the loading time of the viewer. This test is not implemented and is a placeholder for future performance testing on different browsers.</p> <p>The <code>.gitignore</code> file specifies that <code>*.code_cache</code> files should be ignored by Git, which are generated by <code>js2py</code>, a library used in <code>test_textsearch.py</code>.</p> <p>The <code>__init__.py</code> file is an empty file that indicates the directory is a Python package.</p>"},{"location":"tests/benchmarking/API/","title":"API","text":"<p>The <code>OZtree/tests/benchmarking/API</code> directory contains a script, <code>test_textsearch.py</code>, used to benchmark the performance of the text search API. This script is designed to send a series of search queries to the API and measure the response times. It's primarily used to ensure the search functionality is both accurate and performant.</p> <p>Here's a breakdown of how it works:</p> <ul> <li> <p>Purpose: The primary goal of <code>test_textsearch.py</code> is to test the speed and accuracy of the text search API. This script helps identify bottlenecks and ensures that the API performs as expected under various conditions.</p> </li> <li> <p>Search Terms: The script uses a set of predefined search terms, which are stored in the <code>default_search_terms</code> variable. These terms include a variety of inputs, such as:</p> <ul> <li>Terms that should return no results (e.g., \"\u00a3\u00a3\u00a3\u00a3\", \"a\", \"a b\")</li> <li>Terms with specific expected numbers of results (e.g., \"Homo sap\", \"Homo sapiens\")</li> <li>Terms that test different search behaviors (e.g. stemming, full text indexing) such as \"aa\", \"ox\", and \"aaa\".</li> <li>Common search terms such as \"Human\", \"Fish\", \"lion\", \"tiger\"</li> <li>Terms in different languages</li> </ul> <p>Each search term is associated with a dictionary containing details such as the expected minimum and maximum number of results (<code>min_n</code> and <code>max_n</code>), results which are expected to be within the top hits, and the maximum acceptable response time (<code>max_time_secs</code>).</p> </li> <li> <p>JavaScript Score: The search results are ordered in Javascript in the client using the <code>overall_search_score</code> function. This function is extracted from the main OZTree javascript and run using <code>js2py</code>. This is done to ensure the test is as close as possible to what a user would experience, since the ordering is not done in the API. </p> </li> <li> <p>Testing Process:</p> <ul> <li>The script can be run directly via command line and can be configured with different URLs via the <code>--url</code> flag.</li> <li>It sends each search term to the specified API endpoint.</li> <li>It records the time taken for each request.</li> <li>It verifies whether the number of results returned matches the expected range, whether key results are within the top hits, and whether the response time is within the specified limit.</li> <li>It outputs whether each search term passed or failed, along with the average request time.</li> </ul> </li> <li> <p>Error Handling: The script uses bit flags to track different types of failures such as incorrect numbers of hits, slow responses, missing results, and incorrect ordering.</p> </li> <li> <p>Command-Line Arguments: The script uses <code>argparse</code> to handle command-line arguments:</p> <ul> <li><code>--url</code>: Specifies the API endpoint(s) to test. If no path is given it will use the <code>/API/search_node.json</code> endpoint.</li> <li><code>-r</code> or <code>--requests</code>: Sets the number of duplicate requests for each search term to calculate average timings.</li> <li><code>-s</code> or <code>--search</code>: Allows for testing with a custom set of search terms.</li> <li><code>-l</code> or <code>--lang</code>: Forces a specific language to use.</li> <li><code>-v</code> or <code>--verbosity</code>: Controls the verbosity of the output, allowing for more detailed debugging information.</li> </ul> </li> <li> <p>Integration with Web2py: The script can optionally start a local web2py server if no URL is provided.</p> </li> <li> <p>Caching: The converted javascript code is cached to speed up subsequent runs.</p> </li> </ul> <p>In summary, <code>test_textsearch.py</code> is a critical component for ensuring that the OZtree search API is robust, fast, and accurate. It allows developers to easily test performance under different conditions and is part of the quality control process for API development.</p>"},{"location":"tests/data_files/","title":"data_files","text":"<p>The <code>OZtree/tests/data_files</code> directory contains data files used for testing the OZtree project.</p> <p>The file <code>opentree_tax.tsv</code> is a tab-separated values file representing a subset of the Open Tree Taxonomy. It contains taxonomic information for a variety of primates, as well as the order Carnivora and multiple subspecies of Canis lupus. The columns include:</p> <ul> <li><code>uid</code>: A unique identifier for the taxon.</li> <li><code>parent_uid</code>: The unique identifier of the parent taxon.</li> <li><code>name</code>: The scientific name of the taxon.</li> <li><code>rank</code>: The taxonomic rank of the taxon (e.g., species, genus, subspecies, order).</li> <li><code>sourceinfo</code>:  Identifiers from various taxonomic databases (e.g. ncbi, gbif, irmng).</li> <li><code>uniqname</code>: A unique name for the taxon.</li> <li><code>flags</code>:  Flags that apply to the taxon.</li> </ul> <p>This file is used to test the parsing and processing of taxonomic data within the OZtree project.</p> <p>The file <code>small_opentree_tax.tsv</code> is a smaller version of the above file, containing the same columns and a similar but smaller set of data, likely used for quicker unit tests that don't require the full dataset.</p> <p>The file <code>.gitignore</code> specifies files that Git should ignore. In this case, it excludes files with the extension <code>.bz2offsets</code>, likely files created during the processing of other data files.</p>"},{"location":"tests/fixtures/","title":"fixtures","text":"<p>The <code>OZtree/tests/fixtures</code> directory contains test fixtures for the OZtree application. These fixtures are used to set up the database with specific data for testing purposes. </p> <p>The most important file in this directory is <code>reservations.py</code>. This script is responsible for populating the database with test reservations. It does this by first deleting any existing fixture reservations and then creating new ones with specific properties that are useful in testing. It also manipulates time using <code>util.time_travel()</code> to create reservations in various states, such as expired, expiring soon, and active.</p> <p>Here's a breakdown of how <code>reservations.py</code> works:</p> <ul> <li>Database Setup: It starts by importing necessary modules and getting a handle to the database. It then deletes existing reservations that were created by previous test runs, ensuring a clean slate for each test. This prevents tests from interfering with each other and ensures test repeatability.</li> <li>Time Travel:  The script uses <code>util.time_travel()</code> to simulate different points in time. This allows the script to create reservations that should be in different stages of their lifecycle (e.g. expired, soon to expire, and active).</li> <li>Creating Reservations: It uses <code>util.purchase_reservation()</code> to create reservations. This function takes an array of OTT IDs and a dictionary of basket details that include the user's e-mail, donor name and sponsor name. It also supports setting an <code>allowed_status</code>, and specifying <code>prev_reservation_id</code> for renewal tests.</li> <li>Specific Test Scenarios: The script creates several reservations, each designed to test different aspects of the reservation system:<ul> <li>Reservations that should have already expired.</li> <li>Reservations that should expire soon.</li> <li>Reservations that are active.</li> <li>A reservation which requires the <code>allowed_status</code> to be set to create the reservation.</li> <li>Renewals using <code>prev_reservation_id</code> to tie reservations together.</li> </ul> </li> <li>Committing Changes: Finally, it commits the changes to the database, making the new reservations available for tests.</li> </ul> <p>The <code>reservations.py</code> script serves as the primary method for populating the database with test data. By running this script, a developer can be certain that the database is in a known state before any tests are run. This is crucial for creating predictable and reproducible tests.</p>"},{"location":"tests/functional/","title":"functional","text":"<p>The <code>OZtree/tests/functional</code> directory contains functional tests for the OneZoom website. These tests use Selenium to simulate user interactions in a browser and verify that the site behaves as expected.</p> <p>The core test logic is located in <code>functional_tests.py</code>. This file defines the <code>FunctionalTest</code> class, which provides the basic setup and teardown for all functional tests. It initializes a web browser using Selenium, starts a web2py server, and provides helper methods for common test tasks such as checking for the existence of elements, clearing browser logs, and checking for JavaScript errors. It also defines helper functions and classes for checking that zoom functionality is disabled, for finding linkouts, extracting dates and views, and converting javascript functions to JSON or URLs for testing, along with temporary minlife file functions. Additionally it provides a method to check for CSS classes on an element and to check that a javascript variable is set. The tests in subdirectories inherit from this class.</p> <p>The directory also contains:</p> <ul> <li> <p><code>__init__.py</code>: An empty file that makes the directory a Python package.</p> </li> <li> <p><code>test_functions_in_default.py</code>: This file tests all of the public facing functions in the <code>default.py</code> controller. It gets the list of public functions by querying the <code>/list_controllers.json</code> endpoint and checks that all pages return a 200 status code, or if they return a 400, that they provide a header link to a working example URL.</p> </li> <li> <p><code>test_webpage_spidering.py</code>: This file contains a test that \"spiders\" the entire site by recursively following all links, ensuring that all pages load without errors, and that external links can be accessed. It uses the <code>FunctionalTest</code> class for browser setup and checks all pages for JS errors using the <code>clear_log(check_errors=True)</code> method.</p> </li> </ul> <p>The <code>OZtree/tests/functional</code> directory also contains subdirectories that group tests for specific features:</p> <ul> <li> <p><code>sponsorship</code>: Contains functional tests for the sponsorship feature. It includes tests for normal site behavior, maintenance mode, and unsponsorable sites like the museum display. The main file is <code>sponsorship_tests.py</code>, which provides helper methods for setting up the test environment and manipulating the database to create realistic test cases. Other files in this directory, such as <code>test_maintenance_mode.py</code>, <code>test_unsponsorable_site.py</code>, and <code>test_normal_site.py</code>, are specific test cases that inherit from <code>SponsorshipTest</code> and test different scenarios of the sponsorship flow.</p> </li> <li> <p><code>treeviewer</code>: Contains functional tests for the tree viewer components. This directory contains files that test the various features of the OneZoom viewer, such as <code>test_tree_data_mismatch.py</code>, which checks how the viewer handles data mismatches; <code>test_viewer_urls.py</code>, which tests different URL formats; <code>test_wikipages.py</code>, which tests how Wikipedia and Wikidata pages are displayed; and <code>test_viewer_errors.py</code> which tests error handling. Other files in the directory test additional aspects of the viewer, such as sandboxing of iframes <code>test_sandbox.py</code>,  testing of links and infoboxes <code>test_links_and_infoboxes.py</code>, testing of tabs <code>test_tabs.py</code>, testing of language localization <code>test_language_localisation.py</code>, testing viewer availability <code>test_viewer_availability.py</code> and testing image info <code>test_image_info.py</code>.</p> </li> </ul> <p>These tests work together to ensure that the different components of the OneZoom website are working as intended. They provide a way to simulate user interactions, check for expected behavior, and catch any issues that might arise in the real world.</p>"},{"location":"tests/functional/sponsorship/","title":"sponsorship","text":"<p>The <code>OZtree/tests/functional/sponsorship</code> directory contains functional tests for the sponsorship feature of the OneZoom website. These tests use Selenium to simulate user interactions and verify that the sponsorship flow behaves as expected under different conditions.</p> <p>The core of the testing logic is within <code>sponsorship_tests.py</code>, which defines the <code>SponsorshipTest</code> class. This class sets up the test environment, including a temporary <code>appconfig.ini</code> file to modify sponsorship-related settings, and provides several helper methods for testing. Notably, <code>test_ott</code> is used to test sponsorship pages with different configurations, and <code>visit_data</code> retrieves the number of views, last view time, and reserve time of an OTT from the database. Other important functions in this file include:</p> <ul> <li><code>never_looked_at_ottname</code> - Finds a species that has not been sponsored or viewed before.</li> <li><code>delete_reservation_entry</code> - Removes an entry from the reservations table, used to reset the state of a species for testing purposes.</li> <li><code>invalid_ott</code>, <code>banned_unsponsored_ott</code>, <code>banned_sponsored_ott</code>, and <code>sponsored_ott</code> - Return OTT IDs for testing different cases, such as invalid OTTs, banned species, and already sponsored species.</li> <li>It also includes a method to generate links to the sponsorship page from different parts of the site, using javascript functions within the main OZ viewer and the museum display.</li> </ul> <p>The other files in this directory are test cases that inherit from <code>SponsorshipTest</code> and use its helper methods to test different scenarios. These include:</p> <ul> <li> <p><code>test_maintenance_mode.py</code>: Tests the behavior of the sponsorship pages when the site is in maintenance mode. In this mode, all sponsorship requests should redirect to a maintenance page, and no reservation entries should be created for new species. The tests verify that the correct maintenance page is displayed and no data modifications are made to the reservation table during this mode.</p> </li> <li> <p><code>test_unsponsorable_site.py</code>: Tests a site where sponsorship is disabled (e.g., a museum display). In this mode, new sponsorship requests are redirected to an \"elsewhere\" page (meaning, sponsor from the main website), visits are recorded, and reserved times are not recorded for any type of species. The tests verify that the correct page is displayed, visits are recorded, and no reservations are recorded.</p> </li> <li> <p><code>test_normal_site.py</code>: Tests the normal behavior of the sponsorship pages on the main OneZoom site where sponsorship is enabled. The tests cover invalid OTTs, banned species, already sponsored species, and the process of sponsoring a new species. This also tests that viewing the same page from the same treeviewer does not create multiple sessions, but visiting the page from a web2py link does. It also tests that the reserve time is properly decremented and the reservation is released after that time. It also includes a test of the full payment pathway. Finally it checks that the museum display, where links are banned, shows a sponsorship page, but redirects to the elsewhere page.</p> </li> <li> <p><code>__init__.py</code>: This file is empty and is used to mark the directory as a Python package.</p> </li> </ul> <p>These tests are important for ensuring that the sponsorship feature works correctly and that the different configurations (e.g., maintenance mode, museum display) behave as expected. They verify both the correct page redirects, and the modifications to the database (e.g., how visits are recorded, how reservations are allocated).</p>"},{"location":"tests/functional/treeviewer/","title":"treeviewer","text":"<p>The <code>OZtree/tests/functional/treeviewer</code> directory contains functional tests for the tree viewer components of the OneZoom application. These tests use Selenium to simulate user interactions and verify the behavior of the viewer in a browser environment.</p> <p>Here's a breakdown of the key files and their functionalities:</p> <ul> <li> <p><code>test_tree_data_mismatch.py</code>: This file tests how the tree viewer handles data mismatches between the database and the tree files. It specifically checks for error messages when the version of the data requested doesn't match the version available. It modifies the database, temporarily, to simulate a mismatch, and confirms that a specific error page is displayed with the correct version number. It also checks that the text-only tree does not rely on version numbers and will always load, even when a mismatch exists. A temporary minlife file is created to check for mismatches with that data as well.</p> </li> <li> <p><code>test_viewer_urls.py</code>: This file tests the various forms of URLs that the tree viewer can accept. It checks that different ways of specifying a leaf node (by name, by OTT ID, or both) all navigate to the correct location, and correctly load without an error. It also tests that jumping to a leaf without a zoom specification works as expected.</p> </li> <li> <p><code>test_wikipages.py</code>: This file tests the functionality of displaying Wikipedia and Wikidata pages within the tree viewer. It checks that the correct pages are displayed in an iframe, and that warnings are shown correctly for pages with missing information. It tests both the standard viewer and museum display versions. It also checks that pages without an associated English Wikipedia article will still display the Wikidata page, and that name-matching is turned off when requested by the url. It uses a mix of the Selenium library and the <code>requests</code> library to get data to use for its tests.</p> </li> <li> <p><code>test_viewer_errors.py</code>: This file focuses on testing error conditions within the tree viewer. It checks that an error page is displayed when a viewer is accidentally nested inside another viewer (a popup within a popup), preventing infinite recursion.</p> </li> <li> <p><code>test_sandbox.py</code>: This file tests the sandboxing of Wikipedia pages within the museum display. It checks that links within the displayed Wikipedia pages are disabled to prevent the user from navigating outside of the OneZoom website. It iterates through different language versions of Wikipedia pages to confirm this behavior.</p> </li> <li> <p><code>__init__.py</code>: This is an empty file, indicating that the directory is a Python package.</p> </li> <li> <p><code>test_links_and_infoboxes.py</code>: This file tests links within the information boxes (modals) of the OneZoom website. It verifies that: the museum display does not have any external links, all the non-page-internal links in the standard display open in a new tab, and that the logo link in the standard display does not open in a new tab.</p> </li> <li> <p><code>test_tabs.py</code>: This file tests the functionality of different tabs that appear in the tree viewer (e.g. Wikipedia, EOL, IUCN). It checks that when each tab is opened, the correct content is loaded, and that links are displayed as expected. The test loads the expert tree viewer for a variety of different IDs and checks that a specific element is available for each type of tab. It gets the list of possible tabs from the <code>UI_layer.json</code> endpoint.</p> </li> <li> <p><code>test_language_localisation.py</code>: This file is currently empty, but is intended to test the language localization features of the OneZoom website.</p> </li> <li> <p><code>test_viewer_availability.py</code>: This file tests the availability of various tree view modes (e.g. the default \"life\" view, the museum display \"life_MD\" view, the expert \"life_expert\" view, the Ancestor's Tale \"AT\" view, and the Linnean Society \"linnean\" view). It checks that the pages load correctly, that they contain the expected canvas element, and that the correct page titles are set for \"partner\" views. It also checks the availability of the text-only tree. Finally it tests the availability of the minlife view. A temporary minlife file is also created for testing.</p> </li> <li> <p><code>test_image_info.py</code>: This file tests the image information pages that appear when a user clicks the copyright info icon. It checks that the correct information is shown in an iframe, and that the links out from that frame are correct (either to a standard external website, or back to the OneZoom page). It does this for a variety of different types of images (wikipedia, eol, or plain) and on different viewers (the standard and museum display versions).</p> </li> </ul> <p>These tests work together to provide good coverage of the interactive components of the OneZoom website. The test suite uses a combination of Python code and Selenium commands to check that the OneZoom website works as expected.</p>"},{"location":"tests/site_setup/","title":"site_setup","text":"<p>The <code>OZtree/tests/site_setup</code> directory contains tests that verify the correct setup of the database and file system for the OZtree application. These tests are crucial for ensuring that the application functions correctly, especially after database migrations or file system changes.</p> <p>The <code>test_database_settings.py</code> file at https://github.com/wolfmanstout/OZtree/blob/main/tests/site_setup/test_database_settings.py contains a suite of tests that check various aspects of the database configuration. These tests use a connection to the database to verify that the necessary indexes have been created on key tables like <code>ordered_nodes</code>, <code>ordered_leaves</code>, and <code>vernacular_by_ott</code>. These tests also ensure that the full-text search indexes have a minimum word size that will result in good search results. Additionally, the tests confirm that vernacular names are stored using full 4-byte unicode, allowing for the proper storage of characters from all languages. It also tests that the <code>name</code> columns in several tables have identical charsets and the correct maximum size, which is necessary to avoid slowdowns related to charset differences. Finally, it checks if the <code>range_optimizer_max_mem_size</code> is set to a value high enough to prevent warnings when doing range queries.</p> <p>The <code>test_image_files.py</code> file at https://github.com/wolfmanstout/OZtree/blob/main/tests/site_setup/test_image_files.py verifies that all images referenced in the database are actually present as files on the local file system. The test iterates through the <code>images_by_ott</code> and <code>reservations</code> tables, fetching image source and IDs. It then checks if the corresponding image file exists in the expected location. If any image is missing, the test fails and outputs the missing image file paths to temporary files, to facilitate reharvesting missing image files. This test is important to ensure that the application can display all the required images. It is skipped if the configuration indicates that the application is not using local image thumbnails.</p> <p>The <code>__init__.py</code> file at https://github.com/wolfmanstout/OZtree/blob/main/tests/site_setup/__init__.py is an empty file. It is required to treat the directory as a Python package, enabling the execution of the tests within the directory.</p>"},{"location":"tests/unit/","title":"unit","text":"<p>The <code>OZtree/tests/unit</code> directory contains unit tests for various modules and controllers within the OZtree application. These tests are crucial for ensuring the stability and correctness of the codebase.</p> <p>Here's a breakdown of the key files and their functions:</p> <ul> <li> <p><code>test_modules_markdown.py</code>: This file tests the <code>markdown</code> module, specifically focusing on how it handles raw HTML input. The test ensures that the markdown library escapes HTML tags rather than rendering them, which is essential for preventing cross-site scripting (XSS) vulnerabilities.</p> </li> <li> <p><code>test_modules_tour.py</code>: This file tests the <code>tour</code> module. It includes tests for:</p> <ul> <li><code>tours_related_to_ott</code>: Verifies that the function correctly retrieves tours associated with a given OTT (Open Tree of Life taxon identifier). It checks if the correct tour identifiers are returned for single and multiple leaves, and that full metadata is returned when requested.</li> <li><code>tour_search</code>: Tests if the search functionality correctly retrieves tours based on keywords found in the title and description.</li> </ul> </li> <li> <p><code>test_controllers_tour.py</code>: This file tests the <code>tour</code> controller, which handles requests related to tours. The tests cover several aspects:</p> <ul> <li>Error Handling: Checks for appropriate error responses for invalid requests, such as missing tour identifiers, unauthenticated access, and missing tour stops.</li> <li>Data Storage and Retrieval: Verifies that tours can be stored, updated, and retrieved correctly from the database, including testing the re-use of tourstops.</li> <li>Symlinking: Tests the ability to create tourstops that are symlinks to other tourstops within the same or a different tour, and the cascading removal of symlinked tourstops.</li> <li>Common Ancestor: Ensures tourstops can be defined using a common ancestor pinpoint.</li> <li>Shared Data: Tests the use of <code>tourstop_shared</code> to apply common values to multiple tourstops, and that overrides to shared data are possible.</li> <li>Resetting to Default: Checks the functionality to reset tourstop values to their database defaults.</li> <li>List: Tests the ability to retrieve lists of tours, and also get a list of the remainder of the tours.</li> </ul> </li> <li> <p><code>test_modules_embed.py</code>: This file focuses on testing the <code>embed</code> module which handles the embedding of various media types. Key tests include:</p> <ul> <li><code>embedize_url</code>: Ensures that URLs are correctly appended with embed keys that are unique to the email address.</li> <li><code>media_embed</code>: Tests the functionality to correctly generate HTML for embedding images, files, YouTube videos, Vimeo videos, Wikimedia Commons files, and OneZoom tours. It also checks for the correct handling of default parameters, overrides, and classes.</li> </ul> </li> <li> <p><code>test_controllers_default.py</code>: This file contains tests for the <code>default</code> controller. It primarily focuses on ensuring that all the controller functions can be run without errors. It does not test the logic of each controller function in detail, but instead tests that the functions can be called.</p> </li> <li> <p><code>test_modules_usernames.py</code>: This file tests the <code>usernames</code> module, which handles the generation and retrieval of usernames associated with sponsorships. Key tests include:</p> <ul> <li><code>find_username</code>: Verifies that the module returns the existing username of the sponsorship, or constructs a new username if it does not already exist. It also tests that the module returns a list of all reservation IDs associated with a username.</li> <li><code>donor_name_for_username</code>: Checks that the most recent valid donor name is returned and handles hidden donor names appropriately.</li> <li><code>email_for_username</code>: Ensures that the correct e-mail address can be found for a given username, and errors appropriately if no e-mail address is available.</li> <li><code>usernames_associated_to_email</code>: Tests the ability to get all usernames associated with a single e-mail address.</li> </ul> </li> <li> <p><code>test_modules_sponsorship_search.py</code>: This file tests the <code>sponsorship_search</code> module, which is responsible for searching sponsorships. It includes tests for:</p> <ul> <li>Search Term Handling: Validates that an empty search term returns no results.</li> <li><code>searchType</code> Parameter: Checks if the search results are correctly filtered based on the <code>searchType</code> parameter (by, for, or all).</li> <li>Pagination: Tests if the limit and start parameters for pagination work as expected.</li> <li>Unverified Sponsorships: Verifies that unverified items do not appear in search results.</li> <li>Expired Leaves: Ensures that expired sponsorships are excluded from search results.</li> </ul> </li> <li> <p><code>test_controllers_default_sponsor.py</code>: This file contains tests for sponsor-related functions within the <code>default</code> controller. The tests primarily focus on:</p> <ul> <li><code>sponsor_renew</code>: Checks the logic to display active, expiring soon, and expired sponsorships correctly and ensures that a signature is correctly validated</li> <li><code>sponsor_renew_request</code>: Tests the logic for sending an e-mail to request a sponsorship renewal link, and checks that the mail is only sent if the user exists.</li> </ul> </li> <li> <p><code>test_controllers_API.py</code>: This file tests the API controller, specifically:</p> <ul> <li><code>pinpoints</code>: Verifies that the <code>pinpoints</code> API endpoint correctly resolves pinpoints into OTTs, with various forms of input.</li> <li><code>search_init</code>: Tests the ability to search for nodes and leaves, using a variety of parameters including ott and name.</li> <li><code>getOTT</code>: Tests the ability to get OTTs by a variety of keys, such as GBIF, EOL, NCBI and IUCN identifiers.</li> </ul> </li> <li> <p><code>test_modules_OZfunc.py</code>: This file tests functions within the <code>OZfunc</code> module. Specifically, it tests the <code>nodes_info_from_array</code> function, which is responsible for retrieving and formatting information about nodes and leaves. Key tests include:</p> <ul> <li>Sponsorship Data: Checks that the <code>nodes_info_from_array</code> function correctly includes sponsorship data, such as verified name, kind, and URL, and only includes verified entries.</li> <li>Tour Data: Tests that the function correctly retrieves tours associated with each leaf.</li> </ul> </li> <li> <p><code>test_modules_sponsorship.py</code>: This file tests the core <code>sponsorship</code> module and includes tests for:</p> <ul> <li>Maintenance Mode: Checks that the system behaves correctly when in maintenance mode with respect to sponsorships.</li> <li>Sponsorship Enabled: Tests the logic for enabling or disabling sponsorships based on user roles.</li> <li>Reservation Counts: Verifies that counts for the number of donors and sponsored leaves are accurate.</li> <li>Reservation Statuses: Ensures that the correct statuses (available, reserved, unverified, sponsored, etc.) are returned for leaves under various conditions, including payment failures and expiries, and that the reserve time is respected.</li> <li>Renewals: Verifies that expired rows can be renewed by re-purchasing, and that the old information is carried forward correctly.</li> <li>Confirming Payments: Tests the logic for processing payments, including giftaid and partner options, and handling replayed transactions. It also verifies the logic to make partial purchases, and correct donation records are stored.</li> <li>Expiring Rows: Checks that rows expire as expected, and that view counts are correctly preserved when a row is expired.</li> <li>Time Limits: Tests that the sponsorship time limits work as expected.</li> <li>Email Reminders: Verifies that email reminders are sent correctly based on time to expiry, and that contact can be restricted as expected. It also checks how the expiry days are calculated.</li> <li>Email Reminders Null Entries: Tests how null values in the sponsorship_ends column are handled.</li> <li>Expired Reservations: Ensures that the correct expired entries are returned from the database.</li> <li>Sponsor Renew Request Logic: tests the back-end logic for renewing sponsorships, either via a user-requested link, or automated e-mails. It also verifies that the correct e-mail addresses are used when testing mode is enabled, and that private details are correctly revealed when needed.</li> </ul> </li> <li> <p><code>test_modules_ozmail.py</code>: Tests the <code>ozmail</code> module. This module is responsible for handling the sending of e-mails within the application. The tests cover several aspects of the email functionality:</p> <ul> <li><code>get_mailer</code>: Checks if the mailer is correctly configured and returned based on the application's configuration, and that the mailer is not sent in testing mode.</li> <li><code>normalize_whitespace</code>: Tests that whitespace is correctly normalized within e-mail messages.</li> <li><code>template_mail</code>: Verifies that e-mail templates are correctly populated with the provided data, and that e-mail addresses are set up correctly.</li> </ul> </li> <li> <p><code>util.py</code>: This file provides utility functions for setting up and running unit tests. It includes functions for:</p> <ul> <li><code>grunt_path</code>: Finding the path to the grunt executable.</li> <li><code>call_controller</code>: Simulating a controller call for testing.</li> <li><code>time_travel</code>: Manipulating time for testing time-sensitive functions, including expiring rows.</li> <li><code>find_unsponsored_otts</code>: Locating unsponsored OTTs (Open Tree of Life taxon identifiers).</li> <li><code>clear_unittest_sponsors</code>: Removing test sponsorship entries from the database.</li> <li><code>create_tour</code>: Creating test tours.</li> <li><code>clear_unittest_tours</code>: Removes test tour entries from the database.</li> <li><code>set_appconfig</code>: Updates application configuration values for testing purposes.</li> <li><code>set_is_testing</code>: Sets the is testing flag.</li> <li><code>set_allow_sponsorship</code>: Sets the <code>sponsorship.allow_sponsorship</code> flag.</li> <li><code>set_maintenance_mins</code>: Sets the <code>sponsorship.maintenance_mins</code> flag.</li> <li><code>set_reservation_time_limit_mins</code>: Sets the <code>sponsorship.reservation_time_limit_mins</code> flag.</li> <li><code>set_smtp</code>: Sets the SMTP server options.</li> <li><code>purchase_reservation</code>: Simulating the purchase of a reservation.</li> <li><code>verify_reservation</code>: Simulating the verification of a reservation.</li> </ul> </li> <li> <p><code>test_modules_pinpoint.py</code>: This file tests the <code>pinpoint</code> module which is responsible for resolving pinpoint strings to database records. The main test focuses on:</p> <ul> <li><code>resolve_pinpoint_to_row</code>: Verifies that various pinpoint formats (@OTT, @=OTT, @_ozid=OZID, @latin, @latin=OTT, etc.) are correctly resolved to their corresponding database rows, and that common ancestors are correctly found. It also checks for the correct handling of non-unique latin names.</li> <li><code>tidy_latin</code>: Verifies that latin names are correctly normalized</li> </ul> </li> <li> <p><code>test_private_background_tasks.py</code>: This file tests the background task processing. It includes tests for:</p> <ul> <li>Email Reminders: Checks that email reminders are correctly sent by the background task, and checks that only the expected users are sent an e-mail. It also ensures the days_left values are calculated correctly and that expired sponsorships are correctly processed.</li> </ul> </li> </ul> <p>These unit tests cover a wide range of functionality, from module-level logic to controller actions and API endpoints. They are essential for the ongoing development and maintenance of the OZtree application, ensuring that changes do not introduce regressions or break existing functionality.</p>"},{"location":"uploads/","title":"uploads","text":"<p>The <code>OZtree/uploads</code> directory is designed to hold user-uploaded content. The <code>.gitignore</code> file at <code>OZtree/uploads/.gitignore</code> ensures that all files within the directory are ignored by Git, except for the <code>.gitignore</code> file itself. This is a standard practice for directories containing user-generated content, which is often large and not part of the source code.</p>"},{"location":"views/","title":"views","text":"<p>The <code>OZtree/views</code> directory serves as a container for all the view files within the OZtree application. These views are responsible for rendering HTML, JSON, and other formats in response to web requests. The directory is organized into several subdirectories, each catering to different functional areas of the website.</p> <p>The subdirectories within <code>OZtree/views</code> are:</p> <ul> <li> <p><code>API</code>: This directory holds the backend logic for the OneZoom tree APIs. These APIs deliver data, primarily in JSON format, to the front-end tree explorer and other applications. The files include endpoints for searching, retrieving images, and getting information about nodes, sponsors, and other data. The <code>.json</code> files serialize responses using <code>gluon.serializers.json</code> and set the <code>Content-Type</code> header, while the <code>.html</code> files use these APIs to display results in a human-readable format. Crucially, most of the JSON endpoints enable CORS (Cross-Origin Resource Sharing), permitting access from any website. The <code>index.html</code> file provides documentation for all available API endpoints.</p> </li> <li> <p><code>default</code>: This directory contains the HTML templates for the main OneZoom website, excluding the tree viewer. These templates handle content pages, sponsorship forms, donor lists, user management, and various site-related pages. The files here implement the user interface for the site, often using JavaScript for previews and form submissions. It uses  <code>sponsor_leaf.html</code> to show a form to users with the option to choose an image (using EoL API), enter their sponsorship name and message, and make the donation using PayPal. There are also templates for handling specific scenarios during sponsorship such as when a leaf is not available or is reserved or if the website is in maintenance mode. The <code>index.htm</code> acts as the home page of the website. The templates use a combination of HTML, CSS, JavaScript, and web2py templating.</p> </li> <li> <p><code>settings_values</code>: This directory contains files used for dropdown menu options within the user settings. Each file provides HTML <code>&lt;option&gt;</code> elements for populating settings menus, such as image source, language, color scheme, and tree layout. The options are \"Any,\" \"Verified,\" and \"Public domain\" for the image source;  \"Browser default,\" \"English\", \"Fran\u00e7ais\", and \"Svenska\" for language options; \"Extinction risk,\" \"Species popularity,\" \"Plain green, brown,\" and \"Ancestor's tale\" for coloring the tree; and \"Spiral\", \"Polytomy\", \"Natural\", \"Fern\", and \"Balanced\" for tree layout.</p> </li> <li> <p><code>tour</code>: This directory contains HTML templates and JSON endpoints for creating interactive tours within the OneZoom application. The <code>data.html</code> template is used to render the content of tours and uses various helper functions to display media and format text. The <code>tourstop</code> subdirectory contains HTML snippets used to construct the tour interface. The JSON endpoints, <code>list.json</code>, <code>search.json</code>, and <code>data.json</code>, handle the tour search functionality and provide the data in JSON format for use by the client. The files <code>homepage_animation.html</code>, <code>list.html</code>, <code>tutorial_MD.html</code>, and <code>screensaver.html</code> provides specific tour content and user interface elements.</p> </li> <li> <p><code>manage</code>: This directory contains HTML files used for administrative functions of the OneZoom website. These pages provide interfaces for site managers and translators to perform tasks like validating sponsorships, setting prices, managing tree data and language files. These files are protected by authentication and accessed through the <code>index.html</code> management portal page. The file <code>SPONSOR_UPDATE.load</code> allows administrators to validate individual sponsorships by reviewing and modifying the sponsor's chosen image and details, as well as generate a tweet for the sponsor. The <code>LIST_IMAGES.html</code> displays a paginated list of images on the server.</p> </li> <li> <p><code>tree</code>: This directory stores HTML files and JSON endpoints that provide information about nodes and leaves of the OneZoom tree of life.  These are primarily used to display pop-up windows with extra information when a user interacts with the tree. The <code>.json</code> files return data about the external links associated with a tree node or leaf and they are used by the OneZoom front end. The <code>.html</code> files display information about images, external resources such as GBIF and Wikipedia, and conservation status from the IUCN. The pages use web2py templating, conditional logic for popups or standalone pages, and include <code>content_pages.css</code> for consistent styling.</p> </li> <li> <p><code>developer</code>: This directory contains HTML files providing resources for developers. This includes the  <code>changelog.html</code> detailing the history of the project's software,  <code>index.html</code> providing an overview of developer resources, and <code>embedding.html</code> and <code>embed_edit.html</code> providing instructions and a tool for embedding the OneZoom tree into other websites. The directory provides documentation and access to APIs and tools for embedding OneZoom visualizations in other websites.</p> </li> <li> <p><code>popularity</code>: This directory contains the code for the OneZoom popularity service, which ranks species based on Wikipedia views and phylogenetic relationships. The directory provides an API endpoint in <code>list.json</code> that takes search parameters and returns popularity data. <code>index.html</code> provides an overview of how the popularity index is calculated and how to use the API and offers an interactive form to test the API. The <code>test.html</code> page allows developers to test the API results against live data from Wikipedia and Wikidata APIs.</p> </li> <li> <p><code>redirect</code>: This directory contains files that handle redirects to external resources, such as Wikidata and the Encyclopedia of Life (EoL). These views construct a URL and perform an HTTP redirect.  The views can render either JSON or HTML.  The <code>.json</code> files output a JSON representation of the data.</p> </li> <li> <p><code>treeviewer</code>: This directory stores the HTML, JavaScript, and CSS files that constitute the OneZoom tree viewer. This is a self-contained component supporting customizations. The files define the user interface elements, handle user interactions, load tree data, and manage layouts for different contexts.  <code>layout.html</code> contains the main HTML structure, CSS and Javascript libraries needed, and the core <code>&lt;canvas&gt;</code> element. <code>UI_layer.load</code> defines the user interface and the UIkit CSS Framework. The directory also has several other files that are used to configure the tree viewer for different purposes like museum displays, partner projects or tour based views. The file <code>server_urls.html</code> defines the javascript variable <code>server_urls</code>, which stores the URLs for various API endpoints.</p> </li> <li> <p><code>dev</code>: This directory contains files for development, testing, and documentation.  This includes <code>GARBAGE_COLLECT.html</code> for testing data collection, <code>DOCS.html</code> to render documentation from <code>COMPILED_DOCS.md</code>, <code>TEST_EOL_API.html</code> for testing the Encyclopedia of Life (EoL) API and <code>TEST_POST.html</code> to test POST requests and <code>index.html</code> which links to development and testing tools. <code>COMPILED_DOCS.md</code> is rendered by <code>DOCS.html</code>.</p> </li> <li> <p><code>education</code>: This directory holds HTML files providing educational resources. The directory includes <code>treasure_hunt_setup.html</code> for setting up treasure hunts, <code>screenshot_launcher.html</code> for generating vector graphics screenshots, and <code>museum_display_setup.html</code> for configuring museum displays. The <code>index.html</code> page links out to these other pages. <code>educational_materials.html</code> acts as a hub of other OneZoom related educational material. <code>installations.html</code> acts a sales page for installing OneZoom in other venues.</p> </li> <li> <p><code>email</code>:  This directory stores the web2py email templates. This includes templates for sponsorship renewal reminders, verification emails, and notifications about live sponsorships and failed payments. These templates use web2py's templating language for dynamic content. They are primarily used for sending emails to users about their sponsorships, payment and status updates.</p> </li> <li> <p><code>tour/tourstop</code>: This directory contains HTML snippets used in the interactive tours. This contains <code>footer.html</code>, <code>tutorial_footer.html</code> defining the standard navigation footers and <code>exit_confirm.html</code> defining a confirmation popup when exiting.</p> </li> </ul> <p>Additionally, the following files are located in the root of the <code>views</code> directory:     *   <code>generic.map</code>: A template used to include Google maps functionality.     *    <code>web2py_ajax.html</code>: A template that includes web2py ajax functionality.     *   <code>generic.html</code>: A generic HTML template used by default when a view is not provided for controllers.     *   <code>generic.rss</code>: A template to render data in RSS format.     *   <code>generic.pdf</code>: A template to output a PDF of a page.     *   <code>generic.jsonp</code>: A template to output data in a JSONP format.     *   <code>layout.html</code>: The main layout file for the entire site. It includes the HTML structure, CSS, and Javascript libraries used.     *   <code>generic.xml</code>: A template that outputs data in XML format.     *   <code>appadmin.html</code>: A view file that provides the interface for managing the application databases.     *   <code>__init__.py</code>: An empty file used to make the directory a python package.     *   <code>uikit_layout.html</code>: An alternative layout using the UIkit framework, used by most content pages in the main website     *   <code>generic.json</code>: A template for outputting data as JSON     *    <code>generic.load</code>: A generic template for loading dynamic content     *   <code>OZ_VPX361_birds.htm</code>: An early example version of the tree viewer that may be useful for testing or educational purposes.     *  <code>uikit_layout.html</code>: A layout file based on the UIkit framework.     *   <code>popup.html</code>: A template file used for any page which has been popuped within the main tree, and which has links, forms or pinch zoom disabled.      *   <code>popup.js</code>: A javascript file included by <code>popup.html</code>.    * <code>link_modifier.html</code>: A file that prevents certain links working on pages that are embedded within the tree viewer.    *  <code>analytics.html</code>: A file that includes Google Analytics tracking code and sets up consent mode.     * <code>web2py.html</code>: A slimmed down version of the standard w2p includes to be used if web2py ajax is not required.     *  <code>generic.ics</code>: A template for displaying data in ICS calendar format.</p> <p>In summary, the <code>OZtree/views</code> directory contains a well-organized set of view files to manage the entire user-facing aspect of the OneZoom application. The various subdirectories handle different areas of the website and provide a framework to manage the user interface, interactive tours, administrative features, and developer resources. They use web2py's templating capabilities, and often implement dynamic HTML with the help of javascript.</p>"},{"location":"views/API/","title":"API","text":"<p>The <code>OZtree/views/API</code> directory contains a collection of files that serve as the backend for the OneZoom tree APIs. These APIs provide data in JSON format, which is primarily used by the OneZoom tree explorer and other external projects.  The files in this directory can be broadly categorized into those providing data about nodes, sponsors, images, names, and other identifiers. All of these files are server-side views that respond to HTTP requests.</p> <p>Here's a breakdown of some of the more interesting files and their functions:</p> <ul> <li><code>search_for_sponsor.json</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/search_for_sponsor.json</code>): This API endpoint returns sponsorship information based on a search query, which is used in  <code>search_for_sponsor.html</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/search_for_sponsor.html</code>).  The <code>.json</code> file serializes the response data to JSON using <code>gluon.serializers.json</code> and sets the <code>Content-Type</code> header. The <code>.html</code> file uses this to search for and display sponsors, with pagination, on the OneZoom site.</li> <li><code>search_node.json</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/search_node.json</code>): This API is used to search for a node (taxon) in the tree. It serializes the response as JSON and enables CORS.</li> <li><code>node_images.json</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/node_images.json</code>): This API retrieves representative images for a given set of Open Tree Taxonomy (OTT) IDs. The response includes image URLs, copyright, and licensing information.  It also enables CORS. This API endpoint is used in <code>node_images.html</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/node_images.html</code>), which provides a human-readable display of the results.</li> <li><code>get_id_by_ott.json</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/get_id_by_ott.json</code>): Returns database identifiers (e.g. EoL, Wikidata) for a given OTT ID. This allows external projects to cross-reference OneZoom taxa with other databases.</li> <li><code>search_for_name.json</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/search_for_name.json</code>): This API endpoint searches for nodes based on a name search query. It's often used with  <code>search_for_name.load</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/search_for_name.load</code>), which renders the results for display on the website.</li> <li><code>pinpoints.json</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/pinpoints.json</code>): This endpoint retrieves pinpoint (location) information, which may be used to display where a species is found. It enables CORS.</li> <li><code>node_details.json</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/node_details.json</code>): This API retrieves detailed information about a specific node (taxon) in the tree. It enables CORS.</li> <li><code>version.json</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/version.json</code>): Provides version information for the OneZoom tree, and enables CORS.</li> <li><code>search_init.json</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/search_init.json</code>): An API that initializes a search, this enables CORS.</li> <li><code>image_details.json</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/image_details.json</code>):  This API returns details about specific images.</li> <li><code>update_visit_count.json</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/update_visit_count.json</code>):  An API that increments the visit count for a specific node, this is likely used for tracking popularity.</li> <li><code>otts2identifiers.json</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/otts2identifiers.json</code>): An API that gets identifiers in other databases, such as Wikidata or the Encyclopedia of Life, given an OTT ID. It enables CORS.</li> <li><code>getOTT.json</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/getOTT.json</code>): An API to get the corresponding Open Tree IDs for a variety of identifiers, such as EoL or GBIF IDs. It enables CORS.</li> <li><code>error.json</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/error.json</code>): An API for reporting error messages in JSON format, this enables CORS.</li> <li><code>search_for_sciname.json</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/search_for_sciname.json</code>):  An API for searching for a node using its scientific name, this enables CORS.</li> <li><code>index.html</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/index.html</code>): Provides documentation for the API endpoints available in this directory.  It includes information on the parameters that each API accepts and the data that is returned. This file serves as an entry point for developers who wish to consume the OneZoom APIs, and links directly to the API endpoints for testing purposes.</li> <li><code>otts2vns.json</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/otts2vns.json</code>): An API that gets the best matching vernacular (common) name for a given OTT ID. It enables CORS.</li> <li><code>get_ids_by_ott_array.json</code> (<code>https://github.com/wolfmanstout/OZtree/blob/main/views/API/get_ids_by_ott_array.json</code>): Returns database identifiers for an array of OTT IDs. It enables CORS.</li> </ul> <p>The <code>.json</code> files in this directory typically share a similar structure: they attempt to serialize a python data structure, typically named <code>response._vars</code>, into JSON using the appropriate python library. They also set the <code>Content-Type</code> header to <code>application/json</code>. Many of them also set the <code>Access-Control-Allow-Origin</code> header to allow cross-origin requests. This means the API can be called from Javascript code running in a browser on any site.</p> <p>The <code>.html</code> files, conversely, are not returning JSON data. Instead they are web pages intended to be viewed by humans that use the API endpoints defined in this folder, either for testing purposes or to provide a user interface.</p>"},{"location":"views/default/","title":"default","text":"<p>The <code>OZtree/views/default</code> directory contains the HTML templates for the main website, excluding the tree viewer itself. These files handle various aspects of the user experience, from displaying content pages to managing sponsorships.</p> <p>Here's a breakdown of the most important files and how they work together:</p> <ul> <li> <p><code>sponsor_node.html</code>: This template is the starting point for sponsoring a leaf. It displays a list of suggested species for sponsorship, often based on a selected part of the tree. It allows users to browse and select leaves for sponsorship, linking to <code>sponsor_leaf.html</code> for the actual sponsorship process. The page also includes a link to an alphabetical list of species via the  <code>list_sponsorable_children</code> URL. The template also makes use of  <code>sponsor_node_price.html</code> for displaying the price for each leaf.</p> </li> <li> <p><code>sponsor_leaf.html</code>: This is the main template for the sponsorship form. It presents the user with the option to choose an image (using EoL API), enter their sponsorship name and message, and make the donation using PayPal.  The page uses Javascript to generate the preview of a leaf based on the provided data. It uses the <code>sponsor_leaf.load</code> view to actually show the form, so that the form is available even without Javascript.</p> </li> <li> <p><code>spl_banned.html</code>, <code>spl_elsewhere_not.html</code>, <code>spl_reserved.html</code>, <code>spl_unverified.html</code>,  <code>spl_error.html</code>, <code>spl_waitpay.html</code>, <code>spl_invalid.html</code>, <code>spl_maintenance.html</code> and <code>spl_elsewhere.html</code>: These files handle specific scenarios during the sponsorship process, such as a species not being available, reserved, needing manual admin check, awaiting payment, being invalid or if the website is in maintenance mode. These templates serve as informative pages to the user about the status of a sponsorship and what actions they might need to take. In the  case of  <code>spl_elsewhere.html</code>, the species can only be sponsored from the main website, so this template provides a QR code and a link to use.</p> </li> <li> <p><code>sponsor_pay.html</code>: This page is shown if there was an error with the PayPal transaction. It provides information and offers the user to contact the website for assistance.</p> </li> <li> <p><code>treecards.html</code>: Explains the Tr-eCard concept and how to send one, and links to the tree and other pages to start a sponsorship.</p> </li> <li> <p><code>tree_index.html</code>: This template displays a collection of other trees built with OneZoom, acting as an index for various projects and data sets.</p> </li> <li> <p><code>gallery.htm</code>: Displays a gallery of OneZoom images, screenshots and videos.</p> </li> <li> <p><code>donor_list.html</code>: This template is used to display a list of donors and their sponsored leaves, and also makes use of <code>footer_sponsor_items.load</code> to show a set of images in the footer.</p> </li> <li> <p><code>work_with_us.html</code>: This page is an overview of how to work collaboratively with OneZoom, including software development, museum displays, and funding opportunities.</p> </li> <li> <p><code>sponsor_user_manage.html</code>: Allows users to manage their sponsored leaves by requesting a link to their personal donations page. It provides information about the sponsorship process and renewals.</p> </li> <li> <p><code>colkey.load</code>: Provides a legend for the color schemes used in the tree view and makes use of  <code>link_modifier.html</code>.</p> </li> <li> <p><code>endorsements.html</code>: Showcases endorsements and positive feedback from various users.</p> </li> <li> <p><code>index.htm</code>: The homepage of the site. It includes a mini version of the tree and links out to other key parts of the site. It is configured by included files in the treeviewer directory.</p> </li> <li> <p><code>FAQ.html</code>: Provides an accordion layout of frequently asked questions about the project, the tree and sponsorships.</p> </li> <li> <p><code>about.load</code>: Provides the main content for the <code>about.html</code> page, outlining the mission, software, and people behind OneZoom and uses  <code>link_modifier.html</code>.</p> </li> <li> <p><code>list_sponsorable_children.html</code>: Displays an alphabetised list of sponsorable species within a specified group.</p> </li> <li> <p><code>sponsor_renew.html</code>: Allows users to manage their expiring sponsorships. It provides a form to allow users to renew their sponsorship. It also shows links to a public page of the user's donations. It also relies on the shared  <code>sponsor_giftaid.inc.html</code> template, to allow the user to make or modify a gift aid declaration.</p> </li> <li> <p><code>custom_400.html</code> and <code>custom_404.html</code>: These templates handle HTTP 400 and 404 errors.</p> </li> <li> <p><code>list_controllers.json</code>: This is a JSON file which is generated using a template, this contains a list of the available controllers in the web2py framework.</p> </li> <li> <p><code>about.htm</code>: This template contains the structure for the about page and includes <code>about.load</code> for the main page content.</p> </li> <li> <p><code>team.html</code>: Introduces the OneZoom team members.</p> </li> <li> <p><code>sponsor_handpicks.html</code>: This page offers a list of hand-picked species with varying prices for sponsorship.</p> </li> <li> <p><code>introduction.html</code>: Provides the introductory information about the project, intended for first time users.</p> </li> <li> <p><code>pp_process_post.html</code>: This template is used as the result page for PayPal interactions with the site.</p> </li> <li> <p><code>gallery.html</code>: Same as <code>gallery.htm</code> but uses a different layout.</p> </li> <li> <p><code>user.html</code>: Handles user registration and login.</p> </li> <li> <p><code>sponsor_giftaid.inc.html</code>: This include file provides a form to allow users to opt-in for Gift Aid (UK tax payers), used by various other templates.</p> </li> <li> <p><code>timeline.html</code>: This template displays the OneZoom project timeline.</p> </li> <li> <p><code>data_sources.load</code>: This file provides the main content for the  <code>data_sources.html</code> page, outlining the sources of the data used on the tree. It also relies on the helper view  <code>link_modifier.html</code>.</p> </li> <li> <p><code>otop_intro.html</code>: A collaboration between OneZoom and the One Tree One Planet project.</p> </li> <li> <p><code>sponsored.html</code>: This template displays a list of recently sponsored leaves.</p> </li> <li> <p><code>how.load</code>: Provides the information for the <code>full_guide.html</code> which acts as a more detailed user guide to the tree, also making use of  <code>link_modifier.html</code>.</p> </li> <li> <p><code>lang_export.po</code>: This is a template which outputs a po file used for translations.</p> </li> <li> <p><code>lang_export.html</code>: A page which allows translations to be downloaded and subsequently added to the site.</p> </li> <li> <p><code>sponsor_replace_page.html</code>:  A simple page that is used to replace the sponsorship form after a successful paypal submission.</p> </li> <li> <p><code>terms.load</code>: Provides the main content for the  <code>terms.html</code> page and also makes use of  <code>link_modifier.html</code>.</p> </li> <li> <p><code>terms.html</code>: This template contains the structure for the Terms and Conditions page and includes <code>terms.load</code> for the main page content.</p> </li> <li> <p><code>donor.html</code>: Displays a page with all of a user's sponsorships, given a unique username.</p> </li> <li> <p><code>sponsor.html</code>: This page acts as a hub for starting the sponsorship process. It has links to the tree and various starting places, as well as ways to search for existing sponsorships.</p> </li> <li> <p><code>sponsor_leaf_redirect.html</code> and  <code>sponsor_node_redirect.html</code>: These are very simple pages that redirect the user to a relevant sponsorship page for a single species or group of species.</p> </li> <li> <p><code>sponsor_renew_request.html</code>: This is a very simple form to allow users to enter their details so that their personal sponsorship renewal page can be e-mailed to them.</p> </li> </ul> <p>In summary, this directory houses the core HTML templates for the OneZoom website, handling user interaction, content display, and the various steps of the sponsorship process. These templates use a combination of HTML, CSS, JavaScript and web2py templating for dynamic content and form handling. These files work together to create a user-friendly experience and a framework for the site's content.</p>"},{"location":"views/dev/","title":"dev","text":"<p>The <code>OZtree/views/dev</code> directory contains a variety of HTML and JSON files used for development, testing, and documentation of the OneZoom project. Here's a breakdown of the key files:</p> <ul> <li> <p><code>GARBAGE_COLLECT.html</code>: This file appears to be a simple template that displays a variable named <code>info</code>. It's likely used for debugging or testing purposes related to data collection or cleanup.</p> </li> <li> <p><code>DOCS.html</code>: This file is the main documentation page for the project. It uses Flatdoc to render Markdown documentation from <code>COMPILED_DOCS.md</code>. The page includes links to the OneZoom GitHub repositories, both public and private.</p> </li> <li> <p><code>OBJGRAPH_DELTAS.json</code>: This file dynamically generates a JSON response containing request variables. It's likely used for debugging the server-side state of the application.</p> </li> <li> <p><code>TEST_EOL_API.html</code>: This file provides an interface for testing the Encyclopedia of Life (EoL) API. It allows developers to input an EoL ID and API key, then displays the returned data and images. It uses <code>OZSponsor/EOLqueries.js</code>, which can be found in the <code>OZtree/static</code> directory, to make the API requests.</p> </li> <li> <p><code>TEST_POST.html</code>: This file is used to test how the application handles POST requests, particularly those mimicking PayPal's payment processing. It includes a form that sends data to the <code>pp_process_post</code> endpoint. It highlights the expected structure of the data and mapping to variables on the server.</p> </li> <li> <p><code>index.html</code>: This is a central debugging page, providing links to various development and testing tools. It includes links to the documentation, a tool for making zooming movies, and the EoL API test.</p> </li> <li> <p><code>TEST_LINKS.html</code>: This file contains links designed to help with creating zooming movies of the OneZoom tree. It provides specific instructions for pre-loading paths to leaves and using the JavaScript console to control the animation. It gives instructions for optimizing video captures with <code>ffmpeg</code>.</p> </li> <li> <p><code>COMPILED_DOCS.md</code>: This file is a Markdown document that is rendered by <code>DOCS.html</code>. It's likely generated programmatically and contains the core documentation for the project.</p> </li> <li> <p><code>SAFARI_IFRAME_BUG.html</code>: This file is a test case for a known bug in Safari that affects scrolling inside iframes. It sets up a modal with tabs that load external URLs within iframes. It uses <code>uikit-3</code> which can be found in the <code>OZtree/static</code> directory.</p> </li> </ul>"},{"location":"views/developer/","title":"developer","text":"<p>The <code>OZtree/views/developer</code> directory contains several HTML files that provide information and tools for developers working with the OneZoom project. These files primarily focus on explaining the project's architecture, providing access to APIs, and offering tools for embedding OneZoom visualizations in other websites.</p> <p>Here's a breakdown of the key files and their functionality:</p> <ul> <li><code>changelog.html</code>: This file serves as a comprehensive changelog for the OneZoom software. It details the various versions of OneZoom, starting from version 1.0 (October 2012) to the current version 4.0 (April 2024). Each version entry includes a description of the changes, new features, and improvements introduced. It also links to specific locations on the tree of life that are representative of each release. This page is valuable for developers and users to understand the evolution of the software, what is new, and what has changed in the different versions. Some versions provide links to downloads, allowing users to access the software from previous releases.</li> <li><code>index.html</code>: This is the main landing page for developers, providing an overview of the resources available for those interested in using, contributing to, or extending OneZoom. It introduces OneZoom's developer tools, including its APIs, a tool to explore species popularity, and the source code on GitHub. The page details how to host a variation of the OneZoom tree explorer, the technologies used (Web2py, Python, ECMAScript, SASS, Grunt, NodeJS), the module structure, web browser compatibility and licensing information. It also highlights how the database can be reused for third-party projects and how the tree visualization modules are designed for flexibility.</li> <li><code>embedding.html</code>: This file provides instructions and tools for embedding OneZoom visualizations into other websites. It offers an embed editor for creating custom embed codes, as well as guidance on bulk-embedding the tree viewer and controlling it via URL parameters. The page details various URL parameters that can modify the way the tree is viewed, including setting language, highlighting paths, starting animations, and more. It also provides code examples for how to interact with the OneZoom tree viewer programmatically via <code>onezoom.controller.set_treestate()</code>. This file is crucial for developers looking to integrate OneZoom into their own projects.</li> <li><code>embed_edit.html</code>: This is the embed editor tool referenced by <code>embedding.html</code>. It allows developers to configure the OneZoom tree viewer, providing options to set a starting location, highlight paths to specific species, select a language, and modify the color scheme. The page includes a preview iframe that shows the result of the selected configurations, and it emails a copy of the URL that can be used to embed the visualization. The form is also populated from URL parameters, allowing users to edit existing embed URLs. The embed editor makes it easier for developers to create customized versions of OneZoom without needing to write any code.</li> </ul> <p>These files work together to provide a comprehensive set of resources for developers:</p> <ul> <li><code>index.html</code> introduces developers to the project and its resources.</li> <li><code>changelog.html</code> informs developers about the history and evolution of the project.</li> <li><code>embedding.html</code> and <code>embed_edit.html</code> enable developers to integrate OneZoom into their projects.</li> </ul> <p>By using these resources, developers can learn about OneZoom, contribute to its development, and extend its functionality.</p>"},{"location":"views/education/","title":"education","text":"<p>The <code>OZtree/views/education</code> directory contains several HTML files that provide educational tools and information related to the OneZoom project. These files are primarily used to set up and launch different interactive experiences of the OneZoom tree of life explorer.</p> <p>Here's a breakdown of the key files and how they work together:</p> <ul> <li> <p><code>treasure_hunt_setup.html</code>: This file sets up a \"treasure hunt\" activity. It presents a form where users can enter Open Tree Taxonomy (OTT) IDs (e.g., 770315 for Homo sapiens) or use the defaults. When the form is submitted, the user is taken to the OneZoom tree viewer, and they can \"collect\" the target taxa by clicking on their names in the tree. There's also an \"easy mode\" checkbox that highlights the routes to each target, making the hunt easier to follow.</p> </li> <li> <p><code>screenshot_launcher.html</code>: This page provides a tool to generate high-quality vector graphics screenshots of the OneZoom tree. It explains how to use the tool and what permissions apply to the screenshots and provides a link to launch the screenshot tool, which is embedded in the standard tree viewer. The generated screenshots can be used in print, educational materials, or elsewhere online.</p> </li> <li> <p><code>museum_display_setup.html</code>: This file is designed to help set up OneZoom as an interactive display in museums or other educational institutions. It provides a form with options to customize the display (e.g., tree visualization style, image source, language, home location on the tree, screensaver wait time, and hardware for interaction). It generates a URL that can be used to launch the customized display. It also includes information about key features, setup instructions, and how to get listed as an installation on the OneZoom website. The generated URL links to a specific version of the tree viewer that is \"sandboxed,\" with all links that could enable a user to click and get out of the page removed.</p> </li> <li> <p><code>index.html</code>: This is a simple index page that provides links to the other educational tools in this directory, specifically the museum display setup and the treasure hunt. It acts as a central hub for accessing the educational features.</p> </li> <li> <p><code>installations.html</code>: This page lists museums and other venues that use OneZoom for interactive displays. It also provides information about the benefits of working with the OneZoom team, key data and functions available, and how to get a display up and running. It is essentially a sales page for museums and other venues that might want to install the OneZoom tree viewer in their location.</p> </li> <li> <p><code>educational_materials.html</code>: This page is a hub for educational resources related to OneZoom. It encourages teachers and educators to share materials, lists external resources (like the Linnean Society), and provides downloadable resources like a \"Maze of Life\" puzzle and a \"fill-in-the-blanks\" quiz of species names. This page serves as a directory of downloadable resources and a place for educators to contribute to the project.</p> </li> </ul> <p>These files work together to offer a variety of ways to explore the OneZoom tree of life, from game-like treasure hunts to customizable museum installations. The <code>museum_display_setup.html</code> is key to creating a custom version of the tree viewer, which is then used in the museum display. The <code>index.html</code> page acts as a launching point for the other tools.</p>"},{"location":"views/email/","title":"email","text":"<p>The <code>OZtree/views/email</code> directory contains email templates used by the OneZoom application. These templates are written using web2py's templating language, which allows for dynamic content to be inserted into the emails. Here's a breakdown of the key files:</p> <ul> <li>embed_code.txt: This file provides the HTML code snippet for embedding the OneZoom tree into an external website. It includes a placeholder for the <code>url</code> of the OneZoom tree, which will be filled in when the email is generated.</li> <li>sponsor_renew_reminder.txt: This template is for reminder emails sent to users whose sponsorships are expiring or are due for renewal. It dynamically includes information about the sponsored species, the time left before expiry, and links to renew sponsorships. The email also includes a link to the user's public sponsorships page and an unsubscribe link.</li> <li>to_verify.txt: This is an email confirming that a user's sponsorship payment has been received and that the sponsorship text is pending verification. It thanks the user for the donation and indicates that the sponsorship will be live in a few days.</li> <li>test_template.txt: This file serves as a basic example of a template used for unit testing the email system. It demonstrates how template variables are inserted and handled.</li> <li>live.txt: This template informs a user that their sponsorship has gone live on the OneZoom tree. It includes links to the specific sponsored leaf on the tree, a link to the user's sponsorship page, and a general link to the tree.</li> <li>no_payment.txt: This email is sent to users who filled out a sponsorship form but did not complete the payment. It explains that no payment was received and provides a link to return to the sponsorship page.</li> </ul> <p>These files work together to provide a system for sending emails to users about their sponsorships on the OneZoom tree. The templates are processed by the web2py framework, which inserts dynamic data into the emails before sending them. These templates facilitate the key sponsorship workflows, such as initial signup, renewal, verification, and notification of live sponsorships.</p>"},{"location":"views/manage/","title":"manage","text":"<p>The <code>OZtree/views/manage</code> directory contains HTML files that define the user interface for the administrative functions of the OneZoom website. These pages are primarily for use by site managers and translators, and are protected by authentication. They allow privileged users to perform tasks such as validating sponsorships, setting prices, and managing the tree data.</p> <p>Here's a breakdown of the key files and their functionality:</p> <ul> <li><code>index.html</code>: This is the main landing page for the management section. It provides a list of links to other management pages, categorized by user role (translator, manager, admin). It is essentially a table of contents for the other pages in this directory. It also links to the web2py admin interface, which is a separate tool for managing the server.<ul> <li>It links to several important pages:<ul> <li><code>SPONSOR_VALIDATE</code> for validating new sponsor texts.</li> <li><code>SHOW_RENEWAL_INFO</code> for finding a URL for sponsor renewal pages.</li> <li><code>SHOW_EMAILS</code> for viewing lists of sponsor emails</li> <li><code>SHOW_SPONSOR_SUMS</code> for summary of total donations by each sponsor.</li> <li><code>LIST_IMAGES</code> for listing images of species on the server.</li> <li><code>SET_PRICES</code> for setting prices for all taxa.</li> <li><code>GENERATE_TREE</code> to regenerate the tree.</li> <li><code>REIMPORT_TREE_TABLES</code> to reimport the tree data from files (this is a destructive action).</li> </ul> </li> </ul> </li> <li><code>LIST_IMAGES.html</code>: This page displays a paginated list of thumbnail images stored on the server. It allows administrators to review the images and their associated metadata, such as the source, license, and rating. It also includes a button that displays an iframe of the EOL page for the data object related to the image.</li> <li><code>SHOW_RENEWAL_INFO.html</code>: This page provides a form where administrators can input usernames or emails to generate private renewal URLs for sponsors, allowing them to renew their sponsorships.</li> <li><code>SET_PRICES.html</code>: This page allows administrators to set the pricing structure for taxa based on their pre-calculated popularity. It presents a table of current prices, and provides a form to set new price bands.</li> <li><code>GENERATE_TREE.html</code>: This page is used to initiate the generation of a new tree. It informs the administrator whether a tree generation is already in progress, and provides details about the script being run and the output files.</li> <li><code>SPONSOR_UPDATE.html</code>: This page appears to be a container for a partial page loaded by <code>SPONSOR_VALIDATE.html</code>. It includes <code>SPONSOR_UPDATE.load</code></li> <li><code>SHOW_EMAILS.html</code>: This page displays lists of sponsors, categorized by their validation status and payment status. It provides links to email each sponsor, view their sponsored leaf on the tree, and view the pictures they have used. There are also scripts to download the images. It also gives a list of sponsors who have agreed to be contacted and a command to download all onezoom_via_eol pictures.</li> <li><code>SPONSOR_UPDATE.load</code>: This page is loaded by <code>SPONSOR_VALIDATE.html</code> via AJAX. It provides a form to validate individual sponsorships, including options to review and modify the sponsor's chosen image and details, as well as the ability to generate a tweet for the sponsor. It uses Javascript to communicate with the EOL API.</li> <li><code>REIMPORT_TREE_TABLES.html</code>: This page is used to reimport the tree data from files, and provides a series of SQL commands to perform this operation.</li> <li><code>SHOW_SPONSOR_SUMS.html</code>: This page displays a summary of total donations by each sponsor, ordered by the amount donated. It also shows which donors have sponsored multiple leaves.</li> <li><code>edit_language.html</code>: This page provides an interface for translators to edit language files. It allows them to add translations for various strings used in the application.</li> <li><code>SPONSOR_VALIDATE.html</code>: This is the main page for validating new sponsorships. It displays a list of recently sponsored leaves that need to be validated. It uses AJAX to load the contents of <code>SPONSOR_UPDATE.load</code> for each sponsorship. It allows administrators to review and approve or modify the sponsorship details, including the chosen image. It also provides links to show all sponsorships, only unpaid sponsorships, or to search for specific OTT ids.</li> </ul> <p>These files work together to provide a comprehensive set of administrative tools for managing the OneZoom website. The pages are primarily accessed via the <code>index.html</code> page, and they are all protected by authentication to ensure that only authorized users can access them. The files use a combination of HTML, CSS, and JavaScript to provide a user-friendly interface for managing the site. Many of the pages include web2py helper functions to generate HTML and to interact with the database.</p>"},{"location":"views/popularity/","title":"popularity","text":"<p>The <code>OZtree/views/popularity</code> directory contains the code for the OneZoom popularity service, which calculates and provides data about the popularity of species based on Wikipedia page views and phylogenetic relationships.</p> <p>The core functionality is exposed through the API endpoint defined in <code>list.json</code>. This file is a view that returns a JSON response containing a list of taxa ranked by popularity. It takes several query parameters, including a required API <code>key</code> and a comma-separated list of Open Tree Taxonomy identifiers (<code>otts</code>).  It also supports optional parameters to control the maximum number of results, whether to expand higher-level taxa into their constituent species, whether to return scientific names, whether to include raw popularity scores, and the order of the results.</p> <p>The <code>index.html</code> file provides an overview of the OneZoom popularity index, explaining how it is calculated, its limitations, and how to use the API.  It includes a description of the phylogenetic popularity score, as well as the underlying raw popularity score derived from Wikipedia page data.  It also provides an interactive form to test the API and a series of example API calls.  This page serves as the main documentation for the popularity service.</p> <p>The <code>test.html</code> file is a testing page for the popularity service.  It allows users to input an Open Tree Taxonomy identifier (<code>ott</code>) and view a table containing information about that taxon and its parents including their popularity data (from the API) and their corresponding English Wikipedia page size and visit data (obtained directly from the Wikidata and Wikimedia APIs). The page uses JavaScript to make asynchronous requests to these APIs to fetch the most up-to-date information about page sizes and visits. This page is primarily for development and debugging.</p> <p>The <code>needs_authentication.html</code> file displays a page that is shown when a user attempts to access the popularity service without providing a valid API key. It provides a form where the user can enter their API key.</p> <p>These files work together as follows: *   <code>index.html</code> provides the documentation and interactive interface for users to understand and interact with the service. It links to the <code>list</code> API. *   <code>list.json</code> is the API endpoint that takes parameters from the user via the query string and returns popularity data. *   <code>test.html</code> allows developers to test the API results against the live data from the Wikipedia and Wikidata APIs. *   <code>needs_authentication.html</code> handles the case where a valid API key is not present in the query parameters.</p>"},{"location":"views/redirect/","title":"redirect","text":"<p>The <code>OZtree/views/redirect</code> directory contains view files that handle redirects to external resources. These views primarily take data passed to them and construct a URL, then perform an HTTP redirect. Each view can render either JSON or HTML.</p> <p>The files <code>wikidata.html</code> and <code>wikipedia.html</code> are used to redirect to Wikidata and Wikipedia, respectively. <code>wikidata.html</code> uses the <code>wikidata_url</code> function to construct a URL based on the <code>Q</code> parameter passed in the data, and <code>wikipedia.html</code> uses the <code>wikipedia_url</code> function to create a URL from a <code>Q</code> and a <code>site</code> parameter in the data. Both will perform a redirect if the required data is present. If the data is missing, then the first element in the <code>errors</code> array will be rendered.</p> <p><code>eol.html</code> is used to redirect to the Encyclopedia of Life. It uses the <code>eol_url</code> function to construct the redirect URL using the passed data. Similar to the others, it will redirect if data is present and render an error if not.</p> <p>The <code>wikidata.json</code> and <code>eol.json</code> files do not redirect but instead return a JSON representation of the <code>response._vars</code> data. If an exception occurs while creating the JSON response, then a 405 error is returned. These files are intended to provide data about the redirect request in JSON format.</p>"},{"location":"views/settings_values/","title":"settings_values","text":"<p>The <code>OZtree/views/settings_values</code> directory contains files that provide the options for dropdown menus in the user settings. Each file provides HTML <code>&lt;option&gt;</code> elements that populate the dropdown with different choices. These files are loaded dynamically to build the user settings menu.</p> <ul> <li> <p><code>img.load</code> provides options for the image source.  It includes \"Any,\" \"Verified,\" and \"Public domain.\"</p> </li> <li> <p><code>lang.load</code> provides language options for the user interface.  It has options for \"Browser default,\" \"English\", \"Fran\u00e7ais\", and \"Svenska\", which are translated, and \"\u4e2d\u6587\", which is not yet translated.</p> </li> <li> <p><code>cols.load</code> controls how the tree is colored. Options include \"Extinction risk,\" \"Species popularity,\" \"Plain green, brown,\" and \"Ancestor's tale.\"</p> </li> <li> <p><code>vis.load</code> provides options for the tree layout. The options include \"Spiral\", \"Polytomy\", \"Natural\", \"Fern\", and \"Balanced\".</p> </li> </ul>"},{"location":"views/tour/","title":"tour","text":"<p>The <code>OZtree/views/tour</code> directory contains the HTML templates and JSON endpoints for creating interactive tours within the OneZoom application. These tours guide users through different aspects of the tree of life, highlighting specific clades or features.</p> <p>The <code>tourstop</code> subdirectory contains HTML snippets used to construct the tour interface. The files within, such as <code>footer.html</code>, <code>tutorial_footer.html</code>, and <code>exit_confirm.html</code>, define the standard navigation footers and exit confirmation popup. Refer to the subdirectory's README.md for more detail.</p> <p>The <code>data.html</code> file is the core template for rendering tour content. It iterates through tour data, dynamically generating HTML containers for each tour stop. It uses several key features: - Data attributes (<code>data-*</code>) are heavily used to store tour and tourstop properties that are consumed by javascript to control the flow of a tour. - Jinja2 templating allows dynamic generation of HTML based on a tour's data, including localized text using the <code>T()</code> function. - It uses a number of helper functions (e.g. <code>media_embed</code> and <code>markdown</code>) to display media and format text. - It includes a progress bar dropdown to jump to specific tourstops. - It includes share and exit buttons, styled using the UIKit CSS framework</p> <p>Several JSON endpoints are defined for use by the tours: - <code>list.json</code> serializes a list of tours in JSON format. - <code>search.json</code> provides a JSON endpoint for tour search functionality. - <code>data.json</code> serializes tour data in JSON format for consumption by the client.</p> <p>The <code>homepage_animation.html</code> template defines an animation that is shown on the OneZoom homepage. It's a simplified tour that highlights different areas of the tree. It uses the same container structure as <code>data.html</code> and includes navigation controls.</p> <p>The <code>list.html</code> file is a page that displays a list of available tours. It uses the <code>tours-list</code> CSS class to display tours in a grid and includes a progress bar for each tour. It also includes javascript to sort the list.</p> <p>The <code>tutorial_MD.html</code> file defines a step-by-step tutorial that introduces users to the features of the tree of life. It is built using the same container elements and navigation controls as the other tours. It uses conditional logic to display different content based on the <code>request.function</code> variable. It includes instructional text, images, and interactive components. The <code>outsidebox</code> divs combined with svgs create callouts, highlighting different parts of the user interface. The file also includes specific javascript to control the pop-up behaviour of one of the tour stops.</p> <p>The <code>screensaver.html</code> file defines a screensaver tour. It's a simplified tour that automatically pans across different parts of the tree of life. It uses the same container structure as <code>data.html</code>.</p> <p>These files work together to provide a flexible and interactive way for users to explore and learn about the OneZoom tree of life. The <code>data.html</code> template and the JSON endpoints provide the core functionality, while the other files provide specific tour content and UI elements.</p>"},{"location":"views/tour/tourstop/","title":"tourstop","text":"<p>The files in the <code>OZtree/views/tour/tourstop</code> directory define HTML snippets used for the interactive tours. </p> <p>The <code>footer.html</code> and <code>tutorial_footer.html</code> files define the standard navigation footers for tours and tutorials respectively. Both contain buttons to move forward, move backward, resume, or exit. The <code>tutorial_footer.html</code> also includes a \"skip\" button.</p> <p>The <code>exit_confirm.html</code> defines a confirmation popup. It is displayed when the user attempts to exit the tour or tutorial. It contains confirmation and cancel buttons. The popup is styled by the <code>exit_confirm.css</code> stylesheet linked in the file.</p>"},{"location":"views/tree/","title":"tree","text":"<p>The <code>OZtree/views/tree</code> directory contains HTML files and JSON endpoints that provide information about the nodes and leaves of the OneZoom tree of life. These files are primarily used to display pop-up windows with extra information when a user interacts with the tree.</p> <p>The HTML files in this directory generally follow a similar pattern. They use the web2py templating language to generate HTML content, often including conditional logic for whether the page is being displayed as a popup or as a standalone page. Many of them also load <code>content_pages.css</code> to help with consistent styling.</p> <p>Here's a breakdown of the key files:</p> <ul> <li><code>eol_old_dataobject_ID.html</code>: This is a simple page that informs the user that an image from an older version of the Encyclopedia of Life is no longer available.</li> <li><code>pic_info.html</code>: This file displays information about an image, including its copyright license and provenance. It uses the <code>image_url</code>, <code>image</code>, and <code>url_override</code> variables passed to the view to populate the page.</li> <li><code>eol_dataobject_ID.html</code>: This file appears to be a placeholder for a page that would display information about an Encyclopedia of Life data object. However, the content of the page is currently empty, suggesting that this may be under development or no longer in use.</li> <li><code>leaf_linkouts.json</code> and <code>node_linkouts.json</code>: These files generate JSON responses containing data for external links associated with tree leaves and nodes, respectively. They use the <code>response._vars</code> variable to serialize data and set appropriate CORS headers. They are used by the OneZoom front end.</li> <li><code>GBIF_OZpage.html</code>: This file displays a map of species occurrences from the Global Biodiversity Information Facility (GBIF). It uses the OpenLayers library to display the map and fetches data from the GBIF API. It makes use of the <code>sci_name</code>, <code>nice_name</code> and <code>gbif_id</code> variables passed to the view.</li> <li><code>node_linkouts.html</code> and <code>leaf_linkouts.html</code>: These HTML files render a list of external links associated with a specific node or leaf, respectively. The links are generated from a data dictionary passed to the view and use the <code>tab_definitions</code> defined in the <code>current.OZglobals</code> object.</li> <li><code>wikipedia_OZpage.html</code>: This file retrieves and displays a Wikipedia page for a given taxon. It uses the Wikidata API to fetch the page, and then uses JavaScript to parse the page and sanitize the content by removing external links (if the page is being shown in a popup) and ensuring all links open in a new tab, where appropriate. It also loads the relevant stylesheets so the page renders correctly. It uses the <code>Qid</code>, <code>wikilang</code> and <code>sciname</code> variables passed to the view.</li> <li><code>IUCN_OZpage.html</code>: This page provides information about the International Union for Conservation of Nature (IUCN) Red List status of a species, along with a link to the relevant page on the IUCN website. It also includes a legend for the IUCN color scheme used in the tree of life. It uses the <code>iucnid</code> variable passed to the view.</li> </ul> <p>In summary, the files in this directory are responsible for providing auxiliary information about the OneZoom tree of life. They handle requests for data about specific nodes and leaves, display image information, integrate with external resources like GBIF and Wikipedia, and display conservation status from the IUCN. They work together to provide a richer and more informative user experience when interacting with the OneZoom tree of life.</p>"},{"location":"views/treeviewer/","title":"treeviewer","text":"<p>The <code>OZtree/views/treeviewer</code> directory contains the HTML, Javascript, and CSS files that make up the OneZoom tree viewer. It's designed to be a self-contained component that can be embedded in different contexts, and supports different configurations and customizations.</p> <p>Here's a breakdown of the key files and how they work together:</p> <ul> <li> <p><code>life_text.load</code>: This file generates the text-based representation of the tree, used when the canvas isn't available or for accessibility purposes. It uses a series of nested lists to represent the tree structure. The content is dynamically generated using data about the tree and its nodes, including names, number of species, and links to external resources.</p> </li> <li> <p><code>UI_layer.load</code>: This file defines the user interface elements that overlay the OneZoom canvas. It includes the logo, settings dropdown, search bar, zoom controls, location menu, and various modals for displaying information like \"About,\" \"How to use,\" and \"Data sources.\"  It handles user interactions, such as changing settings, initiating searches, and opening modals. The file also includes logic to dynamically add advanced search boxes. The UI is built using the UIkit framework.</p> </li> <li> <p><code>minlife.html</code>: This is a minimal version of the tree viewer, suitable for embedding in contexts with limited resources, or when the full UI isn't needed. It removes the language and page switching options, and forces the viewer to always use the \"OneZoom default\" tree page.</p> </li> <li> <p><code>life_MDmouse.html</code>: This configures the tree viewer for a museum display, specifically designed for mouse interaction. It hides some UI elements, loads a custom CSS file (<code>tree_MD.css</code>), disables right-click, and sets a custom title function. It also sets specific tabs to show when requesting further information on a given node, specifically \u2018wiki\u2019 and \u2018ozspons\u2019.</p> </li> <li> <p><code>layout_popuped_viewer.html</code>: This file provides a basic HTML structure for a popup version of the viewer. It\u2019s meant to be extended by other files (e.g., <code>life_MDmouse.html</code>) and contains the necessary meta tags for responsiveness, along with a message to close the popup window if recursively opened.</p> </li> <li> <p><code>linnean.html</code>: This configures the viewer for the Linnean Society, setting up the UI with a specific partner logo and default tabs, and forcing links to open in a new tab.</p> </li> <li> <p><code>AT.html</code>: This configures the viewer to be used for the Ancestor's Tale project, setting some specific locations to be used.  It also sets a custom tree configuration (e.g. colours) to show the tree in a different way and sets the page title to be dynamically set.</p> </li> <li> <p><code>layout.html</code>: This is the main layout file for the tree viewer. It includes the HTML structure, CSS, and Javascript libraries needed. It also includes the main <code>&lt;canvas&gt;</code> element used to draw the interactive tree. Most of the initialization of the OneZoom viewer happens within the <code>&lt;script&gt;</code> tags in this file, where the <code>setup_onezoom()</code> function creates a <code>onezoom</code> object which allows the viewer to be interacted with programmatically.  This file is designed to be extended by other files (e.g. <code>life.html</code>) and sets up the global Javascript variables, event handlers, and functions used to control the tree viewer. It also deals with partner-specific configurations and settings. It contains all the logic to handle the advanced search boxes and injects the necessary HTML to do so.</p> </li> <li> <p><code>badOTT.load</code>: This file contains the HTML to be loaded into a modal when the user searches for an invalid location. It provides links to external sites, like the Open Tree of Life, which may contain the location if it cannot be found within OneZoom.</p> </li> <li> <p><code>dynamic_scripts.html</code>: This file dynamically loads Javascript files containing tree data. It uses an AJAX call to get the latest version number of the tree and then loads the appropriate files, dealing with caching and errors.</p> </li> <li> <p><code>otop_MD.html</code>: This configures a version of the tree viewer for the One Tree One Planet project, specifically for museum displays that use a mouse. It hides some UI elements, adds custom tabs, and uses a dark theme. It includes logic to listen for messages from an external application (OTOP) to update the user's profile image. It also includes a tutorial that explains the tree controls, and which is shown on first opening the tree.</p> </li> <li> <p><code>otop.html</code>: This configures the tree viewer for the One Tree One Planet project. It adds custom tabs, uses a dark theme and sets up some OneZoom configuration variables to be appropriate to the use case. It includes logic to listen for messages from an external application (OTOP) to update the user's profile image. It also includes a tutorial that explains the tree controls, and which is shown on first opening the tree.</p> </li> <li> <p><code>life_text.html</code>: This file displays the textual representation of the tree.</p> </li> <li> <p><code>life_MDtouch.html</code>: This configures a version of the tree viewer for museum displays that use touch input. It hides some UI elements and loads the <code>tree_MD.css</code> stylesheet, and sets a custom title function. It also sets specific tabs to show when requesting further information on a given node, specifically \u2018wiki\u2019 and \u2018ozspons\u2019.</p> </li> <li> <p><code>life_expert.html</code>: This configures the viewer to show all available tabs, and includes a screenshot option in the UI. It also allows the user to zoom more sensitively by holding down the Control key.</p> </li> <li> <p><code>server_urls.html</code>: Defines the Javascript <code>server_urls</code> variable, which stores the URLs for various API endpoints, dynamically resolving them to the correct URLs for the site (e.g. including scheme and host).</p> </li> <li> <p><code>life.html</code>: This is the standard configuration for the OneZoom tree viewer, used when no other specific configuration is requested.</p> </li> <li> <p><code>minlife_tour.html</code>: This provides a minimal version of the tree viewer with a single tour.</p> </li> <li> <p><code>life_treasure.html</code>: This configures the viewer for a \"treasure hunt\" game. It adds a checklist to the page, and makes the 'linkouts' popup respond differently when the location has a \"treasure\" to find.</p> </li> <li> <p><code>life_noninteractive.html</code>: This provides a non-interactive version of the tree viewer, disabling all controls and preventing user interaction.</p> </li> <li> <p><code>about_plus_data.load</code>: This file combines the content of the <code>about.load</code> and <code>data_sources.load</code> views into one.</p> </li> <li> <p><code>UI_layer.json</code>: This is used for testing, and outputs a JSON representation of the <code>response._vars</code> object for inspection.</p> </li> <li> <p><code>js_strings.json</code>: This file serves a JSON object containing all the text strings used in the Javascript, which allows the viewer to be localized into different languages.</p> </li> <li> <p><code>README.markdown</code>: A brief description of the folder and its contents.</p> </li> </ul> <p>In summary, this directory provides the complete set of files required to render the interactive OneZoom tree viewer, designed to be flexible and reusable in different contexts. The core viewer logic resides in Javascript (defined in external files, not within these views), while these views are used to provide the HTML, CSS, and initial configuration for the viewer. The files are structured so that they can be easily customized for different use cases and partnerships.</p>"}]}